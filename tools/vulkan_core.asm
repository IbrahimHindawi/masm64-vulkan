VULKAN_CORE_H_ equ 1
VK_VERSION_1_0 equ 1
VK_API_VERSION_1_0 equ VK_MAKE_API_VERSION(0, 1, 0, 0)// Patch version should always be set to 0
VK_HEADER_VERSION equ 283
VK_HEADER_VERSION_COMPLETE equ VK_MAKE_API_VERSION(0, 1, 3, VK_HEADER_VERSION)
VK_ATTACHMENT_UNUSED equ (~0U)
VK_FALSE equ 0U
VK_LOD_CLAMP_NONE equ 1000.0F
VK_QUEUE_FAMILY_IGNORED equ (~0U)
VK_REMAINING_ARRAY_LAYERS equ (~0U)
VK_REMAINING_MIP_LEVELS equ (~0U)
VK_SUBPASS_EXTERNAL equ (~0U)
VK_TRUE equ 1U
VK_WHOLE_SIZE equ (~0ULL)
VK_MAX_MEMORY_TYPES equ 32U
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE equ 256U
VK_UUID_SIZE equ 16U
VK_MAX_EXTENSION_NAME_SIZE equ 256U
VK_MAX_DESCRIPTION_SIZE equ 256U
VK_MAX_MEMORY_HEAPS equ 16U
VK_VERSION_1_1 equ 1
VK_API_VERSION_1_1 equ VK_MAKE_API_VERSION(0, 1, 1, 0)// Patch version should always be set to 0
VK_MAX_DEVICE_GROUP_SIZE equ 32U
VK_LUID_SIZE equ 8U
VK_QUEUE_FAMILY_EXTERNAL equ (~1U)
VK_VERSION_1_2 equ 1
VK_API_VERSION_1_2 equ VK_MAKE_API_VERSION(0, 1, 2, 0)// Patch version should always be set to 0
VK_MAX_DRIVER_NAME_SIZE equ 256U
VK_MAX_DRIVER_INFO_SIZE equ 256U
VK_VERSION_1_3 equ 1
VK_API_VERSION_1_3 equ VK_MAKE_API_VERSION(0, 1, 3, 0)// Patch version should always be set to 0
VK_KHR_surface equ 1
VK_KHR_SURFACE_SPEC_VERSION equ 25
VK_KHR_SURFACE_EXTENSION_NAME equ "VK_KHR_surface"
VK_KHR_swapchain equ 1
VK_KHR_SWAPCHAIN_SPEC_VERSION equ 70
VK_KHR_SWAPCHAIN_EXTENSION_NAME equ "VK_KHR_swapchain"
VK_KHR_display equ 1
VK_KHR_DISPLAY_SPEC_VERSION equ 23
VK_KHR_DISPLAY_EXTENSION_NAME equ "VK_KHR_display"
VK_KHR_display_swapchain equ 1
VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION equ 10
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME equ "VK_KHR_display_swapchain"
VK_KHR_sampler_mirror_clamp_to_edge equ 1
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION equ 3
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME equ "VK_KHR_sampler_mirror_clamp_to_edge"
VK_KHR_video_queue equ 1
VK_KHR_VIDEO_QUEUE_SPEC_VERSION equ 8
VK_KHR_VIDEO_QUEUE_EXTENSION_NAME equ "VK_KHR_video_queue"
VK_KHR_video_decode_queue equ 1
VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION equ 8
VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME equ "VK_KHR_video_decode_queue"
VK_KHR_video_encode_h264 equ 1
VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION equ 14
VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME equ "VK_KHR_video_encode_h264"
VK_KHR_video_encode_h265 equ 1
VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION equ 14
VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME equ "VK_KHR_video_encode_h265"
VK_KHR_video_decode_h264 equ 1
VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION equ 9
VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME equ "VK_KHR_video_decode_h264"
VK_KHR_dynamic_rendering equ 1
VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION equ 1
VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME equ "VK_KHR_dynamic_rendering"
VK_KHR_multiview equ 1
VK_KHR_MULTIVIEW_SPEC_VERSION equ 1
VK_KHR_MULTIVIEW_EXTENSION_NAME equ "VK_KHR_multiview"
VK_KHR_get_physical_device_properties2 equ 1
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION equ 2
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME equ "VK_KHR_get_physical_device_properties2"
VK_KHR_device_group equ 1
VK_KHR_DEVICE_GROUP_SPEC_VERSION equ 4
VK_KHR_DEVICE_GROUP_EXTENSION_NAME equ "VK_KHR_device_group"
VK_KHR_shader_draw_parameters equ 1
VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION equ 1
VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME equ "VK_KHR_shader_draw_parameters"
VK_KHR_maintenance1 equ 1
VK_KHR_MAINTENANCE_1_SPEC_VERSION equ 2
VK_KHR_MAINTENANCE_1_EXTENSION_NAME equ "VK_KHR_maintenance1"
VK_KHR_MAINTENANCE1_SPEC_VERSION equ VK_KHR_MAINTENANCE_1_SPEC_VERSION
VK_KHR_MAINTENANCE1_EXTENSION_NAME equ VK_KHR_MAINTENANCE_1_EXTENSION_NAME
VK_KHR_device_group_creation equ 1
VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION equ 1
VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME equ "VK_KHR_device_group_creation"
VK_MAX_DEVICE_GROUP_SIZE_KHR equ VK_MAX_DEVICE_GROUP_SIZE
VK_KHR_external_memory_capabilities equ 1
VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME equ "VK_KHR_external_memory_capabilities"
VK_LUID_SIZE_KHR equ VK_LUID_SIZE
VK_KHR_external_memory equ 1
VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME equ "VK_KHR_external_memory"
VK_QUEUE_FAMILY_EXTERNAL_KHR equ VK_QUEUE_FAMILY_EXTERNAL
VK_KHR_external_memory_fd equ 1
VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME equ "VK_KHR_external_memory_fd"
VK_KHR_external_semaphore_capabilities equ 1
VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME equ "VK_KHR_external_semaphore_capabilities"
VK_KHR_external_semaphore equ 1
VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME equ "VK_KHR_external_semaphore"
VK_KHR_external_semaphore_fd equ 1
VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME equ "VK_KHR_external_semaphore_fd"
VK_KHR_push_descriptor equ 1
VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION equ 2
VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME equ "VK_KHR_push_descriptor"
VK_KHR_shader_float16_int8 equ 1
VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION equ 1
VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME equ "VK_KHR_shader_float16_int8"
VK_KHR_16bit_storage equ 1
VK_KHR_16BIT_STORAGE_SPEC_VERSION equ 1
VK_KHR_16BIT_STORAGE_EXTENSION_NAME equ "VK_KHR_16bit_storage"
VK_KHR_incremental_present equ 1
VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION equ 2
VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME equ "VK_KHR_incremental_present"
VK_KHR_descriptor_update_template equ 1
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION equ 1
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME equ "VK_KHR_descriptor_update_template"
VK_KHR_imageless_framebuffer equ 1
VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION equ 1
VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME equ "VK_KHR_imageless_framebuffer"
VK_KHR_create_renderpass2 equ 1
VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION equ 1
VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME equ "VK_KHR_create_renderpass2"
VK_KHR_shared_presentable_image equ 1
VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION equ 1
VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME equ "VK_KHR_shared_presentable_image"
VK_KHR_external_fence_capabilities equ 1
VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME equ "VK_KHR_external_fence_capabilities"
VK_KHR_external_fence equ 1
VK_KHR_EXTERNAL_FENCE_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME equ "VK_KHR_external_fence"
VK_KHR_external_fence_fd equ 1
VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION equ 1
VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME equ "VK_KHR_external_fence_fd"
VK_KHR_performance_query equ 1
VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION equ 1
VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME equ "VK_KHR_performance_query"
VK_KHR_maintenance2 equ 1
VK_KHR_MAINTENANCE_2_SPEC_VERSION equ 1
VK_KHR_MAINTENANCE_2_EXTENSION_NAME equ "VK_KHR_maintenance2"
VK_KHR_MAINTENANCE2_SPEC_VERSION equ VK_KHR_MAINTENANCE_2_SPEC_VERSION
VK_KHR_MAINTENANCE2_EXTENSION_NAME equ VK_KHR_MAINTENANCE_2_EXTENSION_NAME
VK_KHR_get_surface_capabilities2 equ 1
VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION equ 1
VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME equ "VK_KHR_get_surface_capabilities2"
VK_KHR_variable_pointers equ 1
VK_KHR_VARIABLE_POINTERS_SPEC_VERSION equ 1
VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME equ "VK_KHR_variable_pointers"
VK_KHR_get_display_properties2 equ 1
VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION equ 1
VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME equ "VK_KHR_get_display_properties2"
VK_KHR_dedicated_allocation equ 1
VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION equ 3
VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME equ "VK_KHR_dedicated_allocation"
VK_KHR_storage_buffer_storage_class equ 1
VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION equ 1
VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME equ "VK_KHR_storage_buffer_storage_class"
VK_KHR_relaxed_block_layout equ 1
VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION equ 1
VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME equ "VK_KHR_relaxed_block_layout"
VK_KHR_get_memory_requirements2 equ 1
VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION equ 1
VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME equ "VK_KHR_get_memory_requirements2"
VK_KHR_image_format_list equ 1
VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION equ 1
VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME equ "VK_KHR_image_format_list"
VK_KHR_sampler_ycbcr_conversion equ 1
VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION equ 14
VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME equ "VK_KHR_sampler_ycbcr_conversion"
VK_KHR_bind_memory2 equ 1
VK_KHR_BIND_MEMORY_2_SPEC_VERSION equ 1
VK_KHR_BIND_MEMORY_2_EXTENSION_NAME equ "VK_KHR_bind_memory2"
VK_KHR_maintenance3 equ 1
VK_KHR_MAINTENANCE_3_SPEC_VERSION equ 1
VK_KHR_MAINTENANCE_3_EXTENSION_NAME equ "VK_KHR_maintenance3"
VK_KHR_MAINTENANCE3_SPEC_VERSION equ VK_KHR_MAINTENANCE_3_SPEC_VERSION
VK_KHR_MAINTENANCE3_EXTENSION_NAME equ VK_KHR_MAINTENANCE_3_EXTENSION_NAME
VK_KHR_draw_indirect_count equ 1
VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION equ 1
VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME equ "VK_KHR_draw_indirect_count"
VK_KHR_shader_subgroup_extended_types equ 1
VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION equ 1
VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME equ "VK_KHR_shader_subgroup_extended_types"
VK_KHR_8bit_storage equ 1
VK_KHR_8BIT_STORAGE_SPEC_VERSION equ 1
VK_KHR_8BIT_STORAGE_EXTENSION_NAME equ "VK_KHR_8bit_storage"
VK_KHR_shader_atomic_int64 equ 1
VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION equ 1
VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME equ "VK_KHR_shader_atomic_int64"
VK_KHR_shader_clock equ 1
VK_KHR_SHADER_CLOCK_SPEC_VERSION equ 1
VK_KHR_SHADER_CLOCK_EXTENSION_NAME equ "VK_KHR_shader_clock"
VK_KHR_video_decode_h265 equ 1
VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION equ 8
VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME equ "VK_KHR_video_decode_h265"
VK_KHR_global_priority equ 1
VK_MAX_GLOBAL_PRIORITY_SIZE_KHR equ 16U
VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION equ 1
VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME equ "VK_KHR_global_priority"
VK_KHR_driver_properties equ 1
VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION equ 1
VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME equ "VK_KHR_driver_properties"
VK_MAX_DRIVER_NAME_SIZE_KHR equ VK_MAX_DRIVER_NAME_SIZE
VK_MAX_DRIVER_INFO_SIZE_KHR equ VK_MAX_DRIVER_INFO_SIZE
VK_KHR_shader_float_controls equ 1
VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION equ 4
VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME equ "VK_KHR_shader_float_controls"
VK_KHR_depth_stencil_resolve equ 1
VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION equ 1
VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME equ "VK_KHR_depth_stencil_resolve"
VK_KHR_swapchain_mutable_format equ 1
VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION equ 1
VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME equ "VK_KHR_swapchain_mutable_format"
VK_KHR_timeline_semaphore equ 1
VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION equ 2
VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME equ "VK_KHR_timeline_semaphore"
VK_KHR_vulkan_memory_model equ 1
VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION equ 3
VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME equ "VK_KHR_vulkan_memory_model"
VK_KHR_shader_terminate_invocation equ 1
VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION equ 1
VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME equ "VK_KHR_shader_terminate_invocation"
VK_KHR_fragment_shading_rate equ 1
VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION equ 2
VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME equ "VK_KHR_fragment_shading_rate"
VK_KHR_dynamic_rendering_local_read equ 1
VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION equ 1
VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME equ "VK_KHR_dynamic_rendering_local_read"
VK_KHR_shader_quad_control equ 1
VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION equ 1
VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME equ "VK_KHR_shader_quad_control"
VK_KHR_spirv_1_4 equ 1
VK_KHR_SPIRV_1_4_SPEC_VERSION equ 1
VK_KHR_SPIRV_1_4_EXTENSION_NAME equ "VK_KHR_spirv_1_4"
VK_KHR_surface_protected_capabilities equ 1
VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION equ 1
VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME equ "VK_KHR_surface_protected_capabilities"
VK_KHR_separate_depth_stencil_layouts equ 1
VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION equ 1
VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME equ "VK_KHR_separate_depth_stencil_layouts"
VK_KHR_present_wait equ 1
VK_KHR_PRESENT_WAIT_SPEC_VERSION equ 1
VK_KHR_PRESENT_WAIT_EXTENSION_NAME equ "VK_KHR_present_wait"
VK_KHR_uniform_buffer_standard_layout equ 1
VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION equ 1
VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME equ "VK_KHR_uniform_buffer_standard_layout"
VK_KHR_buffer_device_address equ 1
VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION equ 1
VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME equ "VK_KHR_buffer_device_address"
VK_KHR_deferred_host_operations equ 1
VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION equ 4
VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME equ "VK_KHR_deferred_host_operations"
VK_KHR_pipeline_executable_properties equ 1
VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION equ 1
VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME equ "VK_KHR_pipeline_executable_properties"
VK_KHR_map_memory2 equ 1
VK_KHR_MAP_MEMORY_2_SPEC_VERSION equ 1
VK_KHR_MAP_MEMORY_2_EXTENSION_NAME equ "VK_KHR_map_memory2"
VK_KHR_shader_integer_dot_product equ 1
VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION equ 1
VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME equ "VK_KHR_shader_integer_dot_product"
VK_KHR_pipeline_library equ 1
VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION equ 1
VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME equ "VK_KHR_pipeline_library"
VK_KHR_shader_non_semantic_info equ 1
VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION equ 1
VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME equ "VK_KHR_shader_non_semantic_info"
VK_KHR_present_id equ 1
VK_KHR_PRESENT_ID_SPEC_VERSION equ 1
VK_KHR_PRESENT_ID_EXTENSION_NAME equ "VK_KHR_present_id"
VK_KHR_video_encode_queue equ 1
VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION equ 12
VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME equ "VK_KHR_video_encode_queue"
VK_KHR_synchronization2 equ 1
VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION equ 1
VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME equ "VK_KHR_synchronization2"
VK_KHR_fragment_shader_barycentric equ 1
VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION equ 1
VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME equ "VK_KHR_fragment_shader_barycentric"
VK_KHR_shader_subgroup_uniform_control_flow equ 1
VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION equ 1
VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME equ "VK_KHR_shader_subgroup_uniform_control_flow"
VK_KHR_zero_initialize_workgroup_memory equ 1
VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION equ 1
VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME equ "VK_KHR_zero_initialize_workgroup_memory"
VK_KHR_workgroup_memory_explicit_layout equ 1
VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION equ 1
VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME equ "VK_KHR_workgroup_memory_explicit_layout"
VK_KHR_copy_commands2 equ 1
VK_KHR_COPY_COMMANDS_2_SPEC_VERSION equ 1
VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME equ "VK_KHR_copy_commands2"
VK_KHR_format_feature_flags2 equ 1
VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION equ 2
VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME equ "VK_KHR_format_feature_flags2"
VK_KHR_ray_tracing_maintenance1 equ 1
VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION equ 1
VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME equ "VK_KHR_ray_tracing_maintenance1"
VK_KHR_portability_enumeration equ 1
VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION equ 1
VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME equ "VK_KHR_portability_enumeration"
VK_KHR_maintenance4 equ 1
VK_KHR_MAINTENANCE_4_SPEC_VERSION equ 2
VK_KHR_MAINTENANCE_4_EXTENSION_NAME equ "VK_KHR_maintenance4"
VK_KHR_shader_subgroup_rotate equ 1
VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION equ 2
VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME equ "VK_KHR_shader_subgroup_rotate"
VK_KHR_shader_maximal_reconvergence equ 1
VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION equ 1
VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME equ "VK_KHR_shader_maximal_reconvergence"
VK_KHR_maintenance5 equ 1
VK_KHR_MAINTENANCE_5_SPEC_VERSION equ 1
VK_KHR_MAINTENANCE_5_EXTENSION_NAME equ "VK_KHR_maintenance5"
VK_KHR_ray_tracing_position_fetch equ 1
VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION equ 1
VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME equ "VK_KHR_ray_tracing_position_fetch"
VK_KHR_cooperative_matrix equ 1
VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION equ 2
VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME equ "VK_KHR_cooperative_matrix"
VK_KHR_video_decode_av1 equ 1
VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR equ 7U
VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION equ 1
VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME equ "VK_KHR_video_decode_av1"
VK_KHR_video_maintenance1 equ 1
VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION equ 1
VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME equ "VK_KHR_video_maintenance1"
VK_KHR_vertex_attribute_divisor equ 1
VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION equ 1
VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME equ "VK_KHR_vertex_attribute_divisor"
VK_KHR_load_store_op_none equ 1
VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION equ 1
VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME equ "VK_KHR_load_store_op_none"
VK_KHR_shader_float_controls2 equ 1
VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION equ 1
VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME equ "VK_KHR_shader_float_controls2"
VK_KHR_index_type_uint8 equ 1
VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION equ 1
VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME equ "VK_KHR_index_type_uint8"
VK_KHR_line_rasterization equ 1
VK_KHR_LINE_RASTERIZATION_SPEC_VERSION equ 1
VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME equ "VK_KHR_line_rasterization"
VK_KHR_calibrated_timestamps equ 1
VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION equ 1
VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME equ "VK_KHR_calibrated_timestamps"
VK_KHR_shader_expect_assume equ 1
VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION equ 1
VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME equ "VK_KHR_shader_expect_assume"
VK_KHR_maintenance6 equ 1
VK_KHR_MAINTENANCE_6_SPEC_VERSION equ 1
VK_KHR_MAINTENANCE_6_EXTENSION_NAME equ "VK_KHR_maintenance6"
VK_EXT_debug_report equ 1
VK_EXT_DEBUG_REPORT_SPEC_VERSION equ 10
VK_EXT_DEBUG_REPORT_EXTENSION_NAME equ "VK_EXT_debug_report"
VK_NV_glsl_shader equ 1
VK_NV_GLSL_SHADER_SPEC_VERSION equ 1
VK_NV_GLSL_SHADER_EXTENSION_NAME equ "VK_NV_glsl_shader"
VK_EXT_depth_range_unrestricted equ 1
VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION equ 1
VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME equ "VK_EXT_depth_range_unrestricted"
VK_IMG_filter_cubic equ 1
VK_IMG_FILTER_CUBIC_SPEC_VERSION equ 1
VK_IMG_FILTER_CUBIC_EXTENSION_NAME equ "VK_IMG_filter_cubic"
VK_AMD_rasterization_order equ 1
VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION equ 1
VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME equ "VK_AMD_rasterization_order"
VK_AMD_shader_trinary_minmax equ 1
VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION equ 1
VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME equ "VK_AMD_shader_trinary_minmax"
VK_AMD_shader_explicit_vertex_parameter equ 1
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION equ 1
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME equ "VK_AMD_shader_explicit_vertex_parameter"
VK_EXT_debug_marker equ 1
VK_EXT_DEBUG_MARKER_SPEC_VERSION equ 4
VK_EXT_DEBUG_MARKER_EXTENSION_NAME equ "VK_EXT_debug_marker"
VK_AMD_gcn_shader equ 1
VK_AMD_GCN_SHADER_SPEC_VERSION equ 1
VK_AMD_GCN_SHADER_EXTENSION_NAME equ "VK_AMD_gcn_shader"
VK_NV_dedicated_allocation equ 1
VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION equ 1
VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME equ "VK_NV_dedicated_allocation"
VK_EXT_transform_feedback equ 1
VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION equ 1
VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME equ "VK_EXT_transform_feedback"
VK_NVX_binary_import equ 1
VK_NVX_BINARY_IMPORT_SPEC_VERSION equ 1
VK_NVX_BINARY_IMPORT_EXTENSION_NAME equ "VK_NVX_binary_import"
VK_NVX_image_view_handle equ 1
VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION equ 2
VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME equ "VK_NVX_image_view_handle"
VK_AMD_draw_indirect_count equ 1
VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION equ 2
VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME equ "VK_AMD_draw_indirect_count"
VK_AMD_negative_viewport_height equ 1
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION equ 1
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME equ "VK_AMD_negative_viewport_height"
VK_AMD_gpu_shader_half_float equ 1
VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION equ 2
VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME equ "VK_AMD_gpu_shader_half_float"
VK_AMD_shader_ballot equ 1
VK_AMD_SHADER_BALLOT_SPEC_VERSION equ 1
VK_AMD_SHADER_BALLOT_EXTENSION_NAME equ "VK_AMD_shader_ballot"
VK_AMD_texture_gather_bias_lod equ 1
VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION equ 1
VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME equ "VK_AMD_texture_gather_bias_lod"
VK_AMD_shader_info equ 1
VK_AMD_SHADER_INFO_SPEC_VERSION equ 1
VK_AMD_SHADER_INFO_EXTENSION_NAME equ "VK_AMD_shader_info"
VK_AMD_shader_image_load_store_lod equ 1
VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION equ 1
VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME equ "VK_AMD_shader_image_load_store_lod"
VK_NV_corner_sampled_image equ 1
VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION equ 2
VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME equ "VK_NV_corner_sampled_image"
VK_IMG_format_pvrtc equ 1
VK_IMG_FORMAT_PVRTC_SPEC_VERSION equ 1
VK_IMG_FORMAT_PVRTC_EXTENSION_NAME equ "VK_IMG_format_pvrtc"
VK_NV_external_memory_capabilities equ 1
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION equ 1
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME equ "VK_NV_external_memory_capabilities"
VK_NV_external_memory equ 1
VK_NV_EXTERNAL_MEMORY_SPEC_VERSION equ 1
VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME equ "VK_NV_external_memory"
VK_EXT_validation_flags equ 1
VK_EXT_VALIDATION_FLAGS_SPEC_VERSION equ 3
VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME equ "VK_EXT_validation_flags"
VK_EXT_shader_subgroup_ballot equ 1
VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION equ 1
VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME equ "VK_EXT_shader_subgroup_ballot"
VK_EXT_shader_subgroup_vote equ 1
VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION equ 1
VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME equ "VK_EXT_shader_subgroup_vote"
VK_EXT_texture_compression_astc_hdr equ 1
VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION equ 1
VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME equ "VK_EXT_texture_compression_astc_hdr"
VK_EXT_astc_decode_mode equ 1
VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION equ 1
VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME equ "VK_EXT_astc_decode_mode"
VK_EXT_pipeline_robustness equ 1
VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION equ 1
VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME equ "VK_EXT_pipeline_robustness"
VK_EXT_conditional_rendering equ 1
VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION equ 2
VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME equ "VK_EXT_conditional_rendering"
VK_NV_clip_space_w_scaling equ 1
VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION equ 1
VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME equ "VK_NV_clip_space_w_scaling"
VK_EXT_direct_mode_display equ 1
VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION equ 1
VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME equ "VK_EXT_direct_mode_display"
VK_EXT_display_surface_counter equ 1
VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION equ 1
VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME equ "VK_EXT_display_surface_counter"
VK_EXT_display_control equ 1
VK_EXT_DISPLAY_CONTROL_SPEC_VERSION equ 1
VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME equ "VK_EXT_display_control"
VK_GOOGLE_display_timing equ 1
VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION equ 1
VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME equ "VK_GOOGLE_display_timing"
VK_NV_sample_mask_override_coverage equ 1
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION equ 1
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME equ "VK_NV_sample_mask_override_coverage"
VK_NV_geometry_shader_passthrough equ 1
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION equ 1
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME equ "VK_NV_geometry_shader_passthrough"
VK_NV_viewport_array2 equ 1
VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION equ 1
VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME equ "VK_NV_viewport_array2"
VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION equ VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION
VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME equ VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME
VK_NVX_multiview_per_view_attributes equ 1
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION equ 1
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME equ "VK_NVX_multiview_per_view_attributes"
VK_NV_viewport_swizzle equ 1
VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION equ 1
VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME equ "VK_NV_viewport_swizzle"
VK_EXT_discard_rectangles equ 1
VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION equ 2
VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME equ "VK_EXT_discard_rectangles"
VK_EXT_conservative_rasterization equ 1
VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION equ 1
VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME equ "VK_EXT_conservative_rasterization"
VK_EXT_depth_clip_enable equ 1
VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION equ 1
VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME equ "VK_EXT_depth_clip_enable"
VK_EXT_swapchain_colorspace equ 1
VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION equ 4
VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME equ "VK_EXT_swapchain_colorspace"
VK_EXT_hdr_metadata equ 1
VK_EXT_HDR_METADATA_SPEC_VERSION equ 2
VK_EXT_HDR_METADATA_EXTENSION_NAME equ "VK_EXT_hdr_metadata"
VK_IMG_relaxed_line_rasterization equ 1
VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION equ 1
VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME equ "VK_IMG_relaxed_line_rasterization"
VK_EXT_external_memory_dma_buf equ 1
VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION equ 1
VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME equ "VK_EXT_external_memory_dma_buf"
VK_EXT_queue_family_foreign equ 1
VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION equ 1
VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME equ "VK_EXT_queue_family_foreign"
VK_QUEUE_FAMILY_FOREIGN_EXT equ (~2U)
VK_EXT_debug_utils equ 1
VK_EXT_DEBUG_UTILS_SPEC_VERSION equ 2
VK_EXT_DEBUG_UTILS_EXTENSION_NAME equ "VK_EXT_debug_utils"
VK_EXT_sampler_filter_minmax equ 1
VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION equ 2
VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME equ "VK_EXT_sampler_filter_minmax"
VK_AMD_gpu_shader_int16 equ 1
VK_AMD_GPU_SHADER_INT16_SPEC_VERSION equ 2
VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME equ "VK_AMD_gpu_shader_int16"
VK_AMD_mixed_attachment_samples equ 1
VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION equ 1
VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME equ "VK_AMD_mixed_attachment_samples"
VK_AMD_shader_fragment_mask equ 1
VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION equ 1
VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME equ "VK_AMD_shader_fragment_mask"
VK_EXT_inline_uniform_block equ 1
VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION equ 1
VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME equ "VK_EXT_inline_uniform_block"
VK_EXT_shader_stencil_export equ 1
VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION equ 1
VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME equ "VK_EXT_shader_stencil_export"
VK_EXT_sample_locations equ 1
VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION equ 1
VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME equ "VK_EXT_sample_locations"
VK_EXT_blend_operation_advanced equ 1
VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION equ 2
VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME equ "VK_EXT_blend_operation_advanced"
VK_NV_fragment_coverage_to_color equ 1
VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION equ 1
VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME equ "VK_NV_fragment_coverage_to_color"
VK_NV_framebuffer_mixed_samples equ 1
VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION equ 1
VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME equ "VK_NV_framebuffer_mixed_samples"
VK_NV_fill_rectangle equ 1
VK_NV_FILL_RECTANGLE_SPEC_VERSION equ 1
VK_NV_FILL_RECTANGLE_EXTENSION_NAME equ "VK_NV_fill_rectangle"
VK_NV_shader_sm_builtins equ 1
VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION equ 1
VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME equ "VK_NV_shader_sm_builtins"
VK_EXT_post_depth_coverage equ 1
VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION equ 1
VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME equ "VK_EXT_post_depth_coverage"
VK_EXT_image_drm_format_modifier equ 1
VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION equ 2
VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME equ "VK_EXT_image_drm_format_modifier"
VK_EXT_validation_cache equ 1
VK_EXT_VALIDATION_CACHE_SPEC_VERSION equ 1
VK_EXT_VALIDATION_CACHE_EXTENSION_NAME equ "VK_EXT_validation_cache"
VK_EXT_descriptor_indexing equ 1
VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION equ 2
VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME equ "VK_EXT_descriptor_indexing"
VK_EXT_shader_viewport_index_layer equ 1
VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION equ 1
VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME equ "VK_EXT_shader_viewport_index_layer"
VK_NV_shading_rate_image equ 1
VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION equ 3
VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME equ "VK_NV_shading_rate_image"
VK_NV_ray_tracing equ 1
VK_NV_RAY_TRACING_SPEC_VERSION equ 3
VK_NV_RAY_TRACING_EXTENSION_NAME equ "VK_NV_ray_tracing"
VK_SHADER_UNUSED_KHR equ (~0U)
VK_SHADER_UNUSED_NV equ VK_SHADER_UNUSED_KHR
VK_NV_representative_fragment_test equ 1
VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION equ 2
VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME equ "VK_NV_representative_fragment_test"
VK_EXT_filter_cubic equ 1
VK_EXT_FILTER_CUBIC_SPEC_VERSION equ 3
VK_EXT_FILTER_CUBIC_EXTENSION_NAME equ "VK_EXT_filter_cubic"
VK_QCOM_render_pass_shader_resolve equ 1
VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION equ 4
VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME equ "VK_QCOM_render_pass_shader_resolve"
VK_EXT_global_priority equ 1
VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION equ 2
VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME equ "VK_EXT_global_priority"
VK_EXT_external_memory_host equ 1
VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION equ 1
VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME equ "VK_EXT_external_memory_host"
VK_AMD_buffer_marker equ 1
VK_AMD_BUFFER_MARKER_SPEC_VERSION equ 1
VK_AMD_BUFFER_MARKER_EXTENSION_NAME equ "VK_AMD_buffer_marker"
VK_AMD_pipeline_compiler_control equ 1
VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION equ 1
VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME equ "VK_AMD_pipeline_compiler_control"
VK_EXT_calibrated_timestamps equ 1
VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION equ 2
VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME equ "VK_EXT_calibrated_timestamps"
VK_AMD_shader_core_properties equ 1
VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION equ 2
VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME equ "VK_AMD_shader_core_properties"
VK_AMD_memory_overallocation_behavior equ 1
VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION equ 1
VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME equ "VK_AMD_memory_overallocation_behavior"
VK_EXT_vertex_attribute_divisor equ 1
VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION equ 3
VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME equ "VK_EXT_vertex_attribute_divisor"
VK_EXT_pipeline_creation_feedback equ 1
VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION equ 1
VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME equ "VK_EXT_pipeline_creation_feedback"
VK_NV_shader_subgroup_partitioned equ 1
VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION equ 1
VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME equ "VK_NV_shader_subgroup_partitioned"
VK_NV_compute_shader_derivatives equ 1
VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION equ 1
VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME equ "VK_NV_compute_shader_derivatives"
VK_NV_mesh_shader equ 1
VK_NV_MESH_SHADER_SPEC_VERSION equ 1
VK_NV_MESH_SHADER_EXTENSION_NAME equ "VK_NV_mesh_shader"
VK_NV_fragment_shader_barycentric equ 1
VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION equ 1
VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME equ "VK_NV_fragment_shader_barycentric"
VK_NV_shader_image_footprint equ 1
VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION equ 2
VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME equ "VK_NV_shader_image_footprint"
VK_NV_scissor_exclusive equ 1
VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION equ 2
VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME equ "VK_NV_scissor_exclusive"
VK_NV_device_diagnostic_checkpoints equ 1
VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION equ 2
VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME equ "VK_NV_device_diagnostic_checkpoints"
VK_INTEL_shader_integer_functions2 equ 1
VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION equ 1
VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME equ "VK_INTEL_shader_integer_functions2"
VK_INTEL_performance_query equ 1
VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION equ 2
VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME equ "VK_INTEL_performance_query"
VK_EXT_pci_bus_info equ 1
VK_EXT_PCI_BUS_INFO_SPEC_VERSION equ 2
VK_EXT_PCI_BUS_INFO_EXTENSION_NAME equ "VK_EXT_pci_bus_info"
VK_AMD_display_native_hdr equ 1
VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION equ 1
VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME equ "VK_AMD_display_native_hdr"
VK_EXT_fragment_density_map equ 1
VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION equ 2
VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME equ "VK_EXT_fragment_density_map"
VK_EXT_scalar_block_layout equ 1
VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION equ 1
VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME equ "VK_EXT_scalar_block_layout"
VK_GOOGLE_hlsl_functionality1 equ 1
VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION equ 1
VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME equ "VK_GOOGLE_hlsl_functionality1"
VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION equ VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION
VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME equ VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME
VK_GOOGLE_decorate_string equ 1
VK_GOOGLE_DECORATE_STRING_SPEC_VERSION equ 1
VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME equ "VK_GOOGLE_decorate_string"
VK_EXT_subgroup_size_control equ 1
VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION equ 2
VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME equ "VK_EXT_subgroup_size_control"
VK_AMD_shader_core_properties2 equ 1
VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION equ 1
VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME equ "VK_AMD_shader_core_properties2"
VK_AMD_device_coherent_memory equ 1
VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION equ 1
VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME equ "VK_AMD_device_coherent_memory"
VK_EXT_shader_image_atomic_int64 equ 1
VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION equ 1
VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME equ "VK_EXT_shader_image_atomic_int64"
VK_EXT_memory_budget equ 1
VK_EXT_MEMORY_BUDGET_SPEC_VERSION equ 1
VK_EXT_MEMORY_BUDGET_EXTENSION_NAME equ "VK_EXT_memory_budget"
VK_EXT_memory_priority equ 1
VK_EXT_MEMORY_PRIORITY_SPEC_VERSION equ 1
VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME equ "VK_EXT_memory_priority"
VK_NV_dedicated_allocation_image_aliasing equ 1
VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION equ 1
VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME equ "VK_NV_dedicated_allocation_image_aliasing"
VK_EXT_buffer_device_address equ 1
VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION equ 2
VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME equ "VK_EXT_buffer_device_address"
VK_EXT_tooling_info equ 1
VK_EXT_TOOLING_INFO_SPEC_VERSION equ 1
VK_EXT_TOOLING_INFO_EXTENSION_NAME equ "VK_EXT_tooling_info"
VK_EXT_separate_stencil_usage equ 1
VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION equ 1
VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME equ "VK_EXT_separate_stencil_usage"
VK_EXT_validation_features equ 1
VK_EXT_VALIDATION_FEATURES_SPEC_VERSION equ 6
VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME equ "VK_EXT_validation_features"
VK_NV_cooperative_matrix equ 1
VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION equ 1
VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME equ "VK_NV_cooperative_matrix"
VK_NV_coverage_reduction_mode equ 1
VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION equ 1
VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME equ "VK_NV_coverage_reduction_mode"
VK_EXT_fragment_shader_interlock equ 1
VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION equ 1
VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME equ "VK_EXT_fragment_shader_interlock"
VK_EXT_ycbcr_image_arrays equ 1
VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION equ 1
VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME equ "VK_EXT_ycbcr_image_arrays"
VK_EXT_provoking_vertex equ 1
VK_EXT_PROVOKING_VERTEX_SPEC_VERSION equ 1
VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME equ "VK_EXT_provoking_vertex"
VK_EXT_headless_surface equ 1
VK_EXT_HEADLESS_SURFACE_SPEC_VERSION equ 1
VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME equ "VK_EXT_headless_surface"
VK_EXT_line_rasterization equ 1
VK_EXT_LINE_RASTERIZATION_SPEC_VERSION equ 1
VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME equ "VK_EXT_line_rasterization"
VK_EXT_shader_atomic_float equ 1
VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION equ 1
VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME equ "VK_EXT_shader_atomic_float"
VK_EXT_host_query_reset equ 1
VK_EXT_HOST_QUERY_RESET_SPEC_VERSION equ 1
VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME equ "VK_EXT_host_query_reset"
VK_EXT_index_type_uint8 equ 1
VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION equ 1
VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME equ "VK_EXT_index_type_uint8"
VK_EXT_extended_dynamic_state equ 1
VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION equ 1
VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME equ "VK_EXT_extended_dynamic_state"
VK_EXT_host_image_copy equ 1
VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION equ 1
VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME equ "VK_EXT_host_image_copy"
VK_EXT_map_memory_placed equ 1
VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION equ 1
VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME equ "VK_EXT_map_memory_placed"
VK_EXT_shader_atomic_float2 equ 1
VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION equ 1
VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME equ "VK_EXT_shader_atomic_float2"
VK_EXT_surface_maintenance1 equ 1
VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION equ 1
VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME equ "VK_EXT_surface_maintenance1"
VK_EXT_swapchain_maintenance1 equ 1
VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION equ 1
VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME equ "VK_EXT_swapchain_maintenance1"
VK_EXT_shader_demote_to_helper_invocation equ 1
VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION equ 1
VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME equ "VK_EXT_shader_demote_to_helper_invocation"
VK_NV_device_generated_commands equ 1
VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION equ 3
VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME equ "VK_NV_device_generated_commands"
VK_NV_inherited_viewport_scissor equ 1
VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION equ 1
VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME equ "VK_NV_inherited_viewport_scissor"
VK_EXT_texel_buffer_alignment equ 1
VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION equ 1
VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME equ "VK_EXT_texel_buffer_alignment"
VK_QCOM_render_pass_transform equ 1
VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION equ 4
VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME equ "VK_QCOM_render_pass_transform"
VK_EXT_depth_bias_control equ 1
VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION equ 1
VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME equ "VK_EXT_depth_bias_control"
VK_EXT_device_memory_report equ 1
VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION equ 2
VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME equ "VK_EXT_device_memory_report"
VK_EXT_acquire_drm_display equ 1
VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION equ 1
VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME equ "VK_EXT_acquire_drm_display"
VK_EXT_robustness2 equ 1
VK_EXT_ROBUSTNESS_2_SPEC_VERSION equ 1
VK_EXT_ROBUSTNESS_2_EXTENSION_NAME equ "VK_EXT_robustness2"
VK_EXT_custom_border_color equ 1
VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION equ 12
VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME equ "VK_EXT_custom_border_color"
VK_GOOGLE_user_type equ 1
VK_GOOGLE_USER_TYPE_SPEC_VERSION equ 1
VK_GOOGLE_USER_TYPE_EXTENSION_NAME equ "VK_GOOGLE_user_type"
VK_NV_present_barrier equ 1
VK_NV_PRESENT_BARRIER_SPEC_VERSION equ 1
VK_NV_PRESENT_BARRIER_EXTENSION_NAME equ "VK_NV_present_barrier"
VK_EXT_private_data equ 1
VK_EXT_PRIVATE_DATA_SPEC_VERSION equ 1
VK_EXT_PRIVATE_DATA_EXTENSION_NAME equ "VK_EXT_private_data"
VK_EXT_pipeline_creation_cache_control equ 1
VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION equ 3
VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME equ "VK_EXT_pipeline_creation_cache_control"
VK_NV_device_diagnostics_config equ 1
VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION equ 2
VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME equ "VK_NV_device_diagnostics_config"
VK_QCOM_render_pass_store_ops equ 1
VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION equ 2
VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME equ "VK_QCOM_render_pass_store_ops"
VK_NV_cuda_kernel_launch equ 1
VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION equ 2
VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME equ "VK_NV_cuda_kernel_launch"
VK_NV_low_latency equ 1
VK_NV_LOW_LATENCY_SPEC_VERSION equ 1
VK_NV_LOW_LATENCY_EXTENSION_NAME equ "VK_NV_low_latency"
VK_EXT_descriptor_buffer equ 1
VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION equ 1
VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME equ "VK_EXT_descriptor_buffer"
VK_EXT_graphics_pipeline_library equ 1
VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION equ 1
VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME equ "VK_EXT_graphics_pipeline_library"
VK_AMD_shader_early_and_late_fragment_tests equ 1
VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION equ 1
VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME equ "VK_AMD_shader_early_and_late_fragment_tests"
VK_NV_fragment_shading_rate_enums equ 1
VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION equ 1
VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME equ "VK_NV_fragment_shading_rate_enums"
VK_NV_ray_tracing_motion_blur equ 1
VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION equ 1
VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME equ "VK_NV_ray_tracing_motion_blur"
VK_EXT_ycbcr_2plane_444_formats equ 1
VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION equ 1
VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME equ "VK_EXT_ycbcr_2plane_444_formats"
VK_EXT_fragment_density_map2 equ 1
VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION equ 1
VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME equ "VK_EXT_fragment_density_map2"
VK_QCOM_rotated_copy_commands equ 1
VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION equ 2
VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME equ "VK_QCOM_rotated_copy_commands"
VK_EXT_image_robustness equ 1
VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION equ 1
VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME equ "VK_EXT_image_robustness"
VK_EXT_image_compression_control equ 1
VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION equ 1
VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME equ "VK_EXT_image_compression_control"
VK_EXT_attachment_feedback_loop_layout equ 1
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION equ 2
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME equ "VK_EXT_attachment_feedback_loop_layout"
VK_EXT_4444_formats equ 1
VK_EXT_4444_FORMATS_SPEC_VERSION equ 1
VK_EXT_4444_FORMATS_EXTENSION_NAME equ "VK_EXT_4444_formats"
VK_EXT_device_fault equ 1
VK_EXT_DEVICE_FAULT_SPEC_VERSION equ 2
VK_EXT_DEVICE_FAULT_EXTENSION_NAME equ "VK_EXT_device_fault"
VK_ARM_rasterization_order_attachment_access equ 1
VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION equ 1
VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME equ "VK_ARM_rasterization_order_attachment_access"
VK_EXT_rgba10x6_formats equ 1
VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION equ 1
VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME equ "VK_EXT_rgba10x6_formats"
VK_VALVE_mutable_descriptor_type equ 1
VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION equ 1
VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME equ "VK_VALVE_mutable_descriptor_type"
VK_EXT_vertex_input_dynamic_state equ 1
VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION equ 2
VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME equ "VK_EXT_vertex_input_dynamic_state"
VK_EXT_physical_device_drm equ 1
VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION equ 1
VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME equ "VK_EXT_physical_device_drm"
VK_EXT_device_address_binding_report equ 1
VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION equ 1
VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME equ "VK_EXT_device_address_binding_report"
VK_EXT_depth_clip_control equ 1
VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION equ 1
VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME equ "VK_EXT_depth_clip_control"
VK_EXT_primitive_topology_list_restart equ 1
VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION equ 1
VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME equ "VK_EXT_primitive_topology_list_restart"
VK_HUAWEI_subpass_shading equ 1
VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION equ 3
VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME equ "VK_HUAWEI_subpass_shading"
VK_HUAWEI_invocation_mask equ 1
VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION equ 1
VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME equ "VK_HUAWEI_invocation_mask"
VK_NV_external_memory_rdma equ 1
VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION equ 1
VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME equ "VK_NV_external_memory_rdma"
VK_EXT_pipeline_properties equ 1
VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION equ 1
VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME equ "VK_EXT_pipeline_properties"
VK_EXT_frame_boundary equ 1
VK_EXT_FRAME_BOUNDARY_SPEC_VERSION equ 1
VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME equ "VK_EXT_frame_boundary"
VK_EXT_multisampled_render_to_single_sampled equ 1
VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION equ 1
VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME equ "VK_EXT_multisampled_render_to_single_sampled"
VK_EXT_extended_dynamic_state2 equ 1
VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION equ 1
VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME equ "VK_EXT_extended_dynamic_state2"
VK_EXT_color_write_enable equ 1
VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION equ 1
VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME equ "VK_EXT_color_write_enable"
VK_EXT_primitives_generated_query equ 1
VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION equ 1
VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME equ "VK_EXT_primitives_generated_query"
VK_EXT_global_priority_query equ 1
VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION equ 1
VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME equ "VK_EXT_global_priority_query"
VK_MAX_GLOBAL_PRIORITY_SIZE_EXT equ VK_MAX_GLOBAL_PRIORITY_SIZE_KHR
VK_EXT_image_view_min_lod equ 1
VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION equ 1
VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME equ "VK_EXT_image_view_min_lod"
VK_EXT_multi_draw equ 1
VK_EXT_MULTI_DRAW_SPEC_VERSION equ 1
VK_EXT_MULTI_DRAW_EXTENSION_NAME equ "VK_EXT_multi_draw"
VK_EXT_image_2d_view_of_3d equ 1
VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION equ 1
VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME equ "VK_EXT_image_2d_view_of_3d"
VK_EXT_shader_tile_image equ 1
VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION equ 1
VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME equ "VK_EXT_shader_tile_image"
VK_EXT_opacity_micromap equ 1
VK_EXT_OPACITY_MICROMAP_SPEC_VERSION equ 2
VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME equ "VK_EXT_opacity_micromap"
VK_EXT_load_store_op_none equ 1
VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION equ 1
VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME equ "VK_EXT_load_store_op_none"
VK_HUAWEI_cluster_culling_shader equ 1
VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION equ 3
VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME equ "VK_HUAWEI_cluster_culling_shader"
VK_EXT_border_color_swizzle equ 1
VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION equ 1
VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME equ "VK_EXT_border_color_swizzle"
VK_EXT_pageable_device_local_memory equ 1
VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION equ 1
VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME equ "VK_EXT_pageable_device_local_memory"
VK_ARM_shader_core_properties equ 1
VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION equ 1
VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME equ "VK_ARM_shader_core_properties"
VK_ARM_scheduling_controls equ 1
VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION equ 1
VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME equ "VK_ARM_scheduling_controls"
VK_EXT_image_sliced_view_of_3d equ 1
VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION equ 1
VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME equ "VK_EXT_image_sliced_view_of_3d"
VK_REMAINING_3D_SLICES_EXT equ (~0U)
VK_VALVE_descriptor_set_host_mapping equ 1
VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION equ 1
VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME equ "VK_VALVE_descriptor_set_host_mapping"
VK_EXT_depth_clamp_zero_one equ 1
VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION equ 1
VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME equ "VK_EXT_depth_clamp_zero_one"
VK_EXT_non_seamless_cube_map equ 1
VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION equ 1
VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME equ "VK_EXT_non_seamless_cube_map"
VK_ARM_render_pass_striped equ 1
VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION equ 1
VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME equ "VK_ARM_render_pass_striped"
VK_QCOM_fragment_density_map_offset equ 1
VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION equ 1
VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME equ "VK_QCOM_fragment_density_map_offset"
VK_NV_copy_memory_indirect equ 1
VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION equ 1
VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME equ "VK_NV_copy_memory_indirect"
VK_NV_memory_decompression equ 1
VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION equ 1
VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME equ "VK_NV_memory_decompression"
VK_NV_device_generated_commands_compute equ 1
VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION equ 2
VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME equ "VK_NV_device_generated_commands_compute"
VK_NV_linear_color_attachment equ 1
VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION equ 1
VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME equ "VK_NV_linear_color_attachment"
VK_GOOGLE_surfaceless_query equ 1
VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION equ 2
VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME equ "VK_GOOGLE_surfaceless_query"
VK_EXT_image_compression_control_swapchain equ 1
VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION equ 1
VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME equ "VK_EXT_image_compression_control_swapchain"
VK_QCOM_image_processing equ 1
VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION equ 1
VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME equ "VK_QCOM_image_processing"
VK_EXT_nested_command_buffer equ 1
VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION equ 1
VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME equ "VK_EXT_nested_command_buffer"
VK_EXT_external_memory_acquire_unmodified equ 1
VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION equ 1
VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME equ "VK_EXT_external_memory_acquire_unmodified"
VK_EXT_extended_dynamic_state3 equ 1
VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION equ 2
VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME equ "VK_EXT_extended_dynamic_state3"
VK_EXT_subpass_merge_feedback equ 1
VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION equ 2
VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME equ "VK_EXT_subpass_merge_feedback"
VK_LUNARG_direct_driver_loading equ 1
VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION equ 1
VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME equ "VK_LUNARG_direct_driver_loading"
VK_EXT_shader_module_identifier equ 1
VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT equ 32U
VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION equ 1
VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME equ "VK_EXT_shader_module_identifier"
VK_EXT_rasterization_order_attachment_access equ 1
VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION equ 1
VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME equ "VK_EXT_rasterization_order_attachment_access"
VK_NV_optical_flow equ 1
VK_NV_OPTICAL_FLOW_SPEC_VERSION equ 1
VK_NV_OPTICAL_FLOW_EXTENSION_NAME equ "VK_NV_optical_flow"
VK_EXT_legacy_dithering equ 1
VK_EXT_LEGACY_DITHERING_SPEC_VERSION equ 2
VK_EXT_LEGACY_DITHERING_EXTENSION_NAME equ "VK_EXT_legacy_dithering"
VK_EXT_pipeline_protected_access equ 1
VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION equ 1
VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME equ "VK_EXT_pipeline_protected_access"
VK_EXT_shader_object equ 1
VK_EXT_SHADER_OBJECT_SPEC_VERSION equ 1
VK_EXT_SHADER_OBJECT_EXTENSION_NAME equ "VK_EXT_shader_object"
VK_QCOM_tile_properties equ 1
VK_QCOM_TILE_PROPERTIES_SPEC_VERSION equ 1
VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME equ "VK_QCOM_tile_properties"
VK_SEC_amigo_profiling equ 1
VK_SEC_AMIGO_PROFILING_SPEC_VERSION equ 1
VK_SEC_AMIGO_PROFILING_EXTENSION_NAME equ "VK_SEC_amigo_profiling"
VK_QCOM_multiview_per_view_viewports equ 1
VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION equ 1
VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME equ "VK_QCOM_multiview_per_view_viewports"
VK_NV_ray_tracing_invocation_reorder equ 1
VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION equ 1
VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME equ "VK_NV_ray_tracing_invocation_reorder"
VK_NV_extended_sparse_address_space equ 1
VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION equ 1
VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME equ "VK_NV_extended_sparse_address_space"
VK_EXT_mutable_descriptor_type equ 1
VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION equ 1
VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME equ "VK_EXT_mutable_descriptor_type"
VK_EXT_layer_settings equ 1
VK_EXT_LAYER_SETTINGS_SPEC_VERSION equ 2
VK_EXT_LAYER_SETTINGS_EXTENSION_NAME equ "VK_EXT_layer_settings"
VK_ARM_shader_core_builtins equ 1
VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION equ 2
VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME equ "VK_ARM_shader_core_builtins"
VK_EXT_pipeline_library_group_handles equ 1
VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION equ 1
VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME equ "VK_EXT_pipeline_library_group_handles"
VK_EXT_dynamic_rendering_unused_attachments equ 1
VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION equ 1
VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME equ "VK_EXT_dynamic_rendering_unused_attachments"
VK_NV_low_latency2 equ 1
VK_NV_LOW_LATENCY_2_SPEC_VERSION equ 2
VK_NV_LOW_LATENCY_2_EXTENSION_NAME equ "VK_NV_low_latency2"
VK_QCOM_multiview_per_view_render_areas equ 1
VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION equ 1
VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME equ "VK_QCOM_multiview_per_view_render_areas"
VK_NV_per_stage_descriptor_set equ 1
VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION equ 1
VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME equ "VK_NV_per_stage_descriptor_set"
VK_QCOM_image_processing2 equ 1
VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION equ 1
VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME equ "VK_QCOM_image_processing2"
VK_QCOM_filter_cubic_weights equ 1
VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION equ 1
VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME equ "VK_QCOM_filter_cubic_weights"
VK_QCOM_ycbcr_degamma equ 1
VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION equ 1
VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME equ "VK_QCOM_ycbcr_degamma"
VK_QCOM_filter_cubic_clamp equ 1
VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION equ 1
VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME equ "VK_QCOM_filter_cubic_clamp"
VK_EXT_attachment_feedback_loop_dynamic_state equ 1
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION equ 1
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME equ "VK_EXT_attachment_feedback_loop_dynamic_state"
VK_MSFT_layered_driver equ 1
VK_MSFT_LAYERED_DRIVER_SPEC_VERSION equ 1
VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME equ "VK_MSFT_layered_driver"
VK_NV_descriptor_pool_overallocation equ 1
VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION equ 1
VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME equ "VK_NV_descriptor_pool_overallocation"
VK_NV_raw_access_chains equ 1
VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION equ 1
VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME equ "VK_NV_raw_access_chains"
VK_NV_shader_atomic_float16_vector equ 1
VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION equ 1
VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME equ "VK_NV_shader_atomic_float16_vector"
VK_NV_ray_tracing_validation equ 1
VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION equ 1
VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME equ "VK_NV_ray_tracing_validation"
VK_KHR_acceleration_structure equ 1
VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION equ 13
VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME equ "VK_KHR_acceleration_structure"
VK_KHR_ray_tracing_pipeline equ 1
VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION equ 1
VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME equ "VK_KHR_ray_tracing_pipeline"
VK_KHR_ray_query equ 1
VK_KHR_RAY_QUERY_SPEC_VERSION equ 1
VK_KHR_RAY_QUERY_EXTENSION_NAME equ "VK_KHR_ray_query"
VK_EXT_mesh_shader equ 1
VK_EXT_MESH_SHADER_SPEC_VERSION equ 1
VK_EXT_MESH_SHADER_EXTENSION_NAME equ "VK_EXT_mesh_shader"

TYPEDEF VkBool32 = uint32_t

TYPEDEF VkDeviceAddress = uint64_t

TYPEDEF VkDeviceSize = uint64_t

TYPEDEF VkFlags = uint32_t

TYPEDEF VkSampleMask = uint32_t

TYPEDEF VkBuffer = struct VkBuffer_T *

TYPEDEF VkImage = struct VkImage_T *

TYPEDEF VkInstance = struct VkInstance_T *

TYPEDEF VkPhysicalDevice = struct VkPhysicalDevice_T *

TYPEDEF VkDevice = struct VkDevice_T *

TYPEDEF VkQueue = struct VkQueue_T *

TYPEDEF VkSemaphore = struct VkSemaphore_T *

TYPEDEF VkCommandBuffer = struct VkCommandBuffer_T *

TYPEDEF VkFence = struct VkFence_T *

TYPEDEF VkDeviceMemory = struct VkDeviceMemory_T *

TYPEDEF VkEvent = struct VkEvent_T *

TYPEDEF VkQueryPool = struct VkQueryPool_T *

TYPEDEF VkBufferView = struct VkBufferView_T *

TYPEDEF VkImageView = struct VkImageView_T *

TYPEDEF VkShaderModule = struct VkShaderModule_T *

TYPEDEF VkPipelineCache = struct VkPipelineCache_T *

TYPEDEF VkPipelineLayout = struct VkPipelineLayout_T *

TYPEDEF VkPipeline = struct VkPipeline_T *

TYPEDEF VkRenderPass = struct VkRenderPass_T *

TYPEDEF VkDescriptorSetLayout = struct VkDescriptorSetLayout_T *

TYPEDEF VkSampler = struct VkSampler_T *

TYPEDEF VkDescriptorSet = struct VkDescriptorSet_T *

TYPEDEF VkDescriptorPool = struct VkDescriptorPool_T *

TYPEDEF VkFramebuffer = struct VkFramebuffer_T *

TYPEDEF VkCommandPool = struct VkCommandPool_T *

ENUM VkResult {
    VK_SUCCESS = 0
    VK_NOT_READY = 1
    VK_TIMEOUT = 2
    VK_EVENT_SET = 3
    VK_EVENT_RESET = 4
    VK_INCOMPLETE = 5
    VK_ERROR_OUT_OF_HOST_MEMORY = -1
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
    VK_ERROR_INITIALIZATION_FAILED = -3
    VK_ERROR_DEVICE_LOST = -4
    VK_ERROR_MEMORY_MAP_FAILED = -5
    VK_ERROR_LAYER_NOT_PRESENT = -6
    VK_ERROR_EXTENSION_NOT_PRESENT = -7
    VK_ERROR_FEATURE_NOT_PRESENT = -8
    VK_ERROR_INCOMPATIBLE_DRIVER = -9
    VK_ERROR_TOO_MANY_OBJECTS = -10
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11
    VK_ERROR_FRAGMENTED_POOL = -12
    VK_ERROR_UNKNOWN = -13
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
    VK_ERROR_FRAGMENTATION = -1000161000
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
    VK_PIPELINE_COMPILE_REQUIRED = 1000297000
    VK_ERROR_SURFACE_LOST_KHR = -1000000000
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
    VK_SUBOPTIMAL_KHR = 1000001003
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
    VK_ERROR_INVALID_SHADER_NV = -1000012000
    VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000
    VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001
    VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002
    VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003
    VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004
    VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
    VK_ERROR_NOT_PERMITTED_KHR = -1000174001
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
    VK_THREAD_IDLE_KHR = 1000268000
    VK_THREAD_DONE_KHR = 1000268001
    VK_OPERATION_DEFERRED_KHR = 1000268002
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003
    VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000
    VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000
    VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003
    VK_ERROR_FRAGMENTATION_EXT = -1000161000
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000
    VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000
    VK_RESULT_MAX_ENUM = 2147483647
}

TYPEDEF VkResult = enum VkResult

ENUM VkResult {
    VK_SUCCESS = 0
    VK_NOT_READY = 1
    VK_TIMEOUT = 2
    VK_EVENT_SET = 3
    VK_EVENT_RESET = 4
    VK_INCOMPLETE = 5
    VK_ERROR_OUT_OF_HOST_MEMORY = -1
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
    VK_ERROR_INITIALIZATION_FAILED = -3
    VK_ERROR_DEVICE_LOST = -4
    VK_ERROR_MEMORY_MAP_FAILED = -5
    VK_ERROR_LAYER_NOT_PRESENT = -6
    VK_ERROR_EXTENSION_NOT_PRESENT = -7
    VK_ERROR_FEATURE_NOT_PRESENT = -8
    VK_ERROR_INCOMPATIBLE_DRIVER = -9
    VK_ERROR_TOO_MANY_OBJECTS = -10
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11
    VK_ERROR_FRAGMENTED_POOL = -12
    VK_ERROR_UNKNOWN = -13
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
    VK_ERROR_FRAGMENTATION = -1000161000
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
    VK_PIPELINE_COMPILE_REQUIRED = 1000297000
    VK_ERROR_SURFACE_LOST_KHR = -1000000000
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
    VK_SUBOPTIMAL_KHR = 1000001003
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
    VK_ERROR_INVALID_SHADER_NV = -1000012000
    VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000
    VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001
    VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002
    VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003
    VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004
    VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
    VK_ERROR_NOT_PERMITTED_KHR = -1000174001
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
    VK_THREAD_IDLE_KHR = 1000268000
    VK_THREAD_DONE_KHR = 1000268001
    VK_OPERATION_DEFERRED_KHR = 1000268002
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003
    VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000
    VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000
    VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003
    VK_ERROR_FRAGMENTATION_EXT = -1000161000
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000
    VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000
    VK_RESULT_MAX_ENUM = 2147483647
}

ENUM VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005
    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006
    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000
    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000
    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001
    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002
    VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003
    VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004
    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007
    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008
    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009
    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016
    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = 1000232000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = 1000232001
    VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = 1000232002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1000235000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001
    VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002
    VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005
    VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007
    VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008
    VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1000272000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1000272001
    VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1000272002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000
    VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001
    VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004
    VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
    VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000
    VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001
    VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004
    VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001
    VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002
    VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003
    VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004
    VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005
    VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006
    VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007
    VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008
    VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009
    VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010
    VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002
    VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004
    VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005
    VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007
    VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008
    VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000
    VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001
    VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000
    VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001
    VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000
    VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000
    VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001
    VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000
    VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001
    VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002
    VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006
    VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = 1000416000
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001
    VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1000434000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002
    VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002
    VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1000470000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1000470001
    VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1000470003
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1000470004
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1000338002
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1000338003
    VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1000470005
    VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1000470006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001
    VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000
    VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000
    VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002
    VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001
    VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002
    VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003
    VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004
    VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005
    VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006
    VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007
    VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1000512000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1000512001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1000512003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000512004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1000512005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000
    VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001
    VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002
    VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001
    VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = 1000525000
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = 1000190001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = 1000190002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = 1000528000
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001
    VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = 1000265000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = 1000259000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = 1000259001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = 1000259002
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = 1000544000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = 1000545000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = 1000545001
    VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = 1000545002
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = 1000545003
    VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = 1000545004
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = 1000545005
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = 1000545006
    VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1000555000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1000563000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1000568000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000
    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = 1000044000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = 1000044001
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = 1000360000
    VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1000269001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003
    VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkStructureType = enum VkStructureType

ENUM VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005
    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006
    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000
    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000
    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001
    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002
    VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003
    VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004
    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007
    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008
    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009
    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016
    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = 1000232000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = 1000232001
    VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = 1000232002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1000235000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001
    VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002
    VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005
    VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007
    VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008
    VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1000272000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1000272001
    VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1000272002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000
    VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001
    VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004
    VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
    VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000
    VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001
    VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004
    VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001
    VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002
    VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003
    VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004
    VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005
    VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006
    VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007
    VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008
    VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009
    VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010
    VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002
    VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004
    VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005
    VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007
    VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008
    VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000
    VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001
    VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000
    VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001
    VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000
    VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000
    VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001
    VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000
    VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001
    VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002
    VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006
    VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = 1000416000
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001
    VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1000434000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002
    VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002
    VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1000470000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1000470001
    VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1000470003
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1000470004
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1000338002
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1000338003
    VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1000470005
    VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1000470006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001
    VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000
    VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000
    VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002
    VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001
    VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002
    VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003
    VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004
    VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005
    VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006
    VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007
    VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1000512000
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1000512001
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1000512003
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000512004
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1000512005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000
    VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001
    VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002
    VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001
    VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = 1000525000
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = 1000190001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = 1000190002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = 1000528000
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001
    VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = 1000265000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = 1000259000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = 1000259001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = 1000259002
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = 1000544000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = 1000545000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = 1000545001
    VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = 1000545002
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = 1000545003
    VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = 1000545004
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = 1000545005
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = 1000545006
    VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1000555000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1000563000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1000568000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000
    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = 1000044000
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = 1000044001
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = 1000360000
    VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1000269001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003
    VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
}

ENUM VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCacheHeaderVersion = enum VkPipelineCacheHeaderVersion

ENUM VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
}

ENUM VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0
    VK_IMAGE_LAYOUT_GENERAL = 1
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000
    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003
    VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = 1000232000
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002
    VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
}

TYPEDEF VkImageLayout = enum VkImageLayout

ENUM VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0
    VK_IMAGE_LAYOUT_GENERAL = 1
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000
    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003
    VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = 1000232000
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002
    VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
}

ENUM VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0
    VK_OBJECT_TYPE_INSTANCE = 1
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
    VK_OBJECT_TYPE_DEVICE = 3
    VK_OBJECT_TYPE_QUEUE = 4
    VK_OBJECT_TYPE_SEMAPHORE = 5
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6
    VK_OBJECT_TYPE_FENCE = 7
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8
    VK_OBJECT_TYPE_BUFFER = 9
    VK_OBJECT_TYPE_IMAGE = 10
    VK_OBJECT_TYPE_EVENT = 11
    VK_OBJECT_TYPE_QUERY_POOL = 12
    VK_OBJECT_TYPE_BUFFER_VIEW = 13
    VK_OBJECT_TYPE_IMAGE_VIEW = 14
    VK_OBJECT_TYPE_SHADER_MODULE = 15
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
    VK_OBJECT_TYPE_RENDER_PASS = 18
    VK_OBJECT_TYPE_PIPELINE = 19
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
    VK_OBJECT_TYPE_SAMPLER = 21
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
    VK_OBJECT_TYPE_FRAMEBUFFER = 24
    VK_OBJECT_TYPE_COMMAND_POOL = 25
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000
    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001
    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
    VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000
    VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000
    VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000
    VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000
    VK_OBJECT_TYPE_SHADER_EXT = 1000482000
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
    VK_OBJECT_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkObjectType = enum VkObjectType

ENUM VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0
    VK_OBJECT_TYPE_INSTANCE = 1
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
    VK_OBJECT_TYPE_DEVICE = 3
    VK_OBJECT_TYPE_QUEUE = 4
    VK_OBJECT_TYPE_SEMAPHORE = 5
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6
    VK_OBJECT_TYPE_FENCE = 7
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8
    VK_OBJECT_TYPE_BUFFER = 9
    VK_OBJECT_TYPE_IMAGE = 10
    VK_OBJECT_TYPE_EVENT = 11
    VK_OBJECT_TYPE_QUERY_POOL = 12
    VK_OBJECT_TYPE_BUFFER_VIEW = 13
    VK_OBJECT_TYPE_IMAGE_VIEW = 14
    VK_OBJECT_TYPE_SHADER_MODULE = 15
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
    VK_OBJECT_TYPE_RENDER_PASS = 18
    VK_OBJECT_TYPE_PIPELINE = 19
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
    VK_OBJECT_TYPE_SAMPLER = 21
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
    VK_OBJECT_TYPE_FRAMEBUFFER = 24
    VK_OBJECT_TYPE_COMMAND_POOL = 25
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000
    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001
    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
    VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000
    VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000
    VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000
    VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000
    VK_OBJECT_TYPE_SHADER_EXT = 1000482000
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
    VK_OBJECT_TYPE_MAX_ENUM = 2147483647
}

ENUM VkVendorId {
    VK_VENDOR_ID_VIV = 65537
    VK_VENDOR_ID_VSI = 65538
    VK_VENDOR_ID_KAZAN = 65539
    VK_VENDOR_ID_CODEPLAY = 65540
    VK_VENDOR_ID_MESA = 65541
    VK_VENDOR_ID_POCL = 65542
    VK_VENDOR_ID_MOBILEYE = 65543
    VK_VENDOR_ID_MAX_ENUM = 2147483647
}

TYPEDEF VkVendorId = enum VkVendorId

ENUM VkVendorId {
    VK_VENDOR_ID_VIV = 65537
    VK_VENDOR_ID_VSI = 65538
    VK_VENDOR_ID_KAZAN = 65539
    VK_VENDOR_ID_CODEPLAY = 65540
    VK_VENDOR_ID_MESA = 65541
    VK_VENDOR_ID_POCL = 65542
    VK_VENDOR_ID_MOBILEYE = 65543
    VK_VENDOR_ID_MAX_ENUM = 2147483647
}

ENUM VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
}

TYPEDEF VkSystemAllocationScope = enum VkSystemAllocationScope

ENUM VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
}

ENUM VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkInternalAllocationType = enum VkInternalAllocationType

ENUM VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
}

ENUM VkFormat {
    VK_FORMAT_UNDEFINED = 0
    VK_FORMAT_R4G4_UNORM_PACK8 = 1
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    VK_FORMAT_R8_UNORM = 9
    VK_FORMAT_R8_SNORM = 10
    VK_FORMAT_R8_USCALED = 11
    VK_FORMAT_R8_SSCALED = 12
    VK_FORMAT_R8_UINT = 13
    VK_FORMAT_R8_SINT = 14
    VK_FORMAT_R8_SRGB = 15
    VK_FORMAT_R8G8_UNORM = 16
    VK_FORMAT_R8G8_SNORM = 17
    VK_FORMAT_R8G8_USCALED = 18
    VK_FORMAT_R8G8_SSCALED = 19
    VK_FORMAT_R8G8_UINT = 20
    VK_FORMAT_R8G8_SINT = 21
    VK_FORMAT_R8G8_SRGB = 22
    VK_FORMAT_R8G8B8_UNORM = 23
    VK_FORMAT_R8G8B8_SNORM = 24
    VK_FORMAT_R8G8B8_USCALED = 25
    VK_FORMAT_R8G8B8_SSCALED = 26
    VK_FORMAT_R8G8B8_UINT = 27
    VK_FORMAT_R8G8B8_SINT = 28
    VK_FORMAT_R8G8B8_SRGB = 29
    VK_FORMAT_B8G8R8_UNORM = 30
    VK_FORMAT_B8G8R8_SNORM = 31
    VK_FORMAT_B8G8R8_USCALED = 32
    VK_FORMAT_B8G8R8_SSCALED = 33
    VK_FORMAT_B8G8R8_UINT = 34
    VK_FORMAT_B8G8R8_SINT = 35
    VK_FORMAT_B8G8R8_SRGB = 36
    VK_FORMAT_R8G8B8A8_UNORM = 37
    VK_FORMAT_R8G8B8A8_SNORM = 38
    VK_FORMAT_R8G8B8A8_USCALED = 39
    VK_FORMAT_R8G8B8A8_SSCALED = 40
    VK_FORMAT_R8G8B8A8_UINT = 41
    VK_FORMAT_R8G8B8A8_SINT = 42
    VK_FORMAT_R8G8B8A8_SRGB = 43
    VK_FORMAT_B8G8R8A8_UNORM = 44
    VK_FORMAT_B8G8R8A8_SNORM = 45
    VK_FORMAT_B8G8R8A8_USCALED = 46
    VK_FORMAT_B8G8R8A8_SSCALED = 47
    VK_FORMAT_B8G8R8A8_UINT = 48
    VK_FORMAT_B8G8R8A8_SINT = 49
    VK_FORMAT_B8G8R8A8_SRGB = 50
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
    VK_FORMAT_R16_UNORM = 70
    VK_FORMAT_R16_SNORM = 71
    VK_FORMAT_R16_USCALED = 72
    VK_FORMAT_R16_SSCALED = 73
    VK_FORMAT_R16_UINT = 74
    VK_FORMAT_R16_SINT = 75
    VK_FORMAT_R16_SFLOAT = 76
    VK_FORMAT_R16G16_UNORM = 77
    VK_FORMAT_R16G16_SNORM = 78
    VK_FORMAT_R16G16_USCALED = 79
    VK_FORMAT_R16G16_SSCALED = 80
    VK_FORMAT_R16G16_UINT = 81
    VK_FORMAT_R16G16_SINT = 82
    VK_FORMAT_R16G16_SFLOAT = 83
    VK_FORMAT_R16G16B16_UNORM = 84
    VK_FORMAT_R16G16B16_SNORM = 85
    VK_FORMAT_R16G16B16_USCALED = 86
    VK_FORMAT_R16G16B16_SSCALED = 87
    VK_FORMAT_R16G16B16_UINT = 88
    VK_FORMAT_R16G16B16_SINT = 89
    VK_FORMAT_R16G16B16_SFLOAT = 90
    VK_FORMAT_R16G16B16A16_UNORM = 91
    VK_FORMAT_R16G16B16A16_SNORM = 92
    VK_FORMAT_R16G16B16A16_USCALED = 93
    VK_FORMAT_R16G16B16A16_SSCALED = 94
    VK_FORMAT_R16G16B16A16_UINT = 95
    VK_FORMAT_R16G16B16A16_SINT = 96
    VK_FORMAT_R16G16B16A16_SFLOAT = 97
    VK_FORMAT_R32_UINT = 98
    VK_FORMAT_R32_SINT = 99
    VK_FORMAT_R32_SFLOAT = 100
    VK_FORMAT_R32G32_UINT = 101
    VK_FORMAT_R32G32_SINT = 102
    VK_FORMAT_R32G32_SFLOAT = 103
    VK_FORMAT_R32G32B32_UINT = 104
    VK_FORMAT_R32G32B32_SINT = 105
    VK_FORMAT_R32G32B32_SFLOAT = 106
    VK_FORMAT_R32G32B32A32_UINT = 107
    VK_FORMAT_R32G32B32A32_SINT = 108
    VK_FORMAT_R32G32B32A32_SFLOAT = 109
    VK_FORMAT_R64_UINT = 110
    VK_FORMAT_R64_SINT = 111
    VK_FORMAT_R64_SFLOAT = 112
    VK_FORMAT_R64G64_UINT = 113
    VK_FORMAT_R64G64_SINT = 114
    VK_FORMAT_R64G64_SFLOAT = 115
    VK_FORMAT_R64G64B64_UINT = 116
    VK_FORMAT_R64G64B64_SINT = 117
    VK_FORMAT_R64G64B64_SFLOAT = 118
    VK_FORMAT_R64G64B64A64_UINT = 119
    VK_FORMAT_R64G64B64A64_SINT = 120
    VK_FORMAT_R64G64B64A64_SFLOAT = 121
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    VK_FORMAT_D16_UNORM = 124
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125
    VK_FORMAT_D32_SFLOAT = 126
    VK_FORMAT_S8_UINT = 127
    VK_FORMAT_D16_UNORM_S8_UINT = 128
    VK_FORMAT_D24_UNORM_S8_UINT = 129
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    VK_FORMAT_BC2_UNORM_BLOCK = 135
    VK_FORMAT_BC2_SRGB_BLOCK = 136
    VK_FORMAT_BC3_UNORM_BLOCK = 137
    VK_FORMAT_BC3_SRGB_BLOCK = 138
    VK_FORMAT_BC4_UNORM_BLOCK = 139
    VK_FORMAT_BC4_SNORM_BLOCK = 140
    VK_FORMAT_BC5_UNORM_BLOCK = 141
    VK_FORMAT_BC5_SNORM_BLOCK = 142
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
    VK_FORMAT_BC7_UNORM_BLOCK = 145
    VK_FORMAT_BC7_SRGB_BLOCK = 146
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003
    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000
    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
    VK_FORMAT_R16G16_SFIXED5_NV = 1000464000
    VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1000470000
    VK_FORMAT_A8_UNORM_KHR = 1000470001
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
    VK_FORMAT_R16G16_S10_5_NV = 1000464000
    VK_FORMAT_MAX_ENUM = 2147483647
}

TYPEDEF VkFormat = enum VkFormat

ENUM VkFormat {
    VK_FORMAT_UNDEFINED = 0
    VK_FORMAT_R4G4_UNORM_PACK8 = 1
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    VK_FORMAT_R8_UNORM = 9
    VK_FORMAT_R8_SNORM = 10
    VK_FORMAT_R8_USCALED = 11
    VK_FORMAT_R8_SSCALED = 12
    VK_FORMAT_R8_UINT = 13
    VK_FORMAT_R8_SINT = 14
    VK_FORMAT_R8_SRGB = 15
    VK_FORMAT_R8G8_UNORM = 16
    VK_FORMAT_R8G8_SNORM = 17
    VK_FORMAT_R8G8_USCALED = 18
    VK_FORMAT_R8G8_SSCALED = 19
    VK_FORMAT_R8G8_UINT = 20
    VK_FORMAT_R8G8_SINT = 21
    VK_FORMAT_R8G8_SRGB = 22
    VK_FORMAT_R8G8B8_UNORM = 23
    VK_FORMAT_R8G8B8_SNORM = 24
    VK_FORMAT_R8G8B8_USCALED = 25
    VK_FORMAT_R8G8B8_SSCALED = 26
    VK_FORMAT_R8G8B8_UINT = 27
    VK_FORMAT_R8G8B8_SINT = 28
    VK_FORMAT_R8G8B8_SRGB = 29
    VK_FORMAT_B8G8R8_UNORM = 30
    VK_FORMAT_B8G8R8_SNORM = 31
    VK_FORMAT_B8G8R8_USCALED = 32
    VK_FORMAT_B8G8R8_SSCALED = 33
    VK_FORMAT_B8G8R8_UINT = 34
    VK_FORMAT_B8G8R8_SINT = 35
    VK_FORMAT_B8G8R8_SRGB = 36
    VK_FORMAT_R8G8B8A8_UNORM = 37
    VK_FORMAT_R8G8B8A8_SNORM = 38
    VK_FORMAT_R8G8B8A8_USCALED = 39
    VK_FORMAT_R8G8B8A8_SSCALED = 40
    VK_FORMAT_R8G8B8A8_UINT = 41
    VK_FORMAT_R8G8B8A8_SINT = 42
    VK_FORMAT_R8G8B8A8_SRGB = 43
    VK_FORMAT_B8G8R8A8_UNORM = 44
    VK_FORMAT_B8G8R8A8_SNORM = 45
    VK_FORMAT_B8G8R8A8_USCALED = 46
    VK_FORMAT_B8G8R8A8_SSCALED = 47
    VK_FORMAT_B8G8R8A8_UINT = 48
    VK_FORMAT_B8G8R8A8_SINT = 49
    VK_FORMAT_B8G8R8A8_SRGB = 50
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
    VK_FORMAT_R16_UNORM = 70
    VK_FORMAT_R16_SNORM = 71
    VK_FORMAT_R16_USCALED = 72
    VK_FORMAT_R16_SSCALED = 73
    VK_FORMAT_R16_UINT = 74
    VK_FORMAT_R16_SINT = 75
    VK_FORMAT_R16_SFLOAT = 76
    VK_FORMAT_R16G16_UNORM = 77
    VK_FORMAT_R16G16_SNORM = 78
    VK_FORMAT_R16G16_USCALED = 79
    VK_FORMAT_R16G16_SSCALED = 80
    VK_FORMAT_R16G16_UINT = 81
    VK_FORMAT_R16G16_SINT = 82
    VK_FORMAT_R16G16_SFLOAT = 83
    VK_FORMAT_R16G16B16_UNORM = 84
    VK_FORMAT_R16G16B16_SNORM = 85
    VK_FORMAT_R16G16B16_USCALED = 86
    VK_FORMAT_R16G16B16_SSCALED = 87
    VK_FORMAT_R16G16B16_UINT = 88
    VK_FORMAT_R16G16B16_SINT = 89
    VK_FORMAT_R16G16B16_SFLOAT = 90
    VK_FORMAT_R16G16B16A16_UNORM = 91
    VK_FORMAT_R16G16B16A16_SNORM = 92
    VK_FORMAT_R16G16B16A16_USCALED = 93
    VK_FORMAT_R16G16B16A16_SSCALED = 94
    VK_FORMAT_R16G16B16A16_UINT = 95
    VK_FORMAT_R16G16B16A16_SINT = 96
    VK_FORMAT_R16G16B16A16_SFLOAT = 97
    VK_FORMAT_R32_UINT = 98
    VK_FORMAT_R32_SINT = 99
    VK_FORMAT_R32_SFLOAT = 100
    VK_FORMAT_R32G32_UINT = 101
    VK_FORMAT_R32G32_SINT = 102
    VK_FORMAT_R32G32_SFLOAT = 103
    VK_FORMAT_R32G32B32_UINT = 104
    VK_FORMAT_R32G32B32_SINT = 105
    VK_FORMAT_R32G32B32_SFLOAT = 106
    VK_FORMAT_R32G32B32A32_UINT = 107
    VK_FORMAT_R32G32B32A32_SINT = 108
    VK_FORMAT_R32G32B32A32_SFLOAT = 109
    VK_FORMAT_R64_UINT = 110
    VK_FORMAT_R64_SINT = 111
    VK_FORMAT_R64_SFLOAT = 112
    VK_FORMAT_R64G64_UINT = 113
    VK_FORMAT_R64G64_SINT = 114
    VK_FORMAT_R64G64_SFLOAT = 115
    VK_FORMAT_R64G64B64_UINT = 116
    VK_FORMAT_R64G64B64_SINT = 117
    VK_FORMAT_R64G64B64_SFLOAT = 118
    VK_FORMAT_R64G64B64A64_UINT = 119
    VK_FORMAT_R64G64B64A64_SINT = 120
    VK_FORMAT_R64G64B64A64_SFLOAT = 121
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    VK_FORMAT_D16_UNORM = 124
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125
    VK_FORMAT_D32_SFLOAT = 126
    VK_FORMAT_S8_UINT = 127
    VK_FORMAT_D16_UNORM_S8_UINT = 128
    VK_FORMAT_D24_UNORM_S8_UINT = 129
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    VK_FORMAT_BC2_UNORM_BLOCK = 135
    VK_FORMAT_BC2_SRGB_BLOCK = 136
    VK_FORMAT_BC3_UNORM_BLOCK = 137
    VK_FORMAT_BC3_SRGB_BLOCK = 138
    VK_FORMAT_BC4_UNORM_BLOCK = 139
    VK_FORMAT_BC4_SNORM_BLOCK = 140
    VK_FORMAT_BC5_UNORM_BLOCK = 141
    VK_FORMAT_BC5_SNORM_BLOCK = 142
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
    VK_FORMAT_BC7_UNORM_BLOCK = 145
    VK_FORMAT_BC7_SRGB_BLOCK = 146
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003
    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000
    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
    VK_FORMAT_R16G16_SFIXED5_NV = 1000464000
    VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1000470000
    VK_FORMAT_A8_UNORM_KHR = 1000470001
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
    VK_FORMAT_R16G16_S10_5_NV = 1000464000
    VK_FORMAT_MAX_ENUM = 2147483647
}

ENUM VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0
    VK_IMAGE_TILING_LINEAR = 1
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
    VK_IMAGE_TILING_MAX_ENUM = 2147483647
}

TYPEDEF VkImageTiling = enum VkImageTiling

ENUM VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0
    VK_IMAGE_TILING_LINEAR = 1
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
    VK_IMAGE_TILING_MAX_ENUM = 2147483647
}

ENUM VkImageType {
    VK_IMAGE_TYPE_1D = 0
    VK_IMAGE_TYPE_2D = 1
    VK_IMAGE_TYPE_3D = 2
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkImageType = enum VkImageType

ENUM VkImageType {
    VK_IMAGE_TYPE_1D = 0
    VK_IMAGE_TYPE_2D = 1
    VK_IMAGE_TYPE_3D = 2
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647
}

ENUM VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkPhysicalDeviceType = enum VkPhysicalDeviceType

ENUM VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
}

ENUM VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
    VK_QUERY_TYPE_TIMESTAMP = 2
    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
    VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000
    VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000
    VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001
    VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000
    VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001
    VK_QUERY_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryType = enum VkQueryType

ENUM VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
    VK_QUERY_TYPE_TIMESTAMP = 2
    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
    VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000
    VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000
    VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001
    VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000
    VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001
    VK_QUERY_TYPE_MAX_ENUM = 2147483647
}

ENUM VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0
    VK_SHARING_MODE_CONCURRENT = 1
    VK_SHARING_MODE_MAX_ENUM = 2147483647
}

TYPEDEF VkSharingMode = enum VkSharingMode

ENUM VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0
    VK_SHARING_MODE_CONCURRENT = 1
    VK_SHARING_MODE_MAX_ENUM = 2147483647
}

ENUM VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0
    VK_COMPONENT_SWIZZLE_ZERO = 1
    VK_COMPONENT_SWIZZLE_ONE = 2
    VK_COMPONENT_SWIZZLE_R = 3
    VK_COMPONENT_SWIZZLE_G = 4
    VK_COMPONENT_SWIZZLE_B = 5
    VK_COMPONENT_SWIZZLE_A = 6
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
}

TYPEDEF VkComponentSwizzle = enum VkComponentSwizzle

ENUM VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0
    VK_COMPONENT_SWIZZLE_ZERO = 1
    VK_COMPONENT_SWIZZLE_ONE = 2
    VK_COMPONENT_SWIZZLE_R = 3
    VK_COMPONENT_SWIZZLE_G = 4
    VK_COMPONENT_SWIZZLE_B = 5
    VK_COMPONENT_SWIZZLE_A = 6
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
}

ENUM VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0
    VK_IMAGE_VIEW_TYPE_2D = 1
    VK_IMAGE_VIEW_TYPE_3D = 2
    VK_IMAGE_VIEW_TYPE_CUBE = 3
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkImageViewType = enum VkImageViewType

ENUM VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0
    VK_IMAGE_VIEW_TYPE_2D = 1
    VK_IMAGE_VIEW_TYPE_3D = 2
    VK_IMAGE_VIEW_TYPE_CUBE = 3
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
}

ENUM VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0
    VK_BLEND_FACTOR_ONE = 1
    VK_BLEND_FACTOR_SRC_COLOR = 2
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    VK_BLEND_FACTOR_DST_COLOR = 4
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    VK_BLEND_FACTOR_SRC_ALPHA = 6
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    VK_BLEND_FACTOR_DST_ALPHA = 8
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    VK_BLEND_FACTOR_SRC1_COLOR = 15
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    VK_BLEND_FACTOR_SRC1_ALPHA = 17
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647
}

TYPEDEF VkBlendFactor = enum VkBlendFactor

ENUM VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0
    VK_BLEND_FACTOR_ONE = 1
    VK_BLEND_FACTOR_SRC_COLOR = 2
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    VK_BLEND_FACTOR_DST_COLOR = 4
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    VK_BLEND_FACTOR_SRC_ALPHA = 6
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    VK_BLEND_FACTOR_DST_ALPHA = 8
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    VK_BLEND_FACTOR_SRC1_COLOR = 15
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    VK_BLEND_FACTOR_SRC1_ALPHA = 17
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647
}

ENUM VkBlendOp {
    VK_BLEND_OP_ADD = 0
    VK_BLEND_OP_SUBTRACT = 1
    VK_BLEND_OP_REVERSE_SUBTRACT = 2
    VK_BLEND_OP_MIN = 3
    VK_BLEND_OP_MAX = 4
    VK_BLEND_OP_ZERO_EXT = 1000148000
    VK_BLEND_OP_SRC_EXT = 1000148001
    VK_BLEND_OP_DST_EXT = 1000148002
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003
    VK_BLEND_OP_DST_OVER_EXT = 1000148004
    VK_BLEND_OP_SRC_IN_EXT = 1000148005
    VK_BLEND_OP_DST_IN_EXT = 1000148006
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007
    VK_BLEND_OP_DST_OUT_EXT = 1000148008
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010
    VK_BLEND_OP_XOR_EXT = 1000148011
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012
    VK_BLEND_OP_SCREEN_EXT = 1000148013
    VK_BLEND_OP_OVERLAY_EXT = 1000148014
    VK_BLEND_OP_DARKEN_EXT = 1000148015
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017
    VK_BLEND_OP_COLORBURN_EXT = 1000148018
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022
    VK_BLEND_OP_INVERT_EXT = 1000148023
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029
    VK_BLEND_OP_HARDMIX_EXT = 1000148030
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
    VK_BLEND_OP_PLUS_EXT = 1000148035
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
    VK_BLEND_OP_MINUS_EXT = 1000148039
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
    VK_BLEND_OP_CONTRAST_EXT = 1000148041
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
    VK_BLEND_OP_RED_EXT = 1000148043
    VK_BLEND_OP_GREEN_EXT = 1000148044
    VK_BLEND_OP_BLUE_EXT = 1000148045
    VK_BLEND_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkBlendOp = enum VkBlendOp

ENUM VkBlendOp {
    VK_BLEND_OP_ADD = 0
    VK_BLEND_OP_SUBTRACT = 1
    VK_BLEND_OP_REVERSE_SUBTRACT = 2
    VK_BLEND_OP_MIN = 3
    VK_BLEND_OP_MAX = 4
    VK_BLEND_OP_ZERO_EXT = 1000148000
    VK_BLEND_OP_SRC_EXT = 1000148001
    VK_BLEND_OP_DST_EXT = 1000148002
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003
    VK_BLEND_OP_DST_OVER_EXT = 1000148004
    VK_BLEND_OP_SRC_IN_EXT = 1000148005
    VK_BLEND_OP_DST_IN_EXT = 1000148006
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007
    VK_BLEND_OP_DST_OUT_EXT = 1000148008
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010
    VK_BLEND_OP_XOR_EXT = 1000148011
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012
    VK_BLEND_OP_SCREEN_EXT = 1000148013
    VK_BLEND_OP_OVERLAY_EXT = 1000148014
    VK_BLEND_OP_DARKEN_EXT = 1000148015
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017
    VK_BLEND_OP_COLORBURN_EXT = 1000148018
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022
    VK_BLEND_OP_INVERT_EXT = 1000148023
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029
    VK_BLEND_OP_HARDMIX_EXT = 1000148030
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
    VK_BLEND_OP_PLUS_EXT = 1000148035
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
    VK_BLEND_OP_MINUS_EXT = 1000148039
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
    VK_BLEND_OP_CONTRAST_EXT = 1000148041
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
    VK_BLEND_OP_RED_EXT = 1000148043
    VK_BLEND_OP_GREEN_EXT = 1000148044
    VK_BLEND_OP_BLUE_EXT = 1000148045
    VK_BLEND_OP_MAX_ENUM = 2147483647
}

ENUM VkCompareOp {
    VK_COMPARE_OP_NEVER = 0
    VK_COMPARE_OP_LESS = 1
    VK_COMPARE_OP_EQUAL = 2
    VK_COMPARE_OP_LESS_OR_EQUAL = 3
    VK_COMPARE_OP_GREATER = 4
    VK_COMPARE_OP_NOT_EQUAL = 5
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6
    VK_COMPARE_OP_ALWAYS = 7
    VK_COMPARE_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkCompareOp = enum VkCompareOp

ENUM VkCompareOp {
    VK_COMPARE_OP_NEVER = 0
    VK_COMPARE_OP_LESS = 1
    VK_COMPARE_OP_EQUAL = 2
    VK_COMPARE_OP_LESS_OR_EQUAL = 3
    VK_COMPARE_OP_GREATER = 4
    VK_COMPARE_OP_NOT_EQUAL = 5
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6
    VK_COMPARE_OP_ALWAYS = 7
    VK_COMPARE_OP_MAX_ENUM = 2147483647
}

ENUM VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0
    VK_DYNAMIC_STATE_SCISSOR = 1
    VK_DYNAMIC_STATE_LINE_WIDTH = 2
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
    VK_DYNAMIC_STATE_CULL_MODE = 1000267000
    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010
    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
    VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003
    VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004
    VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005
    VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006
    VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007
    VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008
    VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009
    VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010
    VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011
    VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012
    VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002
    VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013
    VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014
    VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015
    VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017
    VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018
    VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019
    VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020
    VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021
    VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023
    VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029
    VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030
    VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031
    VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032
    VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000
    VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = 1000259000
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
    VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
}

TYPEDEF VkDynamicState = enum VkDynamicState

ENUM VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0
    VK_DYNAMIC_STATE_SCISSOR = 1
    VK_DYNAMIC_STATE_LINE_WIDTH = 2
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
    VK_DYNAMIC_STATE_CULL_MODE = 1000267000
    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010
    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
    VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003
    VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004
    VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005
    VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006
    VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007
    VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008
    VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009
    VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010
    VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011
    VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012
    VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002
    VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013
    VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014
    VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015
    VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017
    VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018
    VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019
    VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020
    VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021
    VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023
    VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029
    VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030
    VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031
    VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032
    VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000
    VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = 1000259000
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
    VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
}

ENUM VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
    VK_FRONT_FACE_CLOCKWISE = 1
    VK_FRONT_FACE_MAX_ENUM = 2147483647
}

TYPEDEF VkFrontFace = enum VkFrontFace

ENUM VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
    VK_FRONT_FACE_CLOCKWISE = 1
    VK_FRONT_FACE_MAX_ENUM = 2147483647
}

ENUM VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0
    VK_VERTEX_INPUT_RATE_INSTANCE = 1
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
}

TYPEDEF VkVertexInputRate = enum VkVertexInputRate

ENUM VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0
    VK_VERTEX_INPUT_RATE_INSTANCE = 1
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
}

ENUM VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
}

TYPEDEF VkPrimitiveTopology = enum VkPrimitiveTopology

ENUM VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
}

ENUM VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0
    VK_POLYGON_MODE_LINE = 1
    VK_POLYGON_MODE_POINT = 2
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
    VK_POLYGON_MODE_MAX_ENUM = 2147483647
}

TYPEDEF VkPolygonMode = enum VkPolygonMode

ENUM VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0
    VK_POLYGON_MODE_LINE = 1
    VK_POLYGON_MODE_POINT = 2
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
    VK_POLYGON_MODE_MAX_ENUM = 2147483647
}

ENUM VkStencilOp {
    VK_STENCIL_OP_KEEP = 0
    VK_STENCIL_OP_ZERO = 1
    VK_STENCIL_OP_REPLACE = 2
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
    VK_STENCIL_OP_INVERT = 5
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
    VK_STENCIL_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkStencilOp = enum VkStencilOp

ENUM VkStencilOp {
    VK_STENCIL_OP_KEEP = 0
    VK_STENCIL_OP_ZERO = 1
    VK_STENCIL_OP_REPLACE = 2
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
    VK_STENCIL_OP_INVERT = 5
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
    VK_STENCIL_OP_MAX_ENUM = 2147483647
}

ENUM VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0
    VK_LOGIC_OP_AND = 1
    VK_LOGIC_OP_AND_REVERSE = 2
    VK_LOGIC_OP_COPY = 3
    VK_LOGIC_OP_AND_INVERTED = 4
    VK_LOGIC_OP_NO_OP = 5
    VK_LOGIC_OP_XOR = 6
    VK_LOGIC_OP_OR = 7
    VK_LOGIC_OP_NOR = 8
    VK_LOGIC_OP_EQUIVALENT = 9
    VK_LOGIC_OP_INVERT = 10
    VK_LOGIC_OP_OR_REVERSE = 11
    VK_LOGIC_OP_COPY_INVERTED = 12
    VK_LOGIC_OP_OR_INVERTED = 13
    VK_LOGIC_OP_NAND = 14
    VK_LOGIC_OP_SET = 15
    VK_LOGIC_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkLogicOp = enum VkLogicOp

ENUM VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0
    VK_LOGIC_OP_AND = 1
    VK_LOGIC_OP_AND_REVERSE = 2
    VK_LOGIC_OP_COPY = 3
    VK_LOGIC_OP_AND_INVERTED = 4
    VK_LOGIC_OP_NO_OP = 5
    VK_LOGIC_OP_XOR = 6
    VK_LOGIC_OP_OR = 7
    VK_LOGIC_OP_NOR = 8
    VK_LOGIC_OP_EQUIVALENT = 9
    VK_LOGIC_OP_INVERT = 10
    VK_LOGIC_OP_OR_REVERSE = 11
    VK_LOGIC_OP_COPY_INVERTED = 12
    VK_LOGIC_OP_OR_INVERTED = 13
    VK_LOGIC_OP_NAND = 14
    VK_LOGIC_OP_SET = 15
    VK_LOGIC_OP_MAX_ENUM = 2147483647
}

ENUM VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
    VK_BORDER_COLOR_MAX_ENUM = 2147483647
}

TYPEDEF VkBorderColor = enum VkBorderColor

ENUM VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
    VK_BORDER_COLOR_MAX_ENUM = 2147483647
}

ENUM VkFilter {
    VK_FILTER_NEAREST = 0
    VK_FILTER_LINEAR = 1
    VK_FILTER_CUBIC_EXT = 1000015000
    VK_FILTER_CUBIC_IMG = 1000015000
    VK_FILTER_MAX_ENUM = 2147483647
}

TYPEDEF VkFilter = enum VkFilter

ENUM VkFilter {
    VK_FILTER_NEAREST = 0
    VK_FILTER_LINEAR = 1
    VK_FILTER_CUBIC_EXT = 1000015000
    VK_FILTER_CUBIC_IMG = 1000015000
    VK_FILTER_MAX_ENUM = 2147483647
}

ENUM VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerAddressMode = enum VkSamplerAddressMode

ENUM VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
}

ENUM VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerMipmapMode = enum VkSamplerMipmapMode

ENUM VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
}

ENUM VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000
    VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001
    VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorType = enum VkDescriptorType

ENUM VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000
    VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001
    VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
}

ENUM VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
    VK_ATTACHMENT_LOAD_OP_NONE_KHR = 1000400000
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkAttachmentLoadOp = enum VkAttachmentLoadOp

ENUM VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
    VK_ATTACHMENT_LOAD_OP_NONE_KHR = 1000400000
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
}

ENUM VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
    VK_ATTACHMENT_STORE_OP_NONE = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
}

TYPEDEF VkAttachmentStoreOp = enum VkAttachmentStoreOp

ENUM VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
    VK_ATTACHMENT_STORE_OP_NONE = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
    VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
}

ENUM VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0
    VK_PIPELINE_BIND_POINT_COMPUTE = 1
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineBindPoint = enum VkPipelineBindPoint

ENUM VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0
    VK_PIPELINE_BIND_POINT_COMPUTE = 1
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
}

ENUM VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandBufferLevel = enum VkCommandBufferLevel

ENUM VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
}

ENUM VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0
    VK_INDEX_TYPE_UINT32 = 1
    VK_INDEX_TYPE_NONE_KHR = 1000165000
    VK_INDEX_TYPE_UINT8_KHR = 1000265000
    VK_INDEX_TYPE_NONE_NV = 1000165000
    VK_INDEX_TYPE_UINT8_EXT = 1000265000
    VK_INDEX_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkIndexType = enum VkIndexType

ENUM VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0
    VK_INDEX_TYPE_UINT32 = 1
    VK_INDEX_TYPE_NONE_KHR = 1000165000
    VK_INDEX_TYPE_UINT8_KHR = 1000265000
    VK_INDEX_TYPE_NONE_NV = 1000165000
    VK_INDEX_TYPE_UINT8_EXT = 1000265000
    VK_INDEX_TYPE_MAX_ENUM = 2147483647
}

ENUM VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = 1000451000
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubpassContents = enum VkSubpassContents

ENUM VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = 1000451000
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
}

ENUM VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    VK_ACCESS_INDEX_READ_BIT = 2
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    VK_ACCESS_UNIFORM_READ_BIT = 8
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
    VK_ACCESS_SHADER_READ_BIT = 32
    VK_ACCESS_SHADER_WRITE_BIT = 64
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    VK_ACCESS_TRANSFER_READ_BIT = 2048
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096
    VK_ACCESS_HOST_READ_BIT = 8192
    VK_ACCESS_HOST_WRITE_BIT = 16384
    VK_ACCESS_MEMORY_READ_BIT = 32768
    VK_ACCESS_MEMORY_WRITE_BIT = 65536
    VK_ACCESS_NONE = 0
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304
    VK_ACCESS_NONE_KHR = 0
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkAccessFlagBits = enum VkAccessFlagBits

ENUM VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    VK_ACCESS_INDEX_READ_BIT = 2
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    VK_ACCESS_UNIFORM_READ_BIT = 8
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
    VK_ACCESS_SHADER_READ_BIT = 32
    VK_ACCESS_SHADER_WRITE_BIT = 64
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    VK_ACCESS_TRANSFER_READ_BIT = 2048
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096
    VK_ACCESS_HOST_READ_BIT = 8192
    VK_ACCESS_HOST_WRITE_BIT = 16384
    VK_ACCESS_MEMORY_READ_BIT = 32768
    VK_ACCESS_MEMORY_WRITE_BIT = 65536
    VK_ACCESS_NONE = 0
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304
    VK_ACCESS_NONE_KHR = 0
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkAccessFlags = VkFlags

ENUM VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 1
    VK_IMAGE_ASPECT_DEPTH_BIT = 2
    VK_IMAGE_ASPECT_STENCIL_BIT = 4
    VK_IMAGE_ASPECT_METADATA_BIT = 8
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64
    VK_IMAGE_ASPECT_NONE = 0
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64
    VK_IMAGE_ASPECT_NONE_KHR = 0
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageAspectFlagBits = enum VkImageAspectFlagBits

ENUM VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 1
    VK_IMAGE_ASPECT_DEPTH_BIT = 2
    VK_IMAGE_ASPECT_STENCIL_BIT = 4
    VK_IMAGE_ASPECT_METADATA_BIT = 8
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64
    VK_IMAGE_ASPECT_NONE = 0
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64
    VK_IMAGE_ASPECT_NONE_KHR = 0
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageAspectFlags = VkFlags

ENUM VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
    VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432
    VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
    VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728
    VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFormatFeatureFlagBits = enum VkFormatFeatureFlagBits

ENUM VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
    VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432
    VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
    VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728
    VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFormatFeatureFlags = VkFlags

ENUM VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
    VK_IMAGE_CREATE_ALIAS_BIT = 1024
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048
    VK_IMAGE_CREATE_DISJOINT_BIT = 512
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
    VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536
    VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144
    VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768
    VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 1048576
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageCreateFlagBits = enum VkImageCreateFlagBits

ENUM VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
    VK_IMAGE_CREATE_ALIAS_BIT = 1024
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048
    VK_IMAGE_CREATE_DISJOINT_BIT = 512
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
    VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536
    VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144
    VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768
    VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 1048576
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageCreateFlags = VkFlags

ENUM VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 1
    VK_SAMPLE_COUNT_2_BIT = 2
    VK_SAMPLE_COUNT_4_BIT = 4
    VK_SAMPLE_COUNT_8_BIT = 8
    VK_SAMPLE_COUNT_16_BIT = 16
    VK_SAMPLE_COUNT_32_BIT = 32
    VK_SAMPLE_COUNT_64_BIT = 64
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSampleCountFlagBits = enum VkSampleCountFlagBits

ENUM VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 1
    VK_SAMPLE_COUNT_2_BIT = 2
    VK_SAMPLE_COUNT_4_BIT = 4
    VK_SAMPLE_COUNT_8_BIT = 8
    VK_SAMPLE_COUNT_16_BIT = 16
    VK_SAMPLE_COUNT_32_BIT = 32
    VK_SAMPLE_COUNT_64_BIT = 64
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSampleCountFlags = VkFlags

ENUM VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
    VK_IMAGE_USAGE_SAMPLED_BIT = 4
    VK_IMAGE_USAGE_STORAGE_BIT = 8
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024
    VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048
    VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256
    VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304
    VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192
    VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384
    VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
    VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144
    VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576
    VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageUsageFlagBits = enum VkImageUsageFlagBits

ENUM VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
    VK_IMAGE_USAGE_SAMPLED_BIT = 4
    VK_IMAGE_USAGE_STORAGE_BIT = 8
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024
    VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048
    VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256
    VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304
    VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192
    VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384
    VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
    VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144
    VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576
    VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageUsageFlags = VkFlags

ENUM VkInstanceCreateFlagBits {
    VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1
    VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkInstanceCreateFlagBits = enum VkInstanceCreateFlagBits

ENUM VkInstanceCreateFlagBits {
    VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1
    VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkInstanceCreateFlags = VkFlags

ENUM VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryHeapFlagBits = enum VkMemoryHeapFlagBits

ENUM VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryHeapFlags = VkFlags

ENUM VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryPropertyFlagBits = enum VkMemoryPropertyFlagBits

ENUM VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryPropertyFlags = VkFlags

ENUM VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 1
    VK_QUEUE_COMPUTE_BIT = 2
    VK_QUEUE_TRANSFER_BIT = 4
    VK_QUEUE_SPARSE_BINDING_BIT = 8
    VK_QUEUE_PROTECTED_BIT = 16
    VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32
    VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64
    VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueueFlagBits = enum VkQueueFlagBits

ENUM VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 1
    VK_QUEUE_COMPUTE_BIT = 2
    VK_QUEUE_TRANSFER_BIT = 4
    VK_QUEUE_SPARSE_BINDING_BIT = 8
    VK_QUEUE_PROTECTED_BIT = 16
    VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32
    VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64
    VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueueFlags = VkFlags

TYPEDEF VkDeviceCreateFlags = VkFlags

ENUM VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDeviceQueueCreateFlagBits = enum VkDeviceQueueCreateFlagBits

ENUM VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDeviceQueueCreateFlags = VkFlags

ENUM VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    VK_PIPELINE_STAGE_HOST_BIT = 16384
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
    VK_PIPELINE_STAGE_NONE = 0
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
    VK_PIPELINE_STAGE_NONE_KHR = 0
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineStageFlagBits = enum VkPipelineStageFlagBits

ENUM VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    VK_PIPELINE_STAGE_HOST_BIT = 16384
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
    VK_PIPELINE_STAGE_NONE = 0
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
    VK_PIPELINE_STAGE_NONE_KHR = 0
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineStageFlags = VkFlags

ENUM VkMemoryMapFlagBits {
    VK_MEMORY_MAP_PLACED_BIT_EXT = 1
    VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryMapFlagBits = enum VkMemoryMapFlagBits

ENUM VkMemoryMapFlagBits {
    VK_MEMORY_MAP_PLACED_BIT_EXT = 1
    VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryMapFlags = VkFlags

ENUM VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSparseMemoryBindFlagBits = enum VkSparseMemoryBindFlagBits

ENUM VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSparseMemoryBindFlags = VkFlags

ENUM VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSparseImageFormatFlagBits = enum VkSparseImageFormatFlagBits

ENUM VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSparseImageFormatFlags = VkFlags

ENUM VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 1
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFenceCreateFlagBits = enum VkFenceCreateFlagBits

ENUM VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 1
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFenceCreateFlags = VkFlags

TYPEDEF VkSemaphoreCreateFlags = VkFlags

ENUM VkEventCreateFlagBits {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkEventCreateFlagBits = enum VkEventCreateFlagBits

ENUM VkEventCreateFlagBits {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkEventCreateFlags = VkFlags

ENUM VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
    VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048
    VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096
    VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryPipelineStatisticFlagBits = enum VkQueryPipelineStatisticFlagBits

ENUM VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
    VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048
    VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096
    VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryPipelineStatisticFlags = VkFlags

TYPEDEF VkQueryPoolCreateFlags = VkFlags

ENUM VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 1
    VK_QUERY_RESULT_WAIT_BIT = 2
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
    VK_QUERY_RESULT_PARTIAL_BIT = 8
    VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryResultFlagBits = enum VkQueryResultFlagBits

ENUM VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 1
    VK_QUERY_RESULT_WAIT_BIT = 2
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
    VK_QUERY_RESULT_PARTIAL_BIT = 8
    VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryResultFlags = VkFlags

ENUM VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
    VK_BUFFER_CREATE_PROTECTED_BIT = 8
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
    VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32
    VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 64
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkBufferCreateFlagBits = enum VkBufferCreateFlagBits

ENUM VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
    VK_BUFFER_CREATE_PROTECTED_BIT = 8
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
    VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32
    VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 64
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkBufferCreateFlags = VkFlags

ENUM VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
    VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
    VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
    VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
    VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
    VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152
    VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304
    VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864
    VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608
    VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkBufferUsageFlagBits = enum VkBufferUsageFlagBits

ENUM VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
    VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
    VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
    VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
    VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
    VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152
    VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304
    VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864
    VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608
    VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkBufferUsageFlags = VkFlags

TYPEDEF VkBufferViewCreateFlags = VkFlags

ENUM VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
    VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageViewCreateFlagBits = enum VkImageViewCreateFlagBits

ENUM VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
    VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkImageViewCreateFlags = VkFlags

TYPEDEF VkShaderModuleCreateFlags = VkFlags

ENUM VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCacheCreateFlagBits = enum VkPipelineCacheCreateFlagBits

ENUM VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCacheCreateFlags = VkFlags

ENUM VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 1
    VK_COLOR_COMPONENT_G_BIT = 2
    VK_COLOR_COMPONENT_B_BIT = 4
    VK_COLOR_COMPONENT_A_BIT = 8
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkColorComponentFlagBits = enum VkColorComponentFlagBits

ENUM VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 1
    VK_COLOR_COMPONENT_G_BIT = 2
    VK_COLOR_COMPONENT_B_BIT = 4
    VK_COLOR_COMPONENT_A_BIT = 8
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkColorComponentFlags = VkFlags

ENUM VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
    VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912
    VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608
    VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576
    VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432
    VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864
    VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216
    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824
    VK_PIPELINE_CREATE_DISPATCH_BASE = 16
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCreateFlagBits = enum VkPipelineCreateFlagBits

ENUM VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
    VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912
    VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608
    VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576
    VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432
    VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864
    VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216
    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824
    VK_PIPELINE_CREATE_DISPATCH_BASE = 16
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCreateFlags = VkFlags

ENUM VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineShaderStageCreateFlagBits = enum VkPipelineShaderStageCreateFlagBits

ENUM VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineShaderStageCreateFlags = VkFlags

ENUM VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 1
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    VK_SHADER_STAGE_GEOMETRY_BIT = 8
    VK_SHADER_STAGE_FRAGMENT_BIT = 16
    VK_SHADER_STAGE_COMPUTE_BIT = 32
    VK_SHADER_STAGE_ALL_GRAPHICS = 31
    VK_SHADER_STAGE_ALL = 2147483647
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
    VK_SHADER_STAGE_TASK_BIT_EXT = 64
    VK_SHADER_STAGE_MESH_BIT_EXT = 128
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384
    VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288
    VK_SHADER_STAGE_RAYGEN_BIT_NV = 256
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024
    VK_SHADER_STAGE_MISS_BIT_NV = 2048
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096
    VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192
    VK_SHADER_STAGE_TASK_BIT_NV = 64
    VK_SHADER_STAGE_MESH_BIT_NV = 128
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkShaderStageFlagBits = enum VkShaderStageFlagBits

ENUM VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 1
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    VK_SHADER_STAGE_GEOMETRY_BIT = 8
    VK_SHADER_STAGE_FRAGMENT_BIT = 16
    VK_SHADER_STAGE_COMPUTE_BIT = 32
    VK_SHADER_STAGE_ALL_GRAPHICS = 31
    VK_SHADER_STAGE_ALL = 2147483647
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
    VK_SHADER_STAGE_TASK_BIT_EXT = 64
    VK_SHADER_STAGE_MESH_BIT_EXT = 128
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384
    VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288
    VK_SHADER_STAGE_RAYGEN_BIT_NV = 256
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024
    VK_SHADER_STAGE_MISS_BIT_NV = 2048
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096
    VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192
    VK_SHADER_STAGE_TASK_BIT_NV = 64
    VK_SHADER_STAGE_MESH_BIT_NV = 128
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

ENUM VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0
    VK_CULL_MODE_FRONT_BIT = 1
    VK_CULL_MODE_BACK_BIT = 2
    VK_CULL_MODE_FRONT_AND_BACK = 3
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCullModeFlagBits = enum VkCullModeFlagBits

ENUM VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0
    VK_CULL_MODE_FRONT_BIT = 1
    VK_CULL_MODE_BACK_BIT = 2
    VK_CULL_MODE_FRONT_AND_BACK = 3
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCullModeFlags = VkFlags

TYPEDEF VkPipelineVertexInputStateCreateFlags = VkFlags

TYPEDEF VkPipelineInputAssemblyStateCreateFlags = VkFlags

TYPEDEF VkPipelineTessellationStateCreateFlags = VkFlags

TYPEDEF VkPipelineViewportStateCreateFlags = VkFlags

TYPEDEF VkPipelineRasterizationStateCreateFlags = VkFlags

TYPEDEF VkPipelineMultisampleStateCreateFlags = VkFlags

ENUM VkPipelineDepthStencilStateCreateFlagBits {
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineDepthStencilStateCreateFlagBits = enum VkPipelineDepthStencilStateCreateFlagBits

ENUM VkPipelineDepthStencilStateCreateFlagBits {
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineDepthStencilStateCreateFlags = VkFlags

ENUM VkPipelineColorBlendStateCreateFlagBits {
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineColorBlendStateCreateFlagBits = enum VkPipelineColorBlendStateCreateFlagBits

ENUM VkPipelineColorBlendStateCreateFlagBits {
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineColorBlendStateCreateFlags = VkFlags

TYPEDEF VkPipelineDynamicStateCreateFlags = VkFlags

ENUM VkPipelineLayoutCreateFlagBits {
    VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2
    VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineLayoutCreateFlagBits = enum VkPipelineLayoutCreateFlagBits

ENUM VkPipelineLayoutCreateFlagBits {
    VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2
    VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineLayoutCreateFlags = VkFlags

TYPEDEF VkShaderStageFlags = VkFlags

ENUM VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
    VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
    VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4
    VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerCreateFlagBits = enum VkSamplerCreateFlagBits

ENUM VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
    VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
    VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4
    VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerCreateFlags = VkFlags

ENUM VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorPoolCreateFlagBits = enum VkDescriptorPoolCreateFlagBits

ENUM VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorPoolCreateFlags = VkFlags

TYPEDEF VkDescriptorPoolResetFlags = VkFlags

ENUM VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorSetLayoutCreateFlagBits = enum VkDescriptorSetLayoutCreateFlagBits

ENUM VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorSetLayoutCreateFlags = VkFlags

ENUM VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkAttachmentDescriptionFlagBits = enum VkAttachmentDescriptionFlagBits

ENUM VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkAttachmentDescriptionFlags = VkFlags

ENUM VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 1
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
    VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDependencyFlagBits = enum VkDependencyFlagBits

ENUM VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 1
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
    VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDependencyFlags = VkFlags

ENUM VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFramebufferCreateFlagBits = enum VkFramebufferCreateFlagBits

ENUM VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFramebufferCreateFlags = VkFlags

ENUM VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkRenderPassCreateFlagBits = enum VkRenderPassCreateFlagBits

ENUM VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkRenderPassCreateFlags = VkFlags

ENUM VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64
    VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubpassDescriptionFlagBits = enum VkSubpassDescriptionFlagBits

ENUM VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64
    VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubpassDescriptionFlags = VkFlags

ENUM VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandPoolCreateFlagBits = enum VkCommandPoolCreateFlagBits

ENUM VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandPoolCreateFlags = VkFlags

ENUM VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandPoolResetFlagBits = enum VkCommandPoolResetFlagBits

ENUM VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandPoolResetFlags = VkFlags

ENUM VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandBufferUsageFlagBits = enum VkCommandBufferUsageFlagBits

ENUM VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandBufferUsageFlags = VkFlags

ENUM VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 1
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryControlFlagBits = enum VkQueryControlFlagBits

ENUM VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 1
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkQueryControlFlags = VkFlags

ENUM VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandBufferResetFlagBits = enum VkCommandBufferResetFlagBits

ENUM VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkCommandBufferResetFlags = VkFlags

ENUM VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 1
    VK_STENCIL_FACE_BACK_BIT = 2
    VK_STENCIL_FACE_FRONT_AND_BACK = 3
    VK_STENCIL_FRONT_AND_BACK = 3
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkStencilFaceFlagBits = enum VkStencilFaceFlagBits

ENUM VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 1
    VK_STENCIL_FACE_BACK_BIT = 2
    VK_STENCIL_FACE_FRONT_AND_BACK = 3
    VK_STENCIL_FRONT_AND_BACK = 3
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkStencilFaceFlags = VkFlags

struct VkExtent2D {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkExtent2D = struct VkExtent2D

struct VkExtent2D {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
} ; size: 8

struct VkExtent3D {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
    name = depth, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkExtent3D = struct VkExtent3D

struct VkExtent3D {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
    name = depth, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkOffset2D {
    name = x, type = (int32_t), offset = 0, size = 4
    name = y, type = (int32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkOffset2D = struct VkOffset2D

struct VkOffset2D {
    name = x, type = (int32_t), offset = 0, size = 4
    name = y, type = (int32_t), offset = 4, size = 4
} ; size: 8

struct VkOffset3D {
    name = x, type = (int32_t), offset = 0, size = 4
    name = y, type = (int32_t), offset = 4, size = 4
    name = z, type = (int32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkOffset3D = struct VkOffset3D

struct VkOffset3D {
    name = x, type = (int32_t), offset = 0, size = 4
    name = y, type = (int32_t), offset = 4, size = 4
    name = z, type = (int32_t), offset = 8, size = 4
} ; size: 12

struct VkRect2D {
    name = offset, type = (VkOffset2D), offset = 0, size = 8
    name = extent, type = (VkExtent2D), offset = 8, size = 8
} ; size: 16

TYPEDEF VkRect2D = struct VkRect2D

struct VkRect2D {
    name = offset, type = (VkOffset2D), offset = 0, size = 8
    name = extent, type = (VkExtent2D), offset = 8, size = 8
} ; size: 16

struct VkBaseInStructure {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const struct VkBaseInStructure *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkBaseInStructure = struct VkBaseInStructure

struct VkBaseInStructure {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const struct VkBaseInStructure *), offset = 8, size = 8
} ; size: 16

struct VkBaseOutStructure {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (struct VkBaseOutStructure *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkBaseOutStructure = struct VkBaseOutStructure

struct VkBaseOutStructure {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (struct VkBaseOutStructure *), offset = 8, size = 8
} ; size: 16

struct VkBufferMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 24, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 28, size = 4
    name = buffer, type = (VkBuffer), offset = 32, size = 8
    name = offset, type = (VkDeviceSize), offset = 40, size = 8
    name = size, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

TYPEDEF VkBufferMemoryBarrier = struct VkBufferMemoryBarrier

struct VkBufferMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 24, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 28, size = 4
    name = buffer, type = (VkBuffer), offset = 32, size = 8
    name = offset, type = (VkDeviceSize), offset = 40, size = 8
    name = size, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

struct VkDispatchIndirectCommand {
    name = x, type = (uint32_t), offset = 0, size = 4
    name = y, type = (uint32_t), offset = 4, size = 4
    name = z, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkDispatchIndirectCommand = struct VkDispatchIndirectCommand

struct VkDispatchIndirectCommand {
    name = x, type = (uint32_t), offset = 0, size = 4
    name = y, type = (uint32_t), offset = 4, size = 4
    name = z, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkDrawIndexedIndirectCommand {
    name = indexCount, type = (uint32_t), offset = 0, size = 4
    name = instanceCount, type = (uint32_t), offset = 4, size = 4
    name = firstIndex, type = (uint32_t), offset = 8, size = 4
    name = vertexOffset, type = (int32_t), offset = 12, size = 4
    name = firstInstance, type = (uint32_t), offset = 16, size = 4
} ; size: 20

TYPEDEF VkDrawIndexedIndirectCommand = struct VkDrawIndexedIndirectCommand

struct VkDrawIndexedIndirectCommand {
    name = indexCount, type = (uint32_t), offset = 0, size = 4
    name = instanceCount, type = (uint32_t), offset = 4, size = 4
    name = firstIndex, type = (uint32_t), offset = 8, size = 4
    name = vertexOffset, type = (int32_t), offset = 12, size = 4
    name = firstInstance, type = (uint32_t), offset = 16, size = 4
} ; size: 20

struct VkDrawIndirectCommand {
    name = vertexCount, type = (uint32_t), offset = 0, size = 4
    name = instanceCount, type = (uint32_t), offset = 4, size = 4
    name = firstVertex, type = (uint32_t), offset = 8, size = 4
    name = firstInstance, type = (uint32_t), offset = 12, size = 4
} ; size: 16

TYPEDEF VkDrawIndirectCommand = struct VkDrawIndirectCommand

struct VkDrawIndirectCommand {
    name = vertexCount, type = (uint32_t), offset = 0, size = 4
    name = instanceCount, type = (uint32_t), offset = 4, size = 4
    name = firstVertex, type = (uint32_t), offset = 8, size = 4
    name = firstInstance, type = (uint32_t), offset = 12, size = 4
} ; size: 16

struct VkImageSubresourceRange {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = baseMipLevel, type = (uint32_t), offset = 4, size = 4
    name = levelCount, type = (uint32_t), offset = 8, size = 4
    name = baseArrayLayer, type = (uint32_t), offset = 12, size = 4
    name = layerCount, type = (uint32_t), offset = 16, size = 4
} ; size: 20

TYPEDEF VkImageSubresourceRange = struct VkImageSubresourceRange

struct VkImageSubresourceRange {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = baseMipLevel, type = (uint32_t), offset = 4, size = 4
    name = levelCount, type = (uint32_t), offset = 8, size = 4
    name = baseArrayLayer, type = (uint32_t), offset = 12, size = 4
    name = layerCount, type = (uint32_t), offset = 16, size = 4
} ; size: 20

struct VkImageMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = oldLayout, type = (VkImageLayout), offset = 24, size = 4
    name = newLayout, type = (VkImageLayout), offset = 28, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 32, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 36, size = 4
    name = image, type = (VkImage), offset = 40, size = 8
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 48, size = 20
} ; size: 72

TYPEDEF VkImageMemoryBarrier = struct VkImageMemoryBarrier

struct VkImageMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = oldLayout, type = (VkImageLayout), offset = 24, size = 4
    name = newLayout, type = (VkImageLayout), offset = 28, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 32, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 36, size = 4
    name = image, type = (VkImage), offset = 40, size = 8
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 48, size = 20
} ; size: 72

struct VkMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
} ; size: 24

TYPEDEF VkMemoryBarrier = struct VkMemoryBarrier

struct VkMemoryBarrier {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
} ; size: 24

struct VkPipelineCacheHeaderVersionOne {
    name = headerSize, type = (uint32_t), offset = 0, size = 4
    name = headerVersion, type = (VkPipelineCacheHeaderVersion), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

TYPEDEF VkPipelineCacheHeaderVersionOne = struct VkPipelineCacheHeaderVersionOne

struct VkPipelineCacheHeaderVersionOne {
    name = headerSize, type = (uint32_t), offset = 0, size = 4
    name = headerVersion, type = (VkPipelineCacheHeaderVersion), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

TYPEDEF PFN_vkAllocationFunction = void *(*)(void *, size_t, size_t, VkSystemAllocationScope) __attribute__((stdcall))

TYPEDEF PFN_vkFreeFunction = void (*)(void *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkInternalAllocationNotification = void (*)(void *, size_t, VkInternalAllocationType, VkSystemAllocationScope) __attribute__((stdcall))

TYPEDEF PFN_vkInternalFreeNotification = void (*)(void *, size_t, VkInternalAllocationType, VkSystemAllocationScope) __attribute__((stdcall))

TYPEDEF PFN_vkReallocationFunction = void *(*)(void *, void *, size_t, size_t, VkSystemAllocationScope) __attribute__((stdcall))

TYPEDEF PFN_vkVoidFunction = void (*)(void) __attribute__((stdcall))

struct VkAllocationCallbacks {
    name = pUserData, type = (void *), offset = 0, size = 8
    name = pfnAllocation, type = (PFN_vkAllocationFunction), offset = 8, size = 8
    name = pfnReallocation, type = (PFN_vkReallocationFunction), offset = 16, size = 8
    name = pfnFree, type = (PFN_vkFreeFunction), offset = 24, size = 8
    name = pfnInternalAllocation, type = (PFN_vkInternalAllocationNotification), offset = 32, size = 8
    name = pfnInternalFree, type = (PFN_vkInternalFreeNotification), offset = 40, size = 8
} ; size: 48

TYPEDEF VkAllocationCallbacks = struct VkAllocationCallbacks

struct VkAllocationCallbacks {
    name = pUserData, type = (void *), offset = 0, size = 8
    name = pfnAllocation, type = (PFN_vkAllocationFunction), offset = 8, size = 8
    name = pfnReallocation, type = (PFN_vkReallocationFunction), offset = 16, size = 8
    name = pfnFree, type = (PFN_vkFreeFunction), offset = 24, size = 8
    name = pfnInternalAllocation, type = (PFN_vkInternalAllocationNotification), offset = 32, size = 8
    name = pfnInternalFree, type = (PFN_vkInternalFreeNotification), offset = 40, size = 8
} ; size: 48

struct VkApplicationInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pApplicationName, type = (const char *), offset = 16, size = 8
    name = applicationVersion, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pEngineName, type = (const char *), offset = 32, size = 8
    name = engineVersion, type = (uint32_t), offset = 40, size = 4
    name = apiVersion, type = (uint32_t), offset = 44, size = 4
} ; size: 48

TYPEDEF VkApplicationInfo = struct VkApplicationInfo

struct VkApplicationInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pApplicationName, type = (const char *), offset = 16, size = 8
    name = applicationVersion, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pEngineName, type = (const char *), offset = 32, size = 8
    name = engineVersion, type = (uint32_t), offset = 40, size = 4
    name = apiVersion, type = (uint32_t), offset = 44, size = 4
} ; size: 48

struct VkFormatProperties {
    name = linearTilingFeatures, type = (VkFormatFeatureFlags), offset = 0, size = 4
    name = optimalTilingFeatures, type = (VkFormatFeatureFlags), offset = 4, size = 4
    name = bufferFeatures, type = (VkFormatFeatureFlags), offset = 8, size = 4
} ; size: 12

TYPEDEF VkFormatProperties = struct VkFormatProperties

struct VkFormatProperties {
    name = linearTilingFeatures, type = (VkFormatFeatureFlags), offset = 0, size = 4
    name = optimalTilingFeatures, type = (VkFormatFeatureFlags), offset = 4, size = 4
    name = bufferFeatures, type = (VkFormatFeatureFlags), offset = 8, size = 4
} ; size: 12

struct VkImageFormatProperties {
    name = maxExtent, type = (VkExtent3D), offset = 0, size = 12
    name = maxMipLevels, type = (uint32_t), offset = 12, size = 4
    name = maxArrayLayers, type = (uint32_t), offset = 16, size = 4
    name = sampleCounts, type = (VkSampleCountFlags), offset = 20, size = 4
    name = maxResourceSize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImageFormatProperties = struct VkImageFormatProperties

struct VkImageFormatProperties {
    name = maxExtent, type = (VkExtent3D), offset = 0, size = 12
    name = maxMipLevels, type = (uint32_t), offset = 12, size = 4
    name = maxArrayLayers, type = (uint32_t), offset = 16, size = 4
    name = sampleCounts, type = (VkSampleCountFlags), offset = 20, size = 4
    name = maxResourceSize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

struct VkInstanceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkInstanceCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = pApplicationInfo, type = (const VkApplicationInfo *), offset = 24, size = 8
    name = enabledLayerCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = ppEnabledLayerNames, type = (const char *const *), offset = 40, size = 8
    name = enabledExtensionCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = ppEnabledExtensionNames, type = (const char *const *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkInstanceCreateInfo = struct VkInstanceCreateInfo

struct VkInstanceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkInstanceCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = pApplicationInfo, type = (const VkApplicationInfo *), offset = 24, size = 8
    name = enabledLayerCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = ppEnabledLayerNames, type = (const char *const *), offset = 40, size = 8
    name = enabledExtensionCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = ppEnabledExtensionNames, type = (const char *const *), offset = 56, size = 8
} ; size: 64

struct VkMemoryHeap {
    name = size, type = (VkDeviceSize), offset = 0, size = 8
    name = flags, type = (VkMemoryHeapFlags), offset = 8, size = 4
} ; size: 16

TYPEDEF VkMemoryHeap = struct VkMemoryHeap

struct VkMemoryHeap {
    name = size, type = (VkDeviceSize), offset = 0, size = 8
    name = flags, type = (VkMemoryHeapFlags), offset = 8, size = 4
} ; size: 16

struct VkMemoryType {
    name = propertyFlags, type = (VkMemoryPropertyFlags), offset = 0, size = 4
    name = heapIndex, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkMemoryType = struct VkMemoryType

struct VkMemoryType {
    name = propertyFlags, type = (VkMemoryPropertyFlags), offset = 0, size = 4
    name = heapIndex, type = (uint32_t), offset = 4, size = 4
} ; size: 8

struct VkPhysicalDeviceFeatures {
    name = robustBufferAccess, type = (VkBool32), offset = 0, size = 4
    name = fullDrawIndexUint32, type = (VkBool32), offset = 4, size = 4
    name = imageCubeArray, type = (VkBool32), offset = 8, size = 4
    name = independentBlend, type = (VkBool32), offset = 12, size = 4
    name = geometryShader, type = (VkBool32), offset = 16, size = 4
    name = tessellationShader, type = (VkBool32), offset = 20, size = 4
    name = sampleRateShading, type = (VkBool32), offset = 24, size = 4
    name = dualSrcBlend, type = (VkBool32), offset = 28, size = 4
    name = logicOp, type = (VkBool32), offset = 32, size = 4
    name = multiDrawIndirect, type = (VkBool32), offset = 36, size = 4
    name = drawIndirectFirstInstance, type = (VkBool32), offset = 40, size = 4
    name = depthClamp, type = (VkBool32), offset = 44, size = 4
    name = depthBiasClamp, type = (VkBool32), offset = 48, size = 4
    name = fillModeNonSolid, type = (VkBool32), offset = 52, size = 4
    name = depthBounds, type = (VkBool32), offset = 56, size = 4
    name = wideLines, type = (VkBool32), offset = 60, size = 4
    name = largePoints, type = (VkBool32), offset = 64, size = 4
    name = alphaToOne, type = (VkBool32), offset = 68, size = 4
    name = multiViewport, type = (VkBool32), offset = 72, size = 4
    name = samplerAnisotropy, type = (VkBool32), offset = 76, size = 4
    name = textureCompressionETC2, type = (VkBool32), offset = 80, size = 4
    name = textureCompressionASTC_LDR, type = (VkBool32), offset = 84, size = 4
    name = textureCompressionBC, type = (VkBool32), offset = 88, size = 4
    name = occlusionQueryPrecise, type = (VkBool32), offset = 92, size = 4
    name = pipelineStatisticsQuery, type = (VkBool32), offset = 96, size = 4
    name = vertexPipelineStoresAndAtomics, type = (VkBool32), offset = 100, size = 4
    name = fragmentStoresAndAtomics, type = (VkBool32), offset = 104, size = 4
    name = shaderTessellationAndGeometryPointSize, type = (VkBool32), offset = 108, size = 4
    name = shaderImageGatherExtended, type = (VkBool32), offset = 112, size = 4
    name = shaderStorageImageExtendedFormats, type = (VkBool32), offset = 116, size = 4
    name = shaderStorageImageMultisample, type = (VkBool32), offset = 120, size = 4
    name = shaderStorageImageReadWithoutFormat, type = (VkBool32), offset = 124, size = 4
    name = shaderStorageImageWriteWithoutFormat, type = (VkBool32), offset = 128, size = 4
    name = shaderUniformBufferArrayDynamicIndexing, type = (VkBool32), offset = 132, size = 4
    name = shaderSampledImageArrayDynamicIndexing, type = (VkBool32), offset = 136, size = 4
    name = shaderStorageBufferArrayDynamicIndexing, type = (VkBool32), offset = 140, size = 4
    name = shaderStorageImageArrayDynamicIndexing, type = (VkBool32), offset = 144, size = 4
    name = shaderClipDistance, type = (VkBool32), offset = 148, size = 4
    name = shaderCullDistance, type = (VkBool32), offset = 152, size = 4
    name = shaderFloat64, type = (VkBool32), offset = 156, size = 4
    name = shaderInt64, type = (VkBool32), offset = 160, size = 4
    name = shaderInt16, type = (VkBool32), offset = 164, size = 4
    name = shaderResourceResidency, type = (VkBool32), offset = 168, size = 4
    name = shaderResourceMinLod, type = (VkBool32), offset = 172, size = 4
    name = sparseBinding, type = (VkBool32), offset = 176, size = 4
    name = sparseResidencyBuffer, type = (VkBool32), offset = 180, size = 4
    name = sparseResidencyImage2D, type = (VkBool32), offset = 184, size = 4
    name = sparseResidencyImage3D, type = (VkBool32), offset = 188, size = 4
    name = sparseResidency2Samples, type = (VkBool32), offset = 192, size = 4
    name = sparseResidency4Samples, type = (VkBool32), offset = 196, size = 4
    name = sparseResidency8Samples, type = (VkBool32), offset = 200, size = 4
    name = sparseResidency16Samples, type = (VkBool32), offset = 204, size = 4
    name = sparseResidencyAliased, type = (VkBool32), offset = 208, size = 4
    name = variableMultisampleRate, type = (VkBool32), offset = 212, size = 4
    name = inheritedQueries, type = (VkBool32), offset = 216, size = 4
} ; size: 220

TYPEDEF VkPhysicalDeviceFeatures = struct VkPhysicalDeviceFeatures

struct VkPhysicalDeviceFeatures {
    name = robustBufferAccess, type = (VkBool32), offset = 0, size = 4
    name = fullDrawIndexUint32, type = (VkBool32), offset = 4, size = 4
    name = imageCubeArray, type = (VkBool32), offset = 8, size = 4
    name = independentBlend, type = (VkBool32), offset = 12, size = 4
    name = geometryShader, type = (VkBool32), offset = 16, size = 4
    name = tessellationShader, type = (VkBool32), offset = 20, size = 4
    name = sampleRateShading, type = (VkBool32), offset = 24, size = 4
    name = dualSrcBlend, type = (VkBool32), offset = 28, size = 4
    name = logicOp, type = (VkBool32), offset = 32, size = 4
    name = multiDrawIndirect, type = (VkBool32), offset = 36, size = 4
    name = drawIndirectFirstInstance, type = (VkBool32), offset = 40, size = 4
    name = depthClamp, type = (VkBool32), offset = 44, size = 4
    name = depthBiasClamp, type = (VkBool32), offset = 48, size = 4
    name = fillModeNonSolid, type = (VkBool32), offset = 52, size = 4
    name = depthBounds, type = (VkBool32), offset = 56, size = 4
    name = wideLines, type = (VkBool32), offset = 60, size = 4
    name = largePoints, type = (VkBool32), offset = 64, size = 4
    name = alphaToOne, type = (VkBool32), offset = 68, size = 4
    name = multiViewport, type = (VkBool32), offset = 72, size = 4
    name = samplerAnisotropy, type = (VkBool32), offset = 76, size = 4
    name = textureCompressionETC2, type = (VkBool32), offset = 80, size = 4
    name = textureCompressionASTC_LDR, type = (VkBool32), offset = 84, size = 4
    name = textureCompressionBC, type = (VkBool32), offset = 88, size = 4
    name = occlusionQueryPrecise, type = (VkBool32), offset = 92, size = 4
    name = pipelineStatisticsQuery, type = (VkBool32), offset = 96, size = 4
    name = vertexPipelineStoresAndAtomics, type = (VkBool32), offset = 100, size = 4
    name = fragmentStoresAndAtomics, type = (VkBool32), offset = 104, size = 4
    name = shaderTessellationAndGeometryPointSize, type = (VkBool32), offset = 108, size = 4
    name = shaderImageGatherExtended, type = (VkBool32), offset = 112, size = 4
    name = shaderStorageImageExtendedFormats, type = (VkBool32), offset = 116, size = 4
    name = shaderStorageImageMultisample, type = (VkBool32), offset = 120, size = 4
    name = shaderStorageImageReadWithoutFormat, type = (VkBool32), offset = 124, size = 4
    name = shaderStorageImageWriteWithoutFormat, type = (VkBool32), offset = 128, size = 4
    name = shaderUniformBufferArrayDynamicIndexing, type = (VkBool32), offset = 132, size = 4
    name = shaderSampledImageArrayDynamicIndexing, type = (VkBool32), offset = 136, size = 4
    name = shaderStorageBufferArrayDynamicIndexing, type = (VkBool32), offset = 140, size = 4
    name = shaderStorageImageArrayDynamicIndexing, type = (VkBool32), offset = 144, size = 4
    name = shaderClipDistance, type = (VkBool32), offset = 148, size = 4
    name = shaderCullDistance, type = (VkBool32), offset = 152, size = 4
    name = shaderFloat64, type = (VkBool32), offset = 156, size = 4
    name = shaderInt64, type = (VkBool32), offset = 160, size = 4
    name = shaderInt16, type = (VkBool32), offset = 164, size = 4
    name = shaderResourceResidency, type = (VkBool32), offset = 168, size = 4
    name = shaderResourceMinLod, type = (VkBool32), offset = 172, size = 4
    name = sparseBinding, type = (VkBool32), offset = 176, size = 4
    name = sparseResidencyBuffer, type = (VkBool32), offset = 180, size = 4
    name = sparseResidencyImage2D, type = (VkBool32), offset = 184, size = 4
    name = sparseResidencyImage3D, type = (VkBool32), offset = 188, size = 4
    name = sparseResidency2Samples, type = (VkBool32), offset = 192, size = 4
    name = sparseResidency4Samples, type = (VkBool32), offset = 196, size = 4
    name = sparseResidency8Samples, type = (VkBool32), offset = 200, size = 4
    name = sparseResidency16Samples, type = (VkBool32), offset = 204, size = 4
    name = sparseResidencyAliased, type = (VkBool32), offset = 208, size = 4
    name = variableMultisampleRate, type = (VkBool32), offset = 212, size = 4
    name = inheritedQueries, type = (VkBool32), offset = 216, size = 4
} ; size: 220

struct VkPhysicalDeviceLimits {
    name = maxImageDimension1D, type = (uint32_t), offset = 0, size = 4
    name = maxImageDimension2D, type = (uint32_t), offset = 4, size = 4
    name = maxImageDimension3D, type = (uint32_t), offset = 8, size = 4
    name = maxImageDimensionCube, type = (uint32_t), offset = 12, size = 4
    name = maxImageArrayLayers, type = (uint32_t), offset = 16, size = 4
    name = maxTexelBufferElements, type = (uint32_t), offset = 20, size = 4
    name = maxUniformBufferRange, type = (uint32_t), offset = 24, size = 4
    name = maxStorageBufferRange, type = (uint32_t), offset = 28, size = 4
    name = maxPushConstantsSize, type = (uint32_t), offset = 32, size = 4
    name = maxMemoryAllocationCount, type = (uint32_t), offset = 36, size = 4
    name = maxSamplerAllocationCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = bufferImageGranularity, type = (VkDeviceSize), offset = 48, size = 8
    name = sparseAddressSpaceSize, type = (VkDeviceSize), offset = 56, size = 8
    name = maxBoundDescriptorSets, type = (uint32_t), offset = 64, size = 4
    name = maxPerStageDescriptorSamplers, type = (uint32_t), offset = 68, size = 4
    name = maxPerStageDescriptorUniformBuffers, type = (uint32_t), offset = 72, size = 4
    name = maxPerStageDescriptorStorageBuffers, type = (uint32_t), offset = 76, size = 4
    name = maxPerStageDescriptorSampledImages, type = (uint32_t), offset = 80, size = 4
    name = maxPerStageDescriptorStorageImages, type = (uint32_t), offset = 84, size = 4
    name = maxPerStageDescriptorInputAttachments, type = (uint32_t), offset = 88, size = 4
    name = maxPerStageResources, type = (uint32_t), offset = 92, size = 4
    name = maxDescriptorSetSamplers, type = (uint32_t), offset = 96, size = 4
    name = maxDescriptorSetUniformBuffers, type = (uint32_t), offset = 100, size = 4
    name = maxDescriptorSetUniformBuffersDynamic, type = (uint32_t), offset = 104, size = 4
    name = maxDescriptorSetStorageBuffers, type = (uint32_t), offset = 108, size = 4
    name = maxDescriptorSetStorageBuffersDynamic, type = (uint32_t), offset = 112, size = 4
    name = maxDescriptorSetSampledImages, type = (uint32_t), offset = 116, size = 4
    name = maxDescriptorSetStorageImages, type = (uint32_t), offset = 120, size = 4
    name = maxDescriptorSetInputAttachments, type = (uint32_t), offset = 124, size = 4
    name = maxVertexInputAttributes, type = (uint32_t), offset = 128, size = 4
    name = maxVertexInputBindings, type = (uint32_t), offset = 132, size = 4
    name = maxVertexInputAttributeOffset, type = (uint32_t), offset = 136, size = 4
    name = maxVertexInputBindingStride, type = (uint32_t), offset = 140, size = 4
    name = maxVertexOutputComponents, type = (uint32_t), offset = 144, size = 4
    name = maxTessellationGenerationLevel, type = (uint32_t), offset = 148, size = 4
    name = maxTessellationPatchSize, type = (uint32_t), offset = 152, size = 4
    name = maxTessellationControlPerVertexInputComponents, type = (uint32_t), offset = 156, size = 4
    name = maxTessellationControlPerVertexOutputComponents, type = (uint32_t), offset = 160, size = 4
    name = maxTessellationControlPerPatchOutputComponents, type = (uint32_t), offset = 164, size = 4
    name = maxTessellationControlTotalOutputComponents, type = (uint32_t), offset = 168, size = 4
    name = maxTessellationEvaluationInputComponents, type = (uint32_t), offset = 172, size = 4
    name = maxTessellationEvaluationOutputComponents, type = (uint32_t), offset = 176, size = 4
    name = maxGeometryShaderInvocations, type = (uint32_t), offset = 180, size = 4
    name = maxGeometryInputComponents, type = (uint32_t), offset = 184, size = 4
    name = maxGeometryOutputComponents, type = (uint32_t), offset = 188, size = 4
    name = maxGeometryOutputVertices, type = (uint32_t), offset = 192, size = 4
    name = maxGeometryTotalOutputComponents, type = (uint32_t), offset = 196, size = 4
    name = maxFragmentInputComponents, type = (uint32_t), offset = 200, size = 4
    name = maxFragmentOutputAttachments, type = (uint32_t), offset = 204, size = 4
    name = maxFragmentDualSrcAttachments, type = (uint32_t), offset = 208, size = 4
    name = maxFragmentCombinedOutputResources, type = (uint32_t), offset = 212, size = 4
    name = maxComputeSharedMemorySize, type = (uint32_t), offset = 216, size = 4
    name = maxComputeWorkGroupCount, type = (uint32_t[3]), offset = 220, size = 12
    name = maxComputeWorkGroupInvocations, type = (uint32_t), offset = 232, size = 4
    name = maxComputeWorkGroupSize, type = (uint32_t[3]), offset = 236, size = 12
    name = subPixelPrecisionBits, type = (uint32_t), offset = 248, size = 4
    name = subTexelPrecisionBits, type = (uint32_t), offset = 252, size = 4
    name = mipmapPrecisionBits, type = (uint32_t), offset = 256, size = 4
    name = maxDrawIndexedIndexValue, type = (uint32_t), offset = 260, size = 4
    name = maxDrawIndirectCount, type = (uint32_t), offset = 264, size = 4
    name = maxSamplerLodBias, type = (float), offset = 268, size = 4
    name = maxSamplerAnisotropy, type = (float), offset = 272, size = 4
    name = maxViewports, type = (uint32_t), offset = 276, size = 4
    name = maxViewportDimensions, type = (uint32_t[2]), offset = 280, size = 8
    name = viewportBoundsRange, type = (float[2]), offset = 288, size = 8
    name = viewportSubPixelBits, type = (uint32_t), offset = 296, size = 4
    padding (4 bytes)
    name = minMemoryMapAlignment, type = (size_t), offset = 304, size = 8
    name = minTexelBufferOffsetAlignment, type = (VkDeviceSize), offset = 312, size = 8
    name = minUniformBufferOffsetAlignment, type = (VkDeviceSize), offset = 320, size = 8
    name = minStorageBufferOffsetAlignment, type = (VkDeviceSize), offset = 328, size = 8
    name = minTexelOffset, type = (int32_t), offset = 336, size = 4
    name = maxTexelOffset, type = (uint32_t), offset = 340, size = 4
    name = minTexelGatherOffset, type = (int32_t), offset = 344, size = 4
    name = maxTexelGatherOffset, type = (uint32_t), offset = 348, size = 4
    name = minInterpolationOffset, type = (float), offset = 352, size = 4
    name = maxInterpolationOffset, type = (float), offset = 356, size = 4
    name = subPixelInterpolationOffsetBits, type = (uint32_t), offset = 360, size = 4
    name = maxFramebufferWidth, type = (uint32_t), offset = 364, size = 4
    name = maxFramebufferHeight, type = (uint32_t), offset = 368, size = 4
    name = maxFramebufferLayers, type = (uint32_t), offset = 372, size = 4
    name = framebufferColorSampleCounts, type = (VkSampleCountFlags), offset = 376, size = 4
    name = framebufferDepthSampleCounts, type = (VkSampleCountFlags), offset = 380, size = 4
    name = framebufferStencilSampleCounts, type = (VkSampleCountFlags), offset = 384, size = 4
    name = framebufferNoAttachmentsSampleCounts, type = (VkSampleCountFlags), offset = 388, size = 4
    name = maxColorAttachments, type = (uint32_t), offset = 392, size = 4
    name = sampledImageColorSampleCounts, type = (VkSampleCountFlags), offset = 396, size = 4
    name = sampledImageIntegerSampleCounts, type = (VkSampleCountFlags), offset = 400, size = 4
    name = sampledImageDepthSampleCounts, type = (VkSampleCountFlags), offset = 404, size = 4
    name = sampledImageStencilSampleCounts, type = (VkSampleCountFlags), offset = 408, size = 4
    name = storageImageSampleCounts, type = (VkSampleCountFlags), offset = 412, size = 4
    name = maxSampleMaskWords, type = (uint32_t), offset = 416, size = 4
    name = timestampComputeAndGraphics, type = (VkBool32), offset = 420, size = 4
    name = timestampPeriod, type = (float), offset = 424, size = 4
    name = maxClipDistances, type = (uint32_t), offset = 428, size = 4
    name = maxCullDistances, type = (uint32_t), offset = 432, size = 4
    name = maxCombinedClipAndCullDistances, type = (uint32_t), offset = 436, size = 4
    name = discreteQueuePriorities, type = (uint32_t), offset = 440, size = 4
    name = pointSizeRange, type = (float[2]), offset = 444, size = 8
    name = lineWidthRange, type = (float[2]), offset = 452, size = 8
    name = pointSizeGranularity, type = (float), offset = 460, size = 4
    name = lineWidthGranularity, type = (float), offset = 464, size = 4
    name = strictLines, type = (VkBool32), offset = 468, size = 4
    name = standardSampleLocations, type = (VkBool32), offset = 472, size = 4
    padding (4 bytes)
    name = optimalBufferCopyOffsetAlignment, type = (VkDeviceSize), offset = 480, size = 8
    name = optimalBufferCopyRowPitchAlignment, type = (VkDeviceSize), offset = 488, size = 8
    name = nonCoherentAtomSize, type = (VkDeviceSize), offset = 496, size = 8
} ; size: 504

TYPEDEF VkPhysicalDeviceLimits = struct VkPhysicalDeviceLimits

struct VkPhysicalDeviceLimits {
    name = maxImageDimension1D, type = (uint32_t), offset = 0, size = 4
    name = maxImageDimension2D, type = (uint32_t), offset = 4, size = 4
    name = maxImageDimension3D, type = (uint32_t), offset = 8, size = 4
    name = maxImageDimensionCube, type = (uint32_t), offset = 12, size = 4
    name = maxImageArrayLayers, type = (uint32_t), offset = 16, size = 4
    name = maxTexelBufferElements, type = (uint32_t), offset = 20, size = 4
    name = maxUniformBufferRange, type = (uint32_t), offset = 24, size = 4
    name = maxStorageBufferRange, type = (uint32_t), offset = 28, size = 4
    name = maxPushConstantsSize, type = (uint32_t), offset = 32, size = 4
    name = maxMemoryAllocationCount, type = (uint32_t), offset = 36, size = 4
    name = maxSamplerAllocationCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = bufferImageGranularity, type = (VkDeviceSize), offset = 48, size = 8
    name = sparseAddressSpaceSize, type = (VkDeviceSize), offset = 56, size = 8
    name = maxBoundDescriptorSets, type = (uint32_t), offset = 64, size = 4
    name = maxPerStageDescriptorSamplers, type = (uint32_t), offset = 68, size = 4
    name = maxPerStageDescriptorUniformBuffers, type = (uint32_t), offset = 72, size = 4
    name = maxPerStageDescriptorStorageBuffers, type = (uint32_t), offset = 76, size = 4
    name = maxPerStageDescriptorSampledImages, type = (uint32_t), offset = 80, size = 4
    name = maxPerStageDescriptorStorageImages, type = (uint32_t), offset = 84, size = 4
    name = maxPerStageDescriptorInputAttachments, type = (uint32_t), offset = 88, size = 4
    name = maxPerStageResources, type = (uint32_t), offset = 92, size = 4
    name = maxDescriptorSetSamplers, type = (uint32_t), offset = 96, size = 4
    name = maxDescriptorSetUniformBuffers, type = (uint32_t), offset = 100, size = 4
    name = maxDescriptorSetUniformBuffersDynamic, type = (uint32_t), offset = 104, size = 4
    name = maxDescriptorSetStorageBuffers, type = (uint32_t), offset = 108, size = 4
    name = maxDescriptorSetStorageBuffersDynamic, type = (uint32_t), offset = 112, size = 4
    name = maxDescriptorSetSampledImages, type = (uint32_t), offset = 116, size = 4
    name = maxDescriptorSetStorageImages, type = (uint32_t), offset = 120, size = 4
    name = maxDescriptorSetInputAttachments, type = (uint32_t), offset = 124, size = 4
    name = maxVertexInputAttributes, type = (uint32_t), offset = 128, size = 4
    name = maxVertexInputBindings, type = (uint32_t), offset = 132, size = 4
    name = maxVertexInputAttributeOffset, type = (uint32_t), offset = 136, size = 4
    name = maxVertexInputBindingStride, type = (uint32_t), offset = 140, size = 4
    name = maxVertexOutputComponents, type = (uint32_t), offset = 144, size = 4
    name = maxTessellationGenerationLevel, type = (uint32_t), offset = 148, size = 4
    name = maxTessellationPatchSize, type = (uint32_t), offset = 152, size = 4
    name = maxTessellationControlPerVertexInputComponents, type = (uint32_t), offset = 156, size = 4
    name = maxTessellationControlPerVertexOutputComponents, type = (uint32_t), offset = 160, size = 4
    name = maxTessellationControlPerPatchOutputComponents, type = (uint32_t), offset = 164, size = 4
    name = maxTessellationControlTotalOutputComponents, type = (uint32_t), offset = 168, size = 4
    name = maxTessellationEvaluationInputComponents, type = (uint32_t), offset = 172, size = 4
    name = maxTessellationEvaluationOutputComponents, type = (uint32_t), offset = 176, size = 4
    name = maxGeometryShaderInvocations, type = (uint32_t), offset = 180, size = 4
    name = maxGeometryInputComponents, type = (uint32_t), offset = 184, size = 4
    name = maxGeometryOutputComponents, type = (uint32_t), offset = 188, size = 4
    name = maxGeometryOutputVertices, type = (uint32_t), offset = 192, size = 4
    name = maxGeometryTotalOutputComponents, type = (uint32_t), offset = 196, size = 4
    name = maxFragmentInputComponents, type = (uint32_t), offset = 200, size = 4
    name = maxFragmentOutputAttachments, type = (uint32_t), offset = 204, size = 4
    name = maxFragmentDualSrcAttachments, type = (uint32_t), offset = 208, size = 4
    name = maxFragmentCombinedOutputResources, type = (uint32_t), offset = 212, size = 4
    name = maxComputeSharedMemorySize, type = (uint32_t), offset = 216, size = 4
    name = maxComputeWorkGroupCount, type = (uint32_t[3]), offset = 220, size = 12
    name = maxComputeWorkGroupInvocations, type = (uint32_t), offset = 232, size = 4
    name = maxComputeWorkGroupSize, type = (uint32_t[3]), offset = 236, size = 12
    name = subPixelPrecisionBits, type = (uint32_t), offset = 248, size = 4
    name = subTexelPrecisionBits, type = (uint32_t), offset = 252, size = 4
    name = mipmapPrecisionBits, type = (uint32_t), offset = 256, size = 4
    name = maxDrawIndexedIndexValue, type = (uint32_t), offset = 260, size = 4
    name = maxDrawIndirectCount, type = (uint32_t), offset = 264, size = 4
    name = maxSamplerLodBias, type = (float), offset = 268, size = 4
    name = maxSamplerAnisotropy, type = (float), offset = 272, size = 4
    name = maxViewports, type = (uint32_t), offset = 276, size = 4
    name = maxViewportDimensions, type = (uint32_t[2]), offset = 280, size = 8
    name = viewportBoundsRange, type = (float[2]), offset = 288, size = 8
    name = viewportSubPixelBits, type = (uint32_t), offset = 296, size = 4
    padding (4 bytes)
    name = minMemoryMapAlignment, type = (size_t), offset = 304, size = 8
    name = minTexelBufferOffsetAlignment, type = (VkDeviceSize), offset = 312, size = 8
    name = minUniformBufferOffsetAlignment, type = (VkDeviceSize), offset = 320, size = 8
    name = minStorageBufferOffsetAlignment, type = (VkDeviceSize), offset = 328, size = 8
    name = minTexelOffset, type = (int32_t), offset = 336, size = 4
    name = maxTexelOffset, type = (uint32_t), offset = 340, size = 4
    name = minTexelGatherOffset, type = (int32_t), offset = 344, size = 4
    name = maxTexelGatherOffset, type = (uint32_t), offset = 348, size = 4
    name = minInterpolationOffset, type = (float), offset = 352, size = 4
    name = maxInterpolationOffset, type = (float), offset = 356, size = 4
    name = subPixelInterpolationOffsetBits, type = (uint32_t), offset = 360, size = 4
    name = maxFramebufferWidth, type = (uint32_t), offset = 364, size = 4
    name = maxFramebufferHeight, type = (uint32_t), offset = 368, size = 4
    name = maxFramebufferLayers, type = (uint32_t), offset = 372, size = 4
    name = framebufferColorSampleCounts, type = (VkSampleCountFlags), offset = 376, size = 4
    name = framebufferDepthSampleCounts, type = (VkSampleCountFlags), offset = 380, size = 4
    name = framebufferStencilSampleCounts, type = (VkSampleCountFlags), offset = 384, size = 4
    name = framebufferNoAttachmentsSampleCounts, type = (VkSampleCountFlags), offset = 388, size = 4
    name = maxColorAttachments, type = (uint32_t), offset = 392, size = 4
    name = sampledImageColorSampleCounts, type = (VkSampleCountFlags), offset = 396, size = 4
    name = sampledImageIntegerSampleCounts, type = (VkSampleCountFlags), offset = 400, size = 4
    name = sampledImageDepthSampleCounts, type = (VkSampleCountFlags), offset = 404, size = 4
    name = sampledImageStencilSampleCounts, type = (VkSampleCountFlags), offset = 408, size = 4
    name = storageImageSampleCounts, type = (VkSampleCountFlags), offset = 412, size = 4
    name = maxSampleMaskWords, type = (uint32_t), offset = 416, size = 4
    name = timestampComputeAndGraphics, type = (VkBool32), offset = 420, size = 4
    name = timestampPeriod, type = (float), offset = 424, size = 4
    name = maxClipDistances, type = (uint32_t), offset = 428, size = 4
    name = maxCullDistances, type = (uint32_t), offset = 432, size = 4
    name = maxCombinedClipAndCullDistances, type = (uint32_t), offset = 436, size = 4
    name = discreteQueuePriorities, type = (uint32_t), offset = 440, size = 4
    name = pointSizeRange, type = (float[2]), offset = 444, size = 8
    name = lineWidthRange, type = (float[2]), offset = 452, size = 8
    name = pointSizeGranularity, type = (float), offset = 460, size = 4
    name = lineWidthGranularity, type = (float), offset = 464, size = 4
    name = strictLines, type = (VkBool32), offset = 468, size = 4
    name = standardSampleLocations, type = (VkBool32), offset = 472, size = 4
    padding (4 bytes)
    name = optimalBufferCopyOffsetAlignment, type = (VkDeviceSize), offset = 480, size = 8
    name = optimalBufferCopyRowPitchAlignment, type = (VkDeviceSize), offset = 488, size = 8
    name = nonCoherentAtomSize, type = (VkDeviceSize), offset = 496, size = 8
} ; size: 504

struct VkPhysicalDeviceMemoryProperties {
    name = memoryTypeCount, type = (uint32_t), offset = 0, size = 4
    name = memoryTypes, type = (VkMemoryType[32]), offset = 4, size = 256
    name = memoryHeapCount, type = (uint32_t), offset = 260, size = 4
    name = memoryHeaps, type = (VkMemoryHeap[16]), offset = 264, size = 256
} ; size: 520

TYPEDEF VkPhysicalDeviceMemoryProperties = struct VkPhysicalDeviceMemoryProperties

struct VkPhysicalDeviceMemoryProperties {
    name = memoryTypeCount, type = (uint32_t), offset = 0, size = 4
    name = memoryTypes, type = (VkMemoryType[32]), offset = 4, size = 256
    name = memoryHeapCount, type = (uint32_t), offset = 260, size = 4
    name = memoryHeaps, type = (VkMemoryHeap[16]), offset = 264, size = 256
} ; size: 520

struct VkPhysicalDeviceSparseProperties {
    name = residencyStandard2DBlockShape, type = (VkBool32), offset = 0, size = 4
    name = residencyStandard2DMultisampleBlockShape, type = (VkBool32), offset = 4, size = 4
    name = residencyStandard3DBlockShape, type = (VkBool32), offset = 8, size = 4
    name = residencyAlignedMipSize, type = (VkBool32), offset = 12, size = 4
    name = residencyNonResidentStrict, type = (VkBool32), offset = 16, size = 4
} ; size: 20

TYPEDEF VkPhysicalDeviceSparseProperties = struct VkPhysicalDeviceSparseProperties

struct VkPhysicalDeviceSparseProperties {
    name = residencyStandard2DBlockShape, type = (VkBool32), offset = 0, size = 4
    name = residencyStandard2DMultisampleBlockShape, type = (VkBool32), offset = 4, size = 4
    name = residencyStandard3DBlockShape, type = (VkBool32), offset = 8, size = 4
    name = residencyAlignedMipSize, type = (VkBool32), offset = 12, size = 4
    name = residencyNonResidentStrict, type = (VkBool32), offset = 16, size = 4
} ; size: 20

struct VkPhysicalDeviceProperties {
    name = apiVersion, type = (uint32_t), offset = 0, size = 4
    name = driverVersion, type = (uint32_t), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = deviceType, type = (VkPhysicalDeviceType), offset = 16, size = 4
    name = deviceName, type = (char[256]), offset = 20, size = 256
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 276, size = 16
    padding (4 bytes)
    name = limits, type = (VkPhysicalDeviceLimits), offset = 296, size = 504
    name = sparseProperties, type = (VkPhysicalDeviceSparseProperties), offset = 800, size = 20
} ; size: 824

TYPEDEF VkPhysicalDeviceProperties = struct VkPhysicalDeviceProperties

struct VkPhysicalDeviceProperties {
    name = apiVersion, type = (uint32_t), offset = 0, size = 4
    name = driverVersion, type = (uint32_t), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = deviceType, type = (VkPhysicalDeviceType), offset = 16, size = 4
    name = deviceName, type = (char[256]), offset = 20, size = 256
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 276, size = 16
    padding (4 bytes)
    name = limits, type = (VkPhysicalDeviceLimits), offset = 296, size = 504
    name = sparseProperties, type = (VkPhysicalDeviceSparseProperties), offset = 800, size = 20
} ; size: 824

struct VkQueueFamilyProperties {
    name = queueFlags, type = (VkQueueFlags), offset = 0, size = 4
    name = queueCount, type = (uint32_t), offset = 4, size = 4
    name = timestampValidBits, type = (uint32_t), offset = 8, size = 4
    name = minImageTransferGranularity, type = (VkExtent3D), offset = 12, size = 12
} ; size: 24

TYPEDEF VkQueueFamilyProperties = struct VkQueueFamilyProperties

struct VkQueueFamilyProperties {
    name = queueFlags, type = (VkQueueFlags), offset = 0, size = 4
    name = queueCount, type = (uint32_t), offset = 4, size = 4
    name = timestampValidBits, type = (uint32_t), offset = 8, size = 4
    name = minImageTransferGranularity, type = (VkExtent3D), offset = 12, size = 12
} ; size: 24

struct VkDeviceQueueCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceQueueCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
    name = queueCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pQueuePriorities, type = (const float *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDeviceQueueCreateInfo = struct VkDeviceQueueCreateInfo

struct VkDeviceQueueCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceQueueCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
    name = queueCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pQueuePriorities, type = (const float *), offset = 32, size = 8
} ; size: 40

struct VkDeviceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceCreateFlags), offset = 16, size = 4
    name = queueCreateInfoCount, type = (uint32_t), offset = 20, size = 4
    name = pQueueCreateInfos, type = (const VkDeviceQueueCreateInfo *), offset = 24, size = 8
    name = enabledLayerCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = ppEnabledLayerNames, type = (const char *const *), offset = 40, size = 8
    name = enabledExtensionCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = ppEnabledExtensionNames, type = (const char *const *), offset = 56, size = 8
    name = pEnabledFeatures, type = (const VkPhysicalDeviceFeatures *), offset = 64, size = 8
} ; size: 72

TYPEDEF VkDeviceCreateInfo = struct VkDeviceCreateInfo

struct VkDeviceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceCreateFlags), offset = 16, size = 4
    name = queueCreateInfoCount, type = (uint32_t), offset = 20, size = 4
    name = pQueueCreateInfos, type = (const VkDeviceQueueCreateInfo *), offset = 24, size = 8
    name = enabledLayerCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = ppEnabledLayerNames, type = (const char *const *), offset = 40, size = 8
    name = enabledExtensionCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = ppEnabledExtensionNames, type = (const char *const *), offset = 56, size = 8
    name = pEnabledFeatures, type = (const VkPhysicalDeviceFeatures *), offset = 64, size = 8
} ; size: 72

struct VkExtensionProperties {
    name = extensionName, type = (char[256]), offset = 0, size = 256
    name = specVersion, type = (uint32_t), offset = 256, size = 4
} ; size: 260

TYPEDEF VkExtensionProperties = struct VkExtensionProperties

struct VkExtensionProperties {
    name = extensionName, type = (char[256]), offset = 0, size = 256
    name = specVersion, type = (uint32_t), offset = 256, size = 4
} ; size: 260

struct VkLayerProperties {
    name = layerName, type = (char[256]), offset = 0, size = 256
    name = specVersion, type = (uint32_t), offset = 256, size = 4
    name = implementationVersion, type = (uint32_t), offset = 260, size = 4
    name = description, type = (char[256]), offset = 264, size = 256
} ; size: 520

TYPEDEF VkLayerProperties = struct VkLayerProperties

struct VkLayerProperties {
    name = layerName, type = (char[256]), offset = 0, size = 256
    name = specVersion, type = (uint32_t), offset = 256, size = 4
    name = implementationVersion, type = (uint32_t), offset = 260, size = 4
    name = description, type = (char[256]), offset = 264, size = 256
} ; size: 520

struct VkSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = pWaitDstStageMask, type = (const VkPipelineStageFlags *), offset = 32, size = 8
    name = commandBufferCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pCommandBuffers, type = (const VkCommandBuffer *), offset = 48, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pSignalSemaphores, type = (const VkSemaphore *), offset = 64, size = 8
} ; size: 72

TYPEDEF VkSubmitInfo = struct VkSubmitInfo

struct VkSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = pWaitDstStageMask, type = (const VkPipelineStageFlags *), offset = 32, size = 8
    name = commandBufferCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pCommandBuffers, type = (const VkCommandBuffer *), offset = 48, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pSignalSemaphores, type = (const VkSemaphore *), offset = 64, size = 8
} ; size: 72

struct VkMappedMemoryRange {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = offset, type = (VkDeviceSize), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkMappedMemoryRange = struct VkMappedMemoryRange

struct VkMappedMemoryRange {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = offset, type = (VkDeviceSize), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkMemoryAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = allocationSize, type = (VkDeviceSize), offset = 16, size = 8
    name = memoryTypeIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkMemoryAllocateInfo = struct VkMemoryAllocateInfo

struct VkMemoryAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = allocationSize, type = (VkDeviceSize), offset = 16, size = 8
    name = memoryTypeIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkMemoryRequirements {
    name = size, type = (VkDeviceSize), offset = 0, size = 8
    name = alignment, type = (VkDeviceSize), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkMemoryRequirements = struct VkMemoryRequirements

struct VkMemoryRequirements {
    name = size, type = (VkDeviceSize), offset = 0, size = 8
    name = alignment, type = (VkDeviceSize), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkSparseMemoryBind {
    name = resourceOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = size, type = (VkDeviceSize), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = flags, type = (VkSparseMemoryBindFlags), offset = 32, size = 4
} ; size: 40

TYPEDEF VkSparseMemoryBind = struct VkSparseMemoryBind

struct VkSparseMemoryBind {
    name = resourceOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = size, type = (VkDeviceSize), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = flags, type = (VkSparseMemoryBindFlags), offset = 32, size = 4
} ; size: 40

struct VkSparseBufferMemoryBindInfo {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseMemoryBind *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSparseBufferMemoryBindInfo = struct VkSparseBufferMemoryBindInfo

struct VkSparseBufferMemoryBindInfo {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseMemoryBind *), offset = 16, size = 8
} ; size: 24

struct VkSparseImageOpaqueMemoryBindInfo {
    name = image, type = (VkImage), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseMemoryBind *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSparseImageOpaqueMemoryBindInfo = struct VkSparseImageOpaqueMemoryBindInfo

struct VkSparseImageOpaqueMemoryBindInfo {
    name = image, type = (VkImage), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseMemoryBind *), offset = 16, size = 8
} ; size: 24

struct VkImageSubresource {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = mipLevel, type = (uint32_t), offset = 4, size = 4
    name = arrayLayer, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkImageSubresource = struct VkImageSubresource

struct VkImageSubresource {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = mipLevel, type = (uint32_t), offset = 4, size = 4
    name = arrayLayer, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkSparseImageMemoryBind {
    name = subresource, type = (VkImageSubresource), offset = 0, size = 12
    name = offset, type = (VkOffset3D), offset = 12, size = 12
    name = extent, type = (VkExtent3D), offset = 24, size = 12
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 40, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 48, size = 8
    name = flags, type = (VkSparseMemoryBindFlags), offset = 56, size = 4
} ; size: 64

TYPEDEF VkSparseImageMemoryBind = struct VkSparseImageMemoryBind

struct VkSparseImageMemoryBind {
    name = subresource, type = (VkImageSubresource), offset = 0, size = 12
    name = offset, type = (VkOffset3D), offset = 12, size = 12
    name = extent, type = (VkExtent3D), offset = 24, size = 12
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 40, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 48, size = 8
    name = flags, type = (VkSparseMemoryBindFlags), offset = 56, size = 4
} ; size: 64

struct VkSparseImageMemoryBindInfo {
    name = image, type = (VkImage), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseImageMemoryBind *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSparseImageMemoryBindInfo = struct VkSparseImageMemoryBindInfo

struct VkSparseImageMemoryBindInfo {
    name = image, type = (VkImage), offset = 0, size = 8
    name = bindCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pBinds, type = (const VkSparseImageMemoryBind *), offset = 16, size = 8
} ; size: 24

struct VkBindSparseInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = bufferBindCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pBufferBinds, type = (const VkSparseBufferMemoryBindInfo *), offset = 40, size = 8
    name = imageOpaqueBindCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pImageOpaqueBinds, type = (const VkSparseImageOpaqueMemoryBindInfo *), offset = 56, size = 8
    name = imageBindCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pImageBinds, type = (const VkSparseImageMemoryBindInfo *), offset = 72, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 80, size = 4
    padding (4 bytes)
    name = pSignalSemaphores, type = (const VkSemaphore *), offset = 88, size = 8
} ; size: 96

TYPEDEF VkBindSparseInfo = struct VkBindSparseInfo

struct VkBindSparseInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = bufferBindCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pBufferBinds, type = (const VkSparseBufferMemoryBindInfo *), offset = 40, size = 8
    name = imageOpaqueBindCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pImageOpaqueBinds, type = (const VkSparseImageOpaqueMemoryBindInfo *), offset = 56, size = 8
    name = imageBindCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pImageBinds, type = (const VkSparseImageMemoryBindInfo *), offset = 72, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 80, size = 4
    padding (4 bytes)
    name = pSignalSemaphores, type = (const VkSemaphore *), offset = 88, size = 8
} ; size: 96

struct VkSparseImageFormatProperties {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = imageGranularity, type = (VkExtent3D), offset = 4, size = 12
    name = flags, type = (VkSparseImageFormatFlags), offset = 16, size = 4
} ; size: 20

TYPEDEF VkSparseImageFormatProperties = struct VkSparseImageFormatProperties

struct VkSparseImageFormatProperties {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = imageGranularity, type = (VkExtent3D), offset = 4, size = 12
    name = flags, type = (VkSparseImageFormatFlags), offset = 16, size = 4
} ; size: 20

struct VkSparseImageMemoryRequirements {
    name = formatProperties, type = (VkSparseImageFormatProperties), offset = 0, size = 20
    name = imageMipTailFirstLod, type = (uint32_t), offset = 20, size = 4
    name = imageMipTailSize, type = (VkDeviceSize), offset = 24, size = 8
    name = imageMipTailOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = imageMipTailStride, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

TYPEDEF VkSparseImageMemoryRequirements = struct VkSparseImageMemoryRequirements

struct VkSparseImageMemoryRequirements {
    name = formatProperties, type = (VkSparseImageFormatProperties), offset = 0, size = 20
    name = imageMipTailFirstLod, type = (uint32_t), offset = 20, size = 4
    name = imageMipTailSize, type = (VkDeviceSize), offset = 24, size = 8
    name = imageMipTailOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = imageMipTailStride, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

struct VkFenceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFenceCreateFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkFenceCreateInfo = struct VkFenceCreateInfo

struct VkFenceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFenceCreateFlags), offset = 16, size = 4
} ; size: 24

struct VkSemaphoreCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSemaphoreCreateFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSemaphoreCreateInfo = struct VkSemaphoreCreateInfo

struct VkSemaphoreCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSemaphoreCreateFlags), offset = 16, size = 4
} ; size: 24

struct VkEventCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkEventCreateFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkEventCreateInfo = struct VkEventCreateInfo

struct VkEventCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkEventCreateFlags), offset = 16, size = 4
} ; size: 24

struct VkQueryPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkQueryPoolCreateFlags), offset = 16, size = 4
    name = queryType, type = (VkQueryType), offset = 20, size = 4
    name = queryCount, type = (uint32_t), offset = 24, size = 4
    name = pipelineStatistics, type = (VkQueryPipelineStatisticFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF VkQueryPoolCreateInfo = struct VkQueryPoolCreateInfo

struct VkQueryPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkQueryPoolCreateFlags), offset = 16, size = 4
    name = queryType, type = (VkQueryType), offset = 20, size = 4
    name = queryCount, type = (uint32_t), offset = 24, size = 4
    name = pipelineStatistics, type = (VkQueryPipelineStatisticFlags), offset = 28, size = 4
} ; size: 32

struct VkBufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = size, type = (VkDeviceSize), offset = 24, size = 8
    name = usage, type = (VkBufferUsageFlags), offset = 32, size = 4
    name = sharingMode, type = (VkSharingMode), offset = 36, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkBufferCreateInfo = struct VkBufferCreateInfo

struct VkBufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = size, type = (VkDeviceSize), offset = 24, size = 8
    name = usage, type = (VkBufferUsageFlags), offset = 32, size = 4
    name = sharingMode, type = (VkSharingMode), offset = 36, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

struct VkBufferViewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferViewCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = format, type = (VkFormat), offset = 32, size = 4
    padding (4 bytes)
    name = offset, type = (VkDeviceSize), offset = 40, size = 8
    name = range, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

TYPEDEF VkBufferViewCreateInfo = struct VkBufferViewCreateInfo

struct VkBufferViewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferViewCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = format, type = (VkFormat), offset = 32, size = 4
    padding (4 bytes)
    name = offset, type = (VkDeviceSize), offset = 40, size = 8
    name = range, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

struct VkImageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCreateFlags), offset = 16, size = 4
    name = imageType, type = (VkImageType), offset = 20, size = 4
    name = format, type = (VkFormat), offset = 24, size = 4
    name = extent, type = (VkExtent3D), offset = 28, size = 12
    name = mipLevels, type = (uint32_t), offset = 40, size = 4
    name = arrayLayers, type = (uint32_t), offset = 44, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 48, size = 4
    name = tiling, type = (VkImageTiling), offset = 52, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 56, size = 4
    name = sharingMode, type = (VkSharingMode), offset = 60, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 72, size = 8
    name = initialLayout, type = (VkImageLayout), offset = 80, size = 4
} ; size: 88

TYPEDEF VkImageCreateInfo = struct VkImageCreateInfo

struct VkImageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCreateFlags), offset = 16, size = 4
    name = imageType, type = (VkImageType), offset = 20, size = 4
    name = format, type = (VkFormat), offset = 24, size = 4
    name = extent, type = (VkExtent3D), offset = 28, size = 12
    name = mipLevels, type = (uint32_t), offset = 40, size = 4
    name = arrayLayers, type = (uint32_t), offset = 44, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 48, size = 4
    name = tiling, type = (VkImageTiling), offset = 52, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 56, size = 4
    name = sharingMode, type = (VkSharingMode), offset = 60, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 72, size = 8
    name = initialLayout, type = (VkImageLayout), offset = 80, size = 4
} ; size: 88

struct VkSubresourceLayout {
    name = offset, type = (VkDeviceSize), offset = 0, size = 8
    name = size, type = (VkDeviceSize), offset = 8, size = 8
    name = rowPitch, type = (VkDeviceSize), offset = 16, size = 8
    name = arrayPitch, type = (VkDeviceSize), offset = 24, size = 8
    name = depthPitch, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkSubresourceLayout = struct VkSubresourceLayout

struct VkSubresourceLayout {
    name = offset, type = (VkDeviceSize), offset = 0, size = 8
    name = size, type = (VkDeviceSize), offset = 8, size = 8
    name = rowPitch, type = (VkDeviceSize), offset = 16, size = 8
    name = arrayPitch, type = (VkDeviceSize), offset = 24, size = 8
    name = depthPitch, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkComponentMapping {
    name = r, type = (VkComponentSwizzle), offset = 0, size = 4
    name = g, type = (VkComponentSwizzle), offset = 4, size = 4
    name = b, type = (VkComponentSwizzle), offset = 8, size = 4
    name = a, type = (VkComponentSwizzle), offset = 12, size = 4
} ; size: 16

TYPEDEF VkComponentMapping = struct VkComponentMapping

struct VkComponentMapping {
    name = r, type = (VkComponentSwizzle), offset = 0, size = 4
    name = g, type = (VkComponentSwizzle), offset = 4, size = 4
    name = b, type = (VkComponentSwizzle), offset = 8, size = 4
    name = a, type = (VkComponentSwizzle), offset = 12, size = 4
} ; size: 16

struct VkImageViewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageViewCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = image, type = (VkImage), offset = 24, size = 8
    name = viewType, type = (VkImageViewType), offset = 32, size = 4
    name = format, type = (VkFormat), offset = 36, size = 4
    name = components, type = (VkComponentMapping), offset = 40, size = 16
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 56, size = 20
} ; size: 80

TYPEDEF VkImageViewCreateInfo = struct VkImageViewCreateInfo

struct VkImageViewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageViewCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = image, type = (VkImage), offset = 24, size = 8
    name = viewType, type = (VkImageViewType), offset = 32, size = 4
    name = format, type = (VkFormat), offset = 36, size = 4
    name = components, type = (VkComponentMapping), offset = 40, size = 16
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 56, size = 20
} ; size: 80

struct VkShaderModuleCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkShaderModuleCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = codeSize, type = (size_t), offset = 24, size = 8
    name = pCode, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkShaderModuleCreateInfo = struct VkShaderModuleCreateInfo

struct VkShaderModuleCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkShaderModuleCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = codeSize, type = (size_t), offset = 24, size = 8
    name = pCode, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

struct VkPipelineCacheCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCacheCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = initialDataSize, type = (size_t), offset = 24, size = 8
    name = pInitialData, type = (const void *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPipelineCacheCreateInfo = struct VkPipelineCacheCreateInfo

struct VkPipelineCacheCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCacheCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = initialDataSize, type = (size_t), offset = 24, size = 8
    name = pInitialData, type = (const void *), offset = 32, size = 8
} ; size: 40

struct VkSpecializationMapEntry {
    name = constantID, type = (uint32_t), offset = 0, size = 4
    name = offset, type = (uint32_t), offset = 4, size = 4
    name = size, type = (size_t), offset = 8, size = 8
} ; size: 16

TYPEDEF VkSpecializationMapEntry = struct VkSpecializationMapEntry

struct VkSpecializationMapEntry {
    name = constantID, type = (uint32_t), offset = 0, size = 4
    name = offset, type = (uint32_t), offset = 4, size = 4
    name = size, type = (size_t), offset = 8, size = 8
} ; size: 16

struct VkSpecializationInfo {
    name = mapEntryCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pMapEntries, type = (const VkSpecializationMapEntry *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSpecializationInfo = struct VkSpecializationInfo

struct VkSpecializationInfo {
    name = mapEntryCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pMapEntries, type = (const VkSpecializationMapEntry *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkPipelineShaderStageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineShaderStageCreateFlags), offset = 16, size = 4
    name = stage, type = (VkShaderStageFlagBits), offset = 20, size = 4
    name = module, type = (VkShaderModule), offset = 24, size = 8
    name = pName, type = (const char *), offset = 32, size = 8
    name = pSpecializationInfo, type = (const VkSpecializationInfo *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPipelineShaderStageCreateInfo = struct VkPipelineShaderStageCreateInfo

struct VkPipelineShaderStageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineShaderStageCreateFlags), offset = 16, size = 4
    name = stage, type = (VkShaderStageFlagBits), offset = 20, size = 4
    name = module, type = (VkShaderModule), offset = 24, size = 8
    name = pName, type = (const char *), offset = 32, size = 8
    name = pSpecializationInfo, type = (const VkSpecializationInfo *), offset = 40, size = 8
} ; size: 48

struct VkComputePipelineCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = stage, type = (VkPipelineShaderStageCreateInfo), offset = 24, size = 48
    name = layout, type = (VkPipelineLayout), offset = 72, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 80, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 88, size = 4
} ; size: 96

TYPEDEF VkComputePipelineCreateInfo = struct VkComputePipelineCreateInfo

struct VkComputePipelineCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = stage, type = (VkPipelineShaderStageCreateInfo), offset = 24, size = 48
    name = layout, type = (VkPipelineLayout), offset = 72, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 80, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 88, size = 4
} ; size: 96

struct VkVertexInputBindingDescription {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = stride, type = (uint32_t), offset = 4, size = 4
    name = inputRate, type = (VkVertexInputRate), offset = 8, size = 4
} ; size: 12

TYPEDEF VkVertexInputBindingDescription = struct VkVertexInputBindingDescription

struct VkVertexInputBindingDescription {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = stride, type = (uint32_t), offset = 4, size = 4
    name = inputRate, type = (VkVertexInputRate), offset = 8, size = 4
} ; size: 12

struct VkVertexInputAttributeDescription {
    name = location, type = (uint32_t), offset = 0, size = 4
    name = binding, type = (uint32_t), offset = 4, size = 4
    name = format, type = (VkFormat), offset = 8, size = 4
    name = offset, type = (uint32_t), offset = 12, size = 4
} ; size: 16

TYPEDEF VkVertexInputAttributeDescription = struct VkVertexInputAttributeDescription

struct VkVertexInputAttributeDescription {
    name = location, type = (uint32_t), offset = 0, size = 4
    name = binding, type = (uint32_t), offset = 4, size = 4
    name = format, type = (VkFormat), offset = 8, size = 4
    name = offset, type = (uint32_t), offset = 12, size = 4
} ; size: 16

struct VkPipelineVertexInputStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineVertexInputStateCreateFlags), offset = 16, size = 4
    name = vertexBindingDescriptionCount, type = (uint32_t), offset = 20, size = 4
    name = pVertexBindingDescriptions, type = (const VkVertexInputBindingDescription *), offset = 24, size = 8
    name = vertexAttributeDescriptionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pVertexAttributeDescriptions, type = (const VkVertexInputAttributeDescription *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPipelineVertexInputStateCreateInfo = struct VkPipelineVertexInputStateCreateInfo

struct VkPipelineVertexInputStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineVertexInputStateCreateFlags), offset = 16, size = 4
    name = vertexBindingDescriptionCount, type = (uint32_t), offset = 20, size = 4
    name = pVertexBindingDescriptions, type = (const VkVertexInputBindingDescription *), offset = 24, size = 8
    name = vertexAttributeDescriptionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pVertexAttributeDescriptions, type = (const VkVertexInputAttributeDescription *), offset = 40, size = 8
} ; size: 48

struct VkPipelineInputAssemblyStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineInputAssemblyStateCreateFlags), offset = 16, size = 4
    name = topology, type = (VkPrimitiveTopology), offset = 20, size = 4
    name = primitiveRestartEnable, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineInputAssemblyStateCreateInfo = struct VkPipelineInputAssemblyStateCreateInfo

struct VkPipelineInputAssemblyStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineInputAssemblyStateCreateFlags), offset = 16, size = 4
    name = topology, type = (VkPrimitiveTopology), offset = 20, size = 4
    name = primitiveRestartEnable, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPipelineTessellationStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineTessellationStateCreateFlags), offset = 16, size = 4
    name = patchControlPoints, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPipelineTessellationStateCreateInfo = struct VkPipelineTessellationStateCreateInfo

struct VkPipelineTessellationStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineTessellationStateCreateFlags), offset = 16, size = 4
    name = patchControlPoints, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkViewport {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
    name = width, type = (float), offset = 8, size = 4
    name = height, type = (float), offset = 12, size = 4
    name = minDepth, type = (float), offset = 16, size = 4
    name = maxDepth, type = (float), offset = 20, size = 4
} ; size: 24

TYPEDEF VkViewport = struct VkViewport

struct VkViewport {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
    name = width, type = (float), offset = 8, size = 4
    name = height, type = (float), offset = 12, size = 4
    name = minDepth, type = (float), offset = 16, size = 4
    name = maxDepth, type = (float), offset = 20, size = 4
} ; size: 24

struct VkPipelineViewportStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineViewportStateCreateFlags), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewports, type = (const VkViewport *), offset = 24, size = 8
    name = scissorCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pScissors, type = (const VkRect2D *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPipelineViewportStateCreateInfo = struct VkPipelineViewportStateCreateInfo

struct VkPipelineViewportStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineViewportStateCreateFlags), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewports, type = (const VkViewport *), offset = 24, size = 8
    name = scissorCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pScissors, type = (const VkRect2D *), offset = 40, size = 8
} ; size: 48

struct VkPipelineRasterizationStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationStateCreateFlags), offset = 16, size = 4
    name = depthClampEnable, type = (VkBool32), offset = 20, size = 4
    name = rasterizerDiscardEnable, type = (VkBool32), offset = 24, size = 4
    name = polygonMode, type = (VkPolygonMode), offset = 28, size = 4
    name = cullMode, type = (VkCullModeFlags), offset = 32, size = 4
    name = frontFace, type = (VkFrontFace), offset = 36, size = 4
    name = depthBiasEnable, type = (VkBool32), offset = 40, size = 4
    name = depthBiasConstantFactor, type = (float), offset = 44, size = 4
    name = depthBiasClamp, type = (float), offset = 48, size = 4
    name = depthBiasSlopeFactor, type = (float), offset = 52, size = 4
    name = lineWidth, type = (float), offset = 56, size = 4
} ; size: 64

TYPEDEF VkPipelineRasterizationStateCreateInfo = struct VkPipelineRasterizationStateCreateInfo

struct VkPipelineRasterizationStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationStateCreateFlags), offset = 16, size = 4
    name = depthClampEnable, type = (VkBool32), offset = 20, size = 4
    name = rasterizerDiscardEnable, type = (VkBool32), offset = 24, size = 4
    name = polygonMode, type = (VkPolygonMode), offset = 28, size = 4
    name = cullMode, type = (VkCullModeFlags), offset = 32, size = 4
    name = frontFace, type = (VkFrontFace), offset = 36, size = 4
    name = depthBiasEnable, type = (VkBool32), offset = 40, size = 4
    name = depthBiasConstantFactor, type = (float), offset = 44, size = 4
    name = depthBiasClamp, type = (float), offset = 48, size = 4
    name = depthBiasSlopeFactor, type = (float), offset = 52, size = 4
    name = lineWidth, type = (float), offset = 56, size = 4
} ; size: 64

struct VkPipelineMultisampleStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineMultisampleStateCreateFlags), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
    name = sampleShadingEnable, type = (VkBool32), offset = 24, size = 4
    name = minSampleShading, type = (float), offset = 28, size = 4
    name = pSampleMask, type = (const VkSampleMask *), offset = 32, size = 8
    name = alphaToCoverageEnable, type = (VkBool32), offset = 40, size = 4
    name = alphaToOneEnable, type = (VkBool32), offset = 44, size = 4
} ; size: 48

TYPEDEF VkPipelineMultisampleStateCreateInfo = struct VkPipelineMultisampleStateCreateInfo

struct VkPipelineMultisampleStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineMultisampleStateCreateFlags), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
    name = sampleShadingEnable, type = (VkBool32), offset = 24, size = 4
    name = minSampleShading, type = (float), offset = 28, size = 4
    name = pSampleMask, type = (const VkSampleMask *), offset = 32, size = 8
    name = alphaToCoverageEnable, type = (VkBool32), offset = 40, size = 4
    name = alphaToOneEnable, type = (VkBool32), offset = 44, size = 4
} ; size: 48

struct VkStencilOpState {
    name = failOp, type = (VkStencilOp), offset = 0, size = 4
    name = passOp, type = (VkStencilOp), offset = 4, size = 4
    name = depthFailOp, type = (VkStencilOp), offset = 8, size = 4
    name = compareOp, type = (VkCompareOp), offset = 12, size = 4
    name = compareMask, type = (uint32_t), offset = 16, size = 4
    name = writeMask, type = (uint32_t), offset = 20, size = 4
    name = reference, type = (uint32_t), offset = 24, size = 4
} ; size: 28

TYPEDEF VkStencilOpState = struct VkStencilOpState

struct VkStencilOpState {
    name = failOp, type = (VkStencilOp), offset = 0, size = 4
    name = passOp, type = (VkStencilOp), offset = 4, size = 4
    name = depthFailOp, type = (VkStencilOp), offset = 8, size = 4
    name = compareOp, type = (VkCompareOp), offset = 12, size = 4
    name = compareMask, type = (uint32_t), offset = 16, size = 4
    name = writeMask, type = (uint32_t), offset = 20, size = 4
    name = reference, type = (uint32_t), offset = 24, size = 4
} ; size: 28

struct VkPipelineDepthStencilStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDepthStencilStateCreateFlags), offset = 16, size = 4
    name = depthTestEnable, type = (VkBool32), offset = 20, size = 4
    name = depthWriteEnable, type = (VkBool32), offset = 24, size = 4
    name = depthCompareOp, type = (VkCompareOp), offset = 28, size = 4
    name = depthBoundsTestEnable, type = (VkBool32), offset = 32, size = 4
    name = stencilTestEnable, type = (VkBool32), offset = 36, size = 4
    name = front, type = (VkStencilOpState), offset = 40, size = 28
    name = back, type = (VkStencilOpState), offset = 68, size = 28
    name = minDepthBounds, type = (float), offset = 96, size = 4
    name = maxDepthBounds, type = (float), offset = 100, size = 4
} ; size: 104

TYPEDEF VkPipelineDepthStencilStateCreateInfo = struct VkPipelineDepthStencilStateCreateInfo

struct VkPipelineDepthStencilStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDepthStencilStateCreateFlags), offset = 16, size = 4
    name = depthTestEnable, type = (VkBool32), offset = 20, size = 4
    name = depthWriteEnable, type = (VkBool32), offset = 24, size = 4
    name = depthCompareOp, type = (VkCompareOp), offset = 28, size = 4
    name = depthBoundsTestEnable, type = (VkBool32), offset = 32, size = 4
    name = stencilTestEnable, type = (VkBool32), offset = 36, size = 4
    name = front, type = (VkStencilOpState), offset = 40, size = 28
    name = back, type = (VkStencilOpState), offset = 68, size = 28
    name = minDepthBounds, type = (float), offset = 96, size = 4
    name = maxDepthBounds, type = (float), offset = 100, size = 4
} ; size: 104

struct VkPipelineColorBlendAttachmentState {
    name = blendEnable, type = (VkBool32), offset = 0, size = 4
    name = srcColorBlendFactor, type = (VkBlendFactor), offset = 4, size = 4
    name = dstColorBlendFactor, type = (VkBlendFactor), offset = 8, size = 4
    name = colorBlendOp, type = (VkBlendOp), offset = 12, size = 4
    name = srcAlphaBlendFactor, type = (VkBlendFactor), offset = 16, size = 4
    name = dstAlphaBlendFactor, type = (VkBlendFactor), offset = 20, size = 4
    name = alphaBlendOp, type = (VkBlendOp), offset = 24, size = 4
    name = colorWriteMask, type = (VkColorComponentFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPipelineColorBlendAttachmentState = struct VkPipelineColorBlendAttachmentState

struct VkPipelineColorBlendAttachmentState {
    name = blendEnable, type = (VkBool32), offset = 0, size = 4
    name = srcColorBlendFactor, type = (VkBlendFactor), offset = 4, size = 4
    name = dstColorBlendFactor, type = (VkBlendFactor), offset = 8, size = 4
    name = colorBlendOp, type = (VkBlendOp), offset = 12, size = 4
    name = srcAlphaBlendFactor, type = (VkBlendFactor), offset = 16, size = 4
    name = dstAlphaBlendFactor, type = (VkBlendFactor), offset = 20, size = 4
    name = alphaBlendOp, type = (VkBlendOp), offset = 24, size = 4
    name = colorWriteMask, type = (VkColorComponentFlags), offset = 28, size = 4
} ; size: 32

struct VkPipelineColorBlendStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineColorBlendStateCreateFlags), offset = 16, size = 4
    name = logicOpEnable, type = (VkBool32), offset = 20, size = 4
    name = logicOp, type = (VkLogicOp), offset = 24, size = 4
    name = attachmentCount, type = (uint32_t), offset = 28, size = 4
    name = pAttachments, type = (const VkPipelineColorBlendAttachmentState *), offset = 32, size = 8
    name = blendConstants, type = (float[4]), offset = 40, size = 16
} ; size: 56

TYPEDEF VkPipelineColorBlendStateCreateInfo = struct VkPipelineColorBlendStateCreateInfo

struct VkPipelineColorBlendStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineColorBlendStateCreateFlags), offset = 16, size = 4
    name = logicOpEnable, type = (VkBool32), offset = 20, size = 4
    name = logicOp, type = (VkLogicOp), offset = 24, size = 4
    name = attachmentCount, type = (uint32_t), offset = 28, size = 4
    name = pAttachments, type = (const VkPipelineColorBlendAttachmentState *), offset = 32, size = 8
    name = blendConstants, type = (float[4]), offset = 40, size = 16
} ; size: 56

struct VkPipelineDynamicStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDynamicStateCreateFlags), offset = 16, size = 4
    name = dynamicStateCount, type = (uint32_t), offset = 20, size = 4
    name = pDynamicStates, type = (const VkDynamicState *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineDynamicStateCreateInfo = struct VkPipelineDynamicStateCreateInfo

struct VkPipelineDynamicStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDynamicStateCreateFlags), offset = 16, size = 4
    name = dynamicStateCount, type = (uint32_t), offset = 20, size = 4
    name = pDynamicStates, type = (const VkDynamicState *), offset = 24, size = 8
} ; size: 32

struct VkGraphicsPipelineCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = pVertexInputState, type = (const VkPipelineVertexInputStateCreateInfo *), offset = 32, size = 8
    name = pInputAssemblyState, type = (const VkPipelineInputAssemblyStateCreateInfo *), offset = 40, size = 8
    name = pTessellationState, type = (const VkPipelineTessellationStateCreateInfo *), offset = 48, size = 8
    name = pViewportState, type = (const VkPipelineViewportStateCreateInfo *), offset = 56, size = 8
    name = pRasterizationState, type = (const VkPipelineRasterizationStateCreateInfo *), offset = 64, size = 8
    name = pMultisampleState, type = (const VkPipelineMultisampleStateCreateInfo *), offset = 72, size = 8
    name = pDepthStencilState, type = (const VkPipelineDepthStencilStateCreateInfo *), offset = 80, size = 8
    name = pColorBlendState, type = (const VkPipelineColorBlendStateCreateInfo *), offset = 88, size = 8
    name = pDynamicState, type = (const VkPipelineDynamicStateCreateInfo *), offset = 96, size = 8
    name = layout, type = (VkPipelineLayout), offset = 104, size = 8
    name = renderPass, type = (VkRenderPass), offset = 112, size = 8
    name = subpass, type = (uint32_t), offset = 120, size = 4
    padding (4 bytes)
    name = basePipelineHandle, type = (VkPipeline), offset = 128, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 136, size = 4
} ; size: 144

TYPEDEF VkGraphicsPipelineCreateInfo = struct VkGraphicsPipelineCreateInfo

struct VkGraphicsPipelineCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = pVertexInputState, type = (const VkPipelineVertexInputStateCreateInfo *), offset = 32, size = 8
    name = pInputAssemblyState, type = (const VkPipelineInputAssemblyStateCreateInfo *), offset = 40, size = 8
    name = pTessellationState, type = (const VkPipelineTessellationStateCreateInfo *), offset = 48, size = 8
    name = pViewportState, type = (const VkPipelineViewportStateCreateInfo *), offset = 56, size = 8
    name = pRasterizationState, type = (const VkPipelineRasterizationStateCreateInfo *), offset = 64, size = 8
    name = pMultisampleState, type = (const VkPipelineMultisampleStateCreateInfo *), offset = 72, size = 8
    name = pDepthStencilState, type = (const VkPipelineDepthStencilStateCreateInfo *), offset = 80, size = 8
    name = pColorBlendState, type = (const VkPipelineColorBlendStateCreateInfo *), offset = 88, size = 8
    name = pDynamicState, type = (const VkPipelineDynamicStateCreateInfo *), offset = 96, size = 8
    name = layout, type = (VkPipelineLayout), offset = 104, size = 8
    name = renderPass, type = (VkRenderPass), offset = 112, size = 8
    name = subpass, type = (uint32_t), offset = 120, size = 4
    padding (4 bytes)
    name = basePipelineHandle, type = (VkPipeline), offset = 128, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 136, size = 4
} ; size: 144

struct VkPushConstantRange {
    name = stageFlags, type = (VkShaderStageFlags), offset = 0, size = 4
    name = offset, type = (uint32_t), offset = 4, size = 4
    name = size, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkPushConstantRange = struct VkPushConstantRange

struct VkPushConstantRange {
    name = stageFlags, type = (VkShaderStageFlags), offset = 0, size = 4
    name = offset, type = (uint32_t), offset = 4, size = 4
    name = size, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkPipelineLayoutCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineLayoutCreateFlags), offset = 16, size = 4
    name = setLayoutCount, type = (uint32_t), offset = 20, size = 4
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 24, size = 8
    name = pushConstantRangeCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPushConstantRanges, type = (const VkPushConstantRange *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPipelineLayoutCreateInfo = struct VkPipelineLayoutCreateInfo

struct VkPipelineLayoutCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineLayoutCreateFlags), offset = 16, size = 4
    name = setLayoutCount, type = (uint32_t), offset = 20, size = 4
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 24, size = 8
    name = pushConstantRangeCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPushConstantRanges, type = (const VkPushConstantRange *), offset = 40, size = 8
} ; size: 48

struct VkSamplerCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSamplerCreateFlags), offset = 16, size = 4
    name = magFilter, type = (VkFilter), offset = 20, size = 4
    name = minFilter, type = (VkFilter), offset = 24, size = 4
    name = mipmapMode, type = (VkSamplerMipmapMode), offset = 28, size = 4
    name = addressModeU, type = (VkSamplerAddressMode), offset = 32, size = 4
    name = addressModeV, type = (VkSamplerAddressMode), offset = 36, size = 4
    name = addressModeW, type = (VkSamplerAddressMode), offset = 40, size = 4
    name = mipLodBias, type = (float), offset = 44, size = 4
    name = anisotropyEnable, type = (VkBool32), offset = 48, size = 4
    name = maxAnisotropy, type = (float), offset = 52, size = 4
    name = compareEnable, type = (VkBool32), offset = 56, size = 4
    name = compareOp, type = (VkCompareOp), offset = 60, size = 4
    name = minLod, type = (float), offset = 64, size = 4
    name = maxLod, type = (float), offset = 68, size = 4
    name = borderColor, type = (VkBorderColor), offset = 72, size = 4
    name = unnormalizedCoordinates, type = (VkBool32), offset = 76, size = 4
} ; size: 80

TYPEDEF VkSamplerCreateInfo = struct VkSamplerCreateInfo

struct VkSamplerCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSamplerCreateFlags), offset = 16, size = 4
    name = magFilter, type = (VkFilter), offset = 20, size = 4
    name = minFilter, type = (VkFilter), offset = 24, size = 4
    name = mipmapMode, type = (VkSamplerMipmapMode), offset = 28, size = 4
    name = addressModeU, type = (VkSamplerAddressMode), offset = 32, size = 4
    name = addressModeV, type = (VkSamplerAddressMode), offset = 36, size = 4
    name = addressModeW, type = (VkSamplerAddressMode), offset = 40, size = 4
    name = mipLodBias, type = (float), offset = 44, size = 4
    name = anisotropyEnable, type = (VkBool32), offset = 48, size = 4
    name = maxAnisotropy, type = (float), offset = 52, size = 4
    name = compareEnable, type = (VkBool32), offset = 56, size = 4
    name = compareOp, type = (VkCompareOp), offset = 60, size = 4
    name = minLod, type = (float), offset = 64, size = 4
    name = maxLod, type = (float), offset = 68, size = 4
    name = borderColor, type = (VkBorderColor), offset = 72, size = 4
    name = unnormalizedCoordinates, type = (VkBool32), offset = 76, size = 4
} ; size: 80

struct VkCopyDescriptorSet {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSet, type = (VkDescriptorSet), offset = 16, size = 8
    name = srcBinding, type = (uint32_t), offset = 24, size = 4
    name = srcArrayElement, type = (uint32_t), offset = 28, size = 4
    name = dstSet, type = (VkDescriptorSet), offset = 32, size = 8
    name = dstBinding, type = (uint32_t), offset = 40, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 44, size = 4
    name = descriptorCount, type = (uint32_t), offset = 48, size = 4
} ; size: 56

TYPEDEF VkCopyDescriptorSet = struct VkCopyDescriptorSet

struct VkCopyDescriptorSet {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSet, type = (VkDescriptorSet), offset = 16, size = 8
    name = srcBinding, type = (uint32_t), offset = 24, size = 4
    name = srcArrayElement, type = (uint32_t), offset = 28, size = 4
    name = dstSet, type = (VkDescriptorSet), offset = 32, size = 8
    name = dstBinding, type = (uint32_t), offset = 40, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 44, size = 4
    name = descriptorCount, type = (uint32_t), offset = 48, size = 4
} ; size: 56

struct VkDescriptorBufferInfo {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = offset, type = (VkDeviceSize), offset = 8, size = 8
    name = range, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDescriptorBufferInfo = struct VkDescriptorBufferInfo

struct VkDescriptorBufferInfo {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = offset, type = (VkDeviceSize), offset = 8, size = 8
    name = range, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkDescriptorImageInfo {
    name = sampler, type = (VkSampler), offset = 0, size = 8
    name = imageView, type = (VkImageView), offset = 8, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDescriptorImageInfo = struct VkDescriptorImageInfo

struct VkDescriptorImageInfo {
    name = sampler, type = (VkSampler), offset = 0, size = 8
    name = imageView, type = (VkImageView), offset = 8, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 16, size = 4
} ; size: 24

struct VkDescriptorPoolSize {
    name = type, type = (VkDescriptorType), offset = 0, size = 4
    name = descriptorCount, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkDescriptorPoolSize = struct VkDescriptorPoolSize

struct VkDescriptorPoolSize {
    name = type, type = (VkDescriptorType), offset = 0, size = 4
    name = descriptorCount, type = (uint32_t), offset = 4, size = 4
} ; size: 8

struct VkDescriptorPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorPoolCreateFlags), offset = 16, size = 4
    name = maxSets, type = (uint32_t), offset = 20, size = 4
    name = poolSizeCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPoolSizes, type = (const VkDescriptorPoolSize *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDescriptorPoolCreateInfo = struct VkDescriptorPoolCreateInfo

struct VkDescriptorPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorPoolCreateFlags), offset = 16, size = 4
    name = maxSets, type = (uint32_t), offset = 20, size = 4
    name = poolSizeCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPoolSizes, type = (const VkDescriptorPoolSize *), offset = 32, size = 8
} ; size: 40

struct VkDescriptorSetAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorPool, type = (VkDescriptorPool), offset = 16, size = 8
    name = descriptorSetCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDescriptorSetAllocateInfo = struct VkDescriptorSetAllocateInfo

struct VkDescriptorSetAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorPool, type = (VkDescriptorPool), offset = 16, size = 8
    name = descriptorSetCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 32, size = 8
} ; size: 40

struct VkDescriptorSetLayoutBinding {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 4, size = 4
    name = descriptorCount, type = (uint32_t), offset = 8, size = 4
    name = stageFlags, type = (VkShaderStageFlags), offset = 12, size = 4
    name = pImmutableSamplers, type = (const VkSampler *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDescriptorSetLayoutBinding = struct VkDescriptorSetLayoutBinding

struct VkDescriptorSetLayoutBinding {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 4, size = 4
    name = descriptorCount, type = (uint32_t), offset = 8, size = 4
    name = stageFlags, type = (VkShaderStageFlags), offset = 12, size = 4
    name = pImmutableSamplers, type = (const VkSampler *), offset = 16, size = 8
} ; size: 24

struct VkDescriptorSetLayoutCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorSetLayoutCreateFlags), offset = 16, size = 4
    name = bindingCount, type = (uint32_t), offset = 20, size = 4
    name = pBindings, type = (const VkDescriptorSetLayoutBinding *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorSetLayoutCreateInfo = struct VkDescriptorSetLayoutCreateInfo

struct VkDescriptorSetLayoutCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorSetLayoutCreateFlags), offset = 16, size = 4
    name = bindingCount, type = (uint32_t), offset = 20, size = 4
    name = pBindings, type = (const VkDescriptorSetLayoutBinding *), offset = 24, size = 8
} ; size: 32

struct VkWriteDescriptorSet {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dstSet, type = (VkDescriptorSet), offset = 16, size = 8
    name = dstBinding, type = (uint32_t), offset = 24, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 28, size = 4
    name = descriptorCount, type = (uint32_t), offset = 32, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 36, size = 4
    name = pImageInfo, type = (const VkDescriptorImageInfo *), offset = 40, size = 8
    name = pBufferInfo, type = (const VkDescriptorBufferInfo *), offset = 48, size = 8
    name = pTexelBufferView, type = (const VkBufferView *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkWriteDescriptorSet = struct VkWriteDescriptorSet

struct VkWriteDescriptorSet {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dstSet, type = (VkDescriptorSet), offset = 16, size = 8
    name = dstBinding, type = (uint32_t), offset = 24, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 28, size = 4
    name = descriptorCount, type = (uint32_t), offset = 32, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 36, size = 4
    name = pImageInfo, type = (const VkDescriptorImageInfo *), offset = 40, size = 8
    name = pBufferInfo, type = (const VkDescriptorBufferInfo *), offset = 48, size = 8
    name = pTexelBufferView, type = (const VkBufferView *), offset = 56, size = 8
} ; size: 64

struct VkAttachmentDescription {
    name = flags, type = (VkAttachmentDescriptionFlags), offset = 0, size = 4
    name = format, type = (VkFormat), offset = 4, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 8, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 12, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 16, size = 4
    name = stencilLoadOp, type = (VkAttachmentLoadOp), offset = 20, size = 4
    name = stencilStoreOp, type = (VkAttachmentStoreOp), offset = 24, size = 4
    name = initialLayout, type = (VkImageLayout), offset = 28, size = 4
    name = finalLayout, type = (VkImageLayout), offset = 32, size = 4
} ; size: 36

TYPEDEF VkAttachmentDescription = struct VkAttachmentDescription

struct VkAttachmentDescription {
    name = flags, type = (VkAttachmentDescriptionFlags), offset = 0, size = 4
    name = format, type = (VkFormat), offset = 4, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 8, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 12, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 16, size = 4
    name = stencilLoadOp, type = (VkAttachmentLoadOp), offset = 20, size = 4
    name = stencilStoreOp, type = (VkAttachmentStoreOp), offset = 24, size = 4
    name = initialLayout, type = (VkImageLayout), offset = 28, size = 4
    name = finalLayout, type = (VkImageLayout), offset = 32, size = 4
} ; size: 36

struct VkAttachmentReference {
    name = attachment, type = (uint32_t), offset = 0, size = 4
    name = layout, type = (VkImageLayout), offset = 4, size = 4
} ; size: 8

TYPEDEF VkAttachmentReference = struct VkAttachmentReference

struct VkAttachmentReference {
    name = attachment, type = (uint32_t), offset = 0, size = 4
    name = layout, type = (VkImageLayout), offset = 4, size = 4
} ; size: 8

struct VkFramebufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFramebufferCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = renderPass, type = (VkRenderPass), offset = 24, size = 8
    name = attachmentCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pAttachments, type = (const VkImageView *), offset = 40, size = 8
    name = width, type = (uint32_t), offset = 48, size = 4
    name = height, type = (uint32_t), offset = 52, size = 4
    name = layers, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF VkFramebufferCreateInfo = struct VkFramebufferCreateInfo

struct VkFramebufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFramebufferCreateFlags), offset = 16, size = 4
    padding (4 bytes)
    name = renderPass, type = (VkRenderPass), offset = 24, size = 8
    name = attachmentCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pAttachments, type = (const VkImageView *), offset = 40, size = 8
    name = width, type = (uint32_t), offset = 48, size = 4
    name = height, type = (uint32_t), offset = 52, size = 4
    name = layers, type = (uint32_t), offset = 56, size = 4
} ; size: 64

struct VkSubpassDescription {
    name = flags, type = (VkSubpassDescriptionFlags), offset = 0, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 4, size = 4
    name = inputAttachmentCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pInputAttachments, type = (const VkAttachmentReference *), offset = 16, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pColorAttachments, type = (const VkAttachmentReference *), offset = 32, size = 8
    name = pResolveAttachments, type = (const VkAttachmentReference *), offset = 40, size = 8
    name = pDepthStencilAttachment, type = (const VkAttachmentReference *), offset = 48, size = 8
    name = preserveAttachmentCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pPreserveAttachments, type = (const uint32_t *), offset = 64, size = 8
} ; size: 72

TYPEDEF VkSubpassDescription = struct VkSubpassDescription

struct VkSubpassDescription {
    name = flags, type = (VkSubpassDescriptionFlags), offset = 0, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 4, size = 4
    name = inputAttachmentCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pInputAttachments, type = (const VkAttachmentReference *), offset = 16, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pColorAttachments, type = (const VkAttachmentReference *), offset = 32, size = 8
    name = pResolveAttachments, type = (const VkAttachmentReference *), offset = 40, size = 8
    name = pDepthStencilAttachment, type = (const VkAttachmentReference *), offset = 48, size = 8
    name = preserveAttachmentCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pPreserveAttachments, type = (const uint32_t *), offset = 64, size = 8
} ; size: 72

struct VkSubpassDependency {
    name = srcSubpass, type = (uint32_t), offset = 0, size = 4
    name = dstSubpass, type = (uint32_t), offset = 4, size = 4
    name = srcStageMask, type = (VkPipelineStageFlags), offset = 8, size = 4
    name = dstStageMask, type = (VkPipelineStageFlags), offset = 12, size = 4
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = dependencyFlags, type = (VkDependencyFlags), offset = 24, size = 4
} ; size: 28

TYPEDEF VkSubpassDependency = struct VkSubpassDependency

struct VkSubpassDependency {
    name = srcSubpass, type = (uint32_t), offset = 0, size = 4
    name = dstSubpass, type = (uint32_t), offset = 4, size = 4
    name = srcStageMask, type = (VkPipelineStageFlags), offset = 8, size = 4
    name = dstStageMask, type = (VkPipelineStageFlags), offset = 12, size = 4
    name = srcAccessMask, type = (VkAccessFlags), offset = 16, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 20, size = 4
    name = dependencyFlags, type = (VkDependencyFlags), offset = 24, size = 4
} ; size: 28

struct VkRenderPassCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderPassCreateFlags), offset = 16, size = 4
    name = attachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pAttachments, type = (const VkAttachmentDescription *), offset = 24, size = 8
    name = subpassCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSubpasses, type = (const VkSubpassDescription *), offset = 40, size = 8
    name = dependencyCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDependencies, type = (const VkSubpassDependency *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkRenderPassCreateInfo = struct VkRenderPassCreateInfo

struct VkRenderPassCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderPassCreateFlags), offset = 16, size = 4
    name = attachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pAttachments, type = (const VkAttachmentDescription *), offset = 24, size = 8
    name = subpassCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSubpasses, type = (const VkSubpassDescription *), offset = 40, size = 8
    name = dependencyCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDependencies, type = (const VkSubpassDependency *), offset = 56, size = 8
} ; size: 64

struct VkCommandPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkCommandPoolCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkCommandPoolCreateInfo = struct VkCommandPoolCreateInfo

struct VkCommandPoolCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkCommandPoolCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkCommandBufferAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = commandPool, type = (VkCommandPool), offset = 16, size = 8
    name = level, type = (VkCommandBufferLevel), offset = 24, size = 4
    name = commandBufferCount, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkCommandBufferAllocateInfo = struct VkCommandBufferAllocateInfo

struct VkCommandBufferAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = commandPool, type = (VkCommandPool), offset = 16, size = 8
    name = level, type = (VkCommandBufferLevel), offset = 24, size = 4
    name = commandBufferCount, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkCommandBufferInheritanceInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = subpass, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = framebuffer, type = (VkFramebuffer), offset = 32, size = 8
    name = occlusionQueryEnable, type = (VkBool32), offset = 40, size = 4
    name = queryFlags, type = (VkQueryControlFlags), offset = 44, size = 4
    name = pipelineStatistics, type = (VkQueryPipelineStatisticFlags), offset = 48, size = 4
} ; size: 56

TYPEDEF VkCommandBufferInheritanceInfo = struct VkCommandBufferInheritanceInfo

struct VkCommandBufferInheritanceInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = subpass, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = framebuffer, type = (VkFramebuffer), offset = 32, size = 8
    name = occlusionQueryEnable, type = (VkBool32), offset = 40, size = 4
    name = queryFlags, type = (VkQueryControlFlags), offset = 44, size = 4
    name = pipelineStatistics, type = (VkQueryPipelineStatisticFlags), offset = 48, size = 4
} ; size: 56

struct VkCommandBufferBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkCommandBufferUsageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = pInheritanceInfo, type = (const VkCommandBufferInheritanceInfo *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCommandBufferBeginInfo = struct VkCommandBufferBeginInfo

struct VkCommandBufferBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkCommandBufferUsageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = pInheritanceInfo, type = (const VkCommandBufferInheritanceInfo *), offset = 24, size = 8
} ; size: 32

struct VkBufferCopy {
    name = srcOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = dstOffset, type = (VkDeviceSize), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferCopy = struct VkBufferCopy

struct VkBufferCopy {
    name = srcOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = dstOffset, type = (VkDeviceSize), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkImageSubresourceLayers {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = mipLevel, type = (uint32_t), offset = 4, size = 4
    name = baseArrayLayer, type = (uint32_t), offset = 8, size = 4
    name = layerCount, type = (uint32_t), offset = 12, size = 4
} ; size: 16

TYPEDEF VkImageSubresourceLayers = struct VkImageSubresourceLayers

struct VkImageSubresourceLayers {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = mipLevel, type = (uint32_t), offset = 4, size = 4
    name = baseArrayLayer, type = (uint32_t), offset = 8, size = 4
    name = layerCount, type = (uint32_t), offset = 12, size = 4
} ; size: 16

struct VkBufferImageCopy {
    name = bufferOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 8, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 12, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 32, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 44, size = 12
} ; size: 56

TYPEDEF VkBufferImageCopy = struct VkBufferImageCopy

struct VkBufferImageCopy {
    name = bufferOffset, type = (VkDeviceSize), offset = 0, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 8, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 12, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 32, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 44, size = 12
} ; size: 56

TYPEDEF VkClearColorValue = union VkClearColorValue

struct VkClearDepthStencilValue {
    name = depth, type = (float), offset = 0, size = 4
    name = stencil, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkClearDepthStencilValue = struct VkClearDepthStencilValue

struct VkClearDepthStencilValue {
    name = depth, type = (float), offset = 0, size = 4
    name = stencil, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkClearValue = union VkClearValue

struct VkClearAttachment {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = colorAttachment, type = (uint32_t), offset = 4, size = 4
    name = clearValue, type = (VkClearValue), offset = 8, size = 16
} ; size: 24

TYPEDEF VkClearAttachment = struct VkClearAttachment

struct VkClearAttachment {
    name = aspectMask, type = (VkImageAspectFlags), offset = 0, size = 4
    name = colorAttachment, type = (uint32_t), offset = 4, size = 4
    name = clearValue, type = (VkClearValue), offset = 8, size = 16
} ; size: 24

struct VkClearRect {
    name = rect, type = (VkRect2D), offset = 0, size = 16
    name = baseArrayLayer, type = (uint32_t), offset = 16, size = 4
    name = layerCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkClearRect = struct VkClearRect

struct VkClearRect {
    name = rect, type = (VkRect2D), offset = 0, size = 16
    name = baseArrayLayer, type = (uint32_t), offset = 16, size = 4
    name = layerCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkImageBlit {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffsets, type = (VkOffset3D[2]), offset = 16, size = 24
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 40, size = 16
    name = dstOffsets, type = (VkOffset3D[2]), offset = 56, size = 24
} ; size: 80

TYPEDEF VkImageBlit = struct VkImageBlit

struct VkImageBlit {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffsets, type = (VkOffset3D[2]), offset = 16, size = 24
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 40, size = 16
    name = dstOffsets, type = (VkOffset3D[2]), offset = 56, size = 24
} ; size: 80

struct VkImageCopy {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 16, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 28, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 44, size = 12
    name = extent, type = (VkExtent3D), offset = 56, size = 12
} ; size: 68

TYPEDEF VkImageCopy = struct VkImageCopy

struct VkImageCopy {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 16, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 28, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 44, size = 12
    name = extent, type = (VkExtent3D), offset = 56, size = 12
} ; size: 68

struct VkImageResolve {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 16, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 28, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 44, size = 12
    name = extent, type = (VkExtent3D), offset = 56, size = 12
} ; size: 68

TYPEDEF VkImageResolve = struct VkImageResolve

struct VkImageResolve {
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 0, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 16, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 28, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 44, size = 12
    name = extent, type = (VkExtent3D), offset = 56, size = 12
} ; size: 68

struct VkRenderPassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = framebuffer, type = (VkFramebuffer), offset = 24, size = 8
    name = renderArea, type = (VkRect2D), offset = 32, size = 16
    name = clearValueCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pClearValues, type = (const VkClearValue *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkRenderPassBeginInfo = struct VkRenderPassBeginInfo

struct VkRenderPassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = framebuffer, type = (VkFramebuffer), offset = 24, size = 8
    name = renderArea, type = (VkRect2D), offset = 32, size = 16
    name = clearValueCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pClearValues, type = (const VkClearValue *), offset = 56, size = 8
} ; size: 64

TYPEDEF PFN_vkCreateInstance = VkResult (*)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyInstance = void (*)(VkInstance, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkEnumeratePhysicalDevices = VkResult (*)(VkInstance, uint32_t *, VkPhysicalDevice *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceFeatures = void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceFormatProperties = void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceImageFormatProperties = VkResult (*)(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceProperties = void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceQueueFamilyProperties = void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceMemoryProperties = void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetInstanceProcAddr = PFN_vkVoidFunction (*)(VkInstance, const char *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceProcAddr = PFN_vkVoidFunction (*)(VkDevice, const char *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDevice = VkResult (*)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDevice = void (*)(VkDevice, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkEnumerateInstanceExtensionProperties = VkResult (*)(const char *, uint32_t *, VkExtensionProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkEnumerateDeviceExtensionProperties = VkResult (*)(VkPhysicalDevice, const char *, uint32_t *, VkExtensionProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkEnumerateInstanceLayerProperties = VkResult (*)(uint32_t *, VkLayerProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkEnumerateDeviceLayerProperties = VkResult (*)(VkPhysicalDevice, uint32_t *, VkLayerProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceQueue = void (*)(VkDevice, uint32_t, uint32_t, VkQueue *) __attribute__((stdcall))

TYPEDEF PFN_vkQueueSubmit = VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo *, VkFence) __attribute__((stdcall))

TYPEDEF PFN_vkQueueWaitIdle = VkResult (*)(VkQueue) __attribute__((stdcall))

TYPEDEF PFN_vkDeviceWaitIdle = VkResult (*)(VkDevice) __attribute__((stdcall))

TYPEDEF PFN_vkAllocateMemory = VkResult (*)(VkDevice, const VkMemoryAllocateInfo *, const VkAllocationCallbacks *, VkDeviceMemory *) __attribute__((stdcall))

TYPEDEF PFN_vkFreeMemory = void (*)(VkDevice, VkDeviceMemory, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkMapMemory = VkResult (*)(VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void **) __attribute__((stdcall))

TYPEDEF PFN_vkUnmapMemory = void (*)(VkDevice, VkDeviceMemory) __attribute__((stdcall))

TYPEDEF PFN_vkFlushMappedMemoryRanges = VkResult (*)(VkDevice, uint32_t, const VkMappedMemoryRange *) __attribute__((stdcall))

TYPEDEF PFN_vkInvalidateMappedMemoryRanges = VkResult (*)(VkDevice, uint32_t, const VkMappedMemoryRange *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceMemoryCommitment = void (*)(VkDevice, VkDeviceMemory, VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkBindBufferMemory = VkResult (*)(VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) __attribute__((stdcall))

TYPEDEF PFN_vkBindImageMemory = VkResult (*)(VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferMemoryRequirements = void (*)(VkDevice, VkBuffer, VkMemoryRequirements *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageMemoryRequirements = void (*)(VkDevice, VkImage, VkMemoryRequirements *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSparseMemoryRequirements = void (*)(VkDevice, VkImage, uint32_t *, VkSparseImageMemoryRequirements *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSparseImageFormatProperties = void (*)(VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, uint32_t *, VkSparseImageFormatProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkQueueBindSparse = VkResult (*)(VkQueue, uint32_t, const VkBindSparseInfo *, VkFence) __attribute__((stdcall))

TYPEDEF PFN_vkCreateFence = VkResult (*)(VkDevice, const VkFenceCreateInfo *, const VkAllocationCallbacks *, VkFence *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyFence = void (*)(VkDevice, VkFence, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkResetFences = VkResult (*)(VkDevice, uint32_t, const VkFence *) __attribute__((stdcall))

TYPEDEF PFN_vkGetFenceStatus = VkResult (*)(VkDevice, VkFence) __attribute__((stdcall))

TYPEDEF PFN_vkWaitForFences = VkResult (*)(VkDevice, uint32_t, const VkFence *, VkBool32, uint64_t) __attribute__((stdcall))

TYPEDEF PFN_vkCreateSemaphore = VkResult (*)(VkDevice, const VkSemaphoreCreateInfo *, const VkAllocationCallbacks *, VkSemaphore *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroySemaphore = void (*)(VkDevice, VkSemaphore, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateEvent = VkResult (*)(VkDevice, const VkEventCreateInfo *, const VkAllocationCallbacks *, VkEvent *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyEvent = void (*)(VkDevice, VkEvent, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetEventStatus = VkResult (*)(VkDevice, VkEvent) __attribute__((stdcall))

TYPEDEF PFN_vkSetEvent = VkResult (*)(VkDevice, VkEvent) __attribute__((stdcall))

TYPEDEF PFN_vkResetEvent = VkResult (*)(VkDevice, VkEvent) __attribute__((stdcall))

TYPEDEF PFN_vkCreateQueryPool = VkResult (*)(VkDevice, const VkQueryPoolCreateInfo *, const VkAllocationCallbacks *, VkQueryPool *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyQueryPool = void (*)(VkDevice, VkQueryPool, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetQueryPoolResults = VkResult (*)(VkDevice, VkQueryPool, uint32_t, uint32_t, size_t, void *, VkDeviceSize, VkQueryResultFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCreateBuffer = VkResult (*)(VkDevice, const VkBufferCreateInfo *, const VkAllocationCallbacks *, VkBuffer *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyBuffer = void (*)(VkDevice, VkBuffer, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateBufferView = VkResult (*)(VkDevice, const VkBufferViewCreateInfo *, const VkAllocationCallbacks *, VkBufferView *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyBufferView = void (*)(VkDevice, VkBufferView, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateImage = VkResult (*)(VkDevice, const VkImageCreateInfo *, const VkAllocationCallbacks *, VkImage *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyImage = void (*)(VkDevice, VkImage, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSubresourceLayout = void (*)(VkDevice, VkImage, const VkImageSubresource *, VkSubresourceLayout *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateImageView = VkResult (*)(VkDevice, const VkImageViewCreateInfo *, const VkAllocationCallbacks *, VkImageView *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyImageView = void (*)(VkDevice, VkImageView, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateShaderModule = VkResult (*)(VkDevice, const VkShaderModuleCreateInfo *, const VkAllocationCallbacks *, VkShaderModule *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyShaderModule = void (*)(VkDevice, VkShaderModule, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreatePipelineCache = VkResult (*)(VkDevice, const VkPipelineCacheCreateInfo *, const VkAllocationCallbacks *, VkPipelineCache *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyPipelineCache = void (*)(VkDevice, VkPipelineCache, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPipelineCacheData = VkResult (*)(VkDevice, VkPipelineCache, size_t *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkMergePipelineCaches = VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkPipelineCache *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateGraphicsPipelines = VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkGraphicsPipelineCreateInfo *, const VkAllocationCallbacks *, VkPipeline *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateComputePipelines = VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkComputePipelineCreateInfo *, const VkAllocationCallbacks *, VkPipeline *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyPipeline = void (*)(VkDevice, VkPipeline, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreatePipelineLayout = VkResult (*)(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyPipelineLayout = void (*)(VkDevice, VkPipelineLayout, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateSampler = VkResult (*)(VkDevice, const VkSamplerCreateInfo *, const VkAllocationCallbacks *, VkSampler *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroySampler = void (*)(VkDevice, VkSampler, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDescriptorSetLayout = VkResult (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, const VkAllocationCallbacks *, VkDescriptorSetLayout *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDescriptorSetLayout = void (*)(VkDevice, VkDescriptorSetLayout, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDescriptorPool = VkResult (*)(VkDevice, const VkDescriptorPoolCreateInfo *, const VkAllocationCallbacks *, VkDescriptorPool *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDescriptorPool = void (*)(VkDevice, VkDescriptorPool, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkResetDescriptorPool = VkResult (*)(VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) __attribute__((stdcall))

TYPEDEF PFN_vkAllocateDescriptorSets = VkResult (*)(VkDevice, const VkDescriptorSetAllocateInfo *, VkDescriptorSet *) __attribute__((stdcall))

TYPEDEF PFN_vkFreeDescriptorSets = VkResult (*)(VkDevice, VkDescriptorPool, uint32_t, const VkDescriptorSet *) __attribute__((stdcall))

TYPEDEF PFN_vkUpdateDescriptorSets = void (*)(VkDevice, uint32_t, const VkWriteDescriptorSet *, uint32_t, const VkCopyDescriptorSet *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateFramebuffer = VkResult (*)(VkDevice, const VkFramebufferCreateInfo *, const VkAllocationCallbacks *, VkFramebuffer *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyFramebuffer = void (*)(VkDevice, VkFramebuffer, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateRenderPass = VkResult (*)(VkDevice, const VkRenderPassCreateInfo *, const VkAllocationCallbacks *, VkRenderPass *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyRenderPass = void (*)(VkDevice, VkRenderPass, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetRenderAreaGranularity = void (*)(VkDevice, VkRenderPass, VkExtent2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateCommandPool = VkResult (*)(VkDevice, const VkCommandPoolCreateInfo *, const VkAllocationCallbacks *, VkCommandPool *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyCommandPool = void (*)(VkDevice, VkCommandPool, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkResetCommandPool = VkResult (*)(VkDevice, VkCommandPool, VkCommandPoolResetFlags) __attribute__((stdcall))

TYPEDEF PFN_vkAllocateCommandBuffers = VkResult (*)(VkDevice, const VkCommandBufferAllocateInfo *, VkCommandBuffer *) __attribute__((stdcall))

TYPEDEF PFN_vkFreeCommandBuffers = void (*)(VkDevice, VkCommandPool, uint32_t, const VkCommandBuffer *) __attribute__((stdcall))

TYPEDEF PFN_vkBeginCommandBuffer = VkResult (*)(VkCommandBuffer, const VkCommandBufferBeginInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkEndCommandBuffer = VkResult (*)(VkCommandBuffer) __attribute__((stdcall))

TYPEDEF PFN_vkResetCommandBuffer = VkResult (*)(VkCommandBuffer, VkCommandBufferResetFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindPipeline = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipeline) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewport = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkViewport *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetScissor = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetLineWidth = void (*)(VkCommandBuffer, float) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBias = void (*)(VkCommandBuffer, float, float, float) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetBlendConstants = void (*)(VkCommandBuffer, const float *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBounds = void (*)(VkCommandBuffer, float, float) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilCompareMask = void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilWriteMask = void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilReference = void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindDescriptorSets = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkDescriptorSet *, uint32_t, const uint32_t *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindIndexBuffer = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindVertexBuffers = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDraw = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndexed = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, int32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndirect = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndexedIndirect = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDispatch = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDispatchIndirect = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyBuffer = void (*)(VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, const VkBufferCopy *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImage = void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageCopy *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBlitImage = void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageBlit *, VkFilter) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyBufferToImage = void (*)(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, const VkBufferImageCopy *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImageToBuffer = void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, const VkBufferImageCopy *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdUpdateBuffer = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, const void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdFillBuffer = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdClearColorImage = void (*)(VkCommandBuffer, VkImage, VkImageLayout, const VkClearColorValue *, uint32_t, const VkImageSubresourceRange *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdClearDepthStencilImage = void (*)(VkCommandBuffer, VkImage, VkImageLayout, const VkClearDepthStencilValue *, uint32_t, const VkImageSubresourceRange *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdClearAttachments = void (*)(VkCommandBuffer, uint32_t, const VkClearAttachment *, uint32_t, const VkClearRect *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResolveImage = void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageResolve *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetEvent = void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResetEvent = void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWaitEvents = void (*)(VkCommandBuffer, uint32_t, const VkEvent *, VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPipelineBarrier = void (*)(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginQuery = void (*)(VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndQuery = void (*)(VkCommandBuffer, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResetQueryPool = void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteTimestamp = void (*)(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyQueryPoolResults = void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPushConstants = void (*)(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, const void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginRenderPass = void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, VkSubpassContents) __attribute__((stdcall))

TYPEDEF PFN_vkCmdNextSubpass = void (*)(VkCommandBuffer, VkSubpassContents) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndRenderPass = void (*)(VkCommandBuffer) __attribute__((stdcall))

TYPEDEF PFN_vkCmdExecuteCommands = void (*)(VkCommandBuffer, uint32_t, const VkCommandBuffer *) __attribute__((stdcall))

FUNC VkResult vkCreateInstance(const VkInstanceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkInstance * pInstance)

FUNC void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t * pPhysicalDeviceCount, VkPhysicalDevice * pPhysicalDevices)

FUNC void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures * pFeatures)

FUNC void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties * pFormatProperties)

FUNC VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties * pImageFormatProperties)

FUNC void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties * pProperties)

FUNC void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties * pQueueFamilyProperties)

FUNC void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties * pMemoryProperties)

FUNC PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char * pName)

FUNC PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char * pName)

FUNC VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDevice * pDevice)

FUNC void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkEnumerateInstanceExtensionProperties(const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties)

FUNC VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties)

FUNC VkResult vkEnumerateInstanceLayerProperties(uint32_t * pPropertyCount, VkLayerProperties * pProperties)

FUNC VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkLayerProperties * pProperties)

FUNC void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue * pQueue)

FUNC VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo * pSubmits, VkFence fence)

FUNC VkResult vkQueueWaitIdle(VkQueue queue)

FUNC VkResult vkDeviceWaitIdle(VkDevice device)

FUNC VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo * pAllocateInfo, const VkAllocationCallbacks * pAllocator, VkDeviceMemory * pMemory)

FUNC void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void ** ppData)

FUNC void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)

FUNC VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges)

FUNC VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges)

FUNC void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize * pCommittedMemoryInBytes)

FUNC VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)

FUNC VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)

FUNC void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements * pMemoryRequirements)

FUNC void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements * pMemoryRequirements)

FUNC void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements * pSparseMemoryRequirements)

FUNC void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t * pPropertyCount, VkSparseImageFormatProperties * pProperties)

FUNC VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo * pBindInfo, VkFence fence)

FUNC VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence)

FUNC void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence * pFences)

FUNC VkResult vkGetFenceStatus(VkDevice device, VkFence fence)

FUNC VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence * pFences, VkBool32 waitAll, uint64_t timeout)

FUNC VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSemaphore * pSemaphore)

FUNC void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkEvent * pEvent)

FUNC void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetEventStatus(VkDevice device, VkEvent event)

FUNC VkResult vkSetEvent(VkDevice device, VkEvent event)

FUNC VkResult vkResetEvent(VkDevice device, VkEvent event)

FUNC VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkQueryPool * pQueryPool)

FUNC void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void * pData, VkDeviceSize stride, VkQueryResultFlags flags)

FUNC VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBuffer * pBuffer)

FUNC void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBufferView * pView)

FUNC void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImage * pImage)

FUNC void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks * pAllocator)

FUNC void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource * pSubresource, VkSubresourceLayout * pLayout)

FUNC VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImageView * pView)

FUNC void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkShaderModule * pShaderModule)

FUNC void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineCache * pPipelineCache)

FUNC void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t * pDataSize, void * pData)

FUNC VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache * pSrcCaches)

FUNC VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines)

FUNC VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines)

FUNC void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineLayout * pPipelineLayout)

FUNC void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSampler * pSampler)

FUNC void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorSetLayout * pSetLayout)

FUNC void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorPool * pDescriptorPool)

FUNC void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)

FUNC VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo * pAllocateInfo, VkDescriptorSet * pDescriptorSets)

FUNC VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets)

FUNC void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet * pDescriptorCopies)

FUNC VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFramebuffer * pFramebuffer)

FUNC void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass)

FUNC void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks * pAllocator)

FUNC void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D * pGranularity)

FUNC VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCommandPool * pCommandPool)

FUNC void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)

FUNC VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo * pAllocateInfo, VkCommandBuffer * pCommandBuffers)

FUNC void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers)

FUNC VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo * pBeginInfo)

FUNC VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)

FUNC VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)

FUNC void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

FUNC void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport * pViewports)

FUNC void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D * pScissors)

FUNC void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)

FUNC void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)

FUNC void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float[4] blendConstants)

FUNC void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)

FUNC void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)

FUNC void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)

FUNC void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)

FUNC void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t * pDynamicOffsets)

FUNC void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)

FUNC void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets)

FUNC void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)

FUNC void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)

FUNC void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)

FUNC void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)

FUNC void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)

FUNC void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

FUNC void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy * pRegions)

FUNC void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy * pRegions)

FUNC void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit * pRegions, VkFilter filter)

FUNC void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy * pRegions)

FUNC void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy * pRegions)

FUNC void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void * pData)

FUNC void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)

FUNC void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue * pColor, uint32_t rangeCount, const VkImageSubresourceRange * pRanges)

FUNC void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue * pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange * pRanges)

FUNC void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment * pAttachments, uint32_t rectCount, const VkClearRect * pRects)

FUNC void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve * pRegions)

FUNC void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

FUNC void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

FUNC void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers)

FUNC void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers)

FUNC void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)

FUNC void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)

FUNC void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)

FUNC void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)

FUNC void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)

FUNC void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void * pValues)

FUNC void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, VkSubpassContents contents)

FUNC void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)

FUNC void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)

FUNC void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers)

TYPEDEF VkSamplerYcbcrConversion = struct VkSamplerYcbcrConversion_T *

TYPEDEF VkDescriptorUpdateTemplate = struct VkDescriptorUpdateTemplate_T *

ENUM VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
}

TYPEDEF VkPointClippingBehavior = enum VkPointClippingBehavior

ENUM VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
}

ENUM VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
}

TYPEDEF VkTessellationDomainOrigin = enum VkTessellationDomainOrigin

ENUM VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
}

ENUM VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerYcbcrModelConversion = enum VkSamplerYcbcrModelConversion

ENUM VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
}

ENUM VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerYcbcrRange = enum VkSamplerYcbcrRange

ENUM VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
}

ENUM VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0
    VK_CHROMA_LOCATION_MIDPOINT = 1
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0
    VK_CHROMA_LOCATION_MIDPOINT_KHR = 1
    VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
}

TYPEDEF VkChromaLocation = enum VkChromaLocation

ENUM VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0
    VK_CHROMA_LOCATION_MIDPOINT = 1
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0
    VK_CHROMA_LOCATION_MIDPOINT_KHR = 1
    VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
}

ENUM VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorUpdateTemplateType = enum VkDescriptorUpdateTemplateType

ENUM VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
}

ENUM VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
    VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = 512
    VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = 1024
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubgroupFeatureFlagBits = enum VkSubgroupFeatureFlagBits

ENUM VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
    VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = 512
    VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = 1024
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubgroupFeatureFlags = VkFlags

ENUM VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPeerMemoryFeatureFlagBits = enum VkPeerMemoryFeatureFlagBits

ENUM VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPeerMemoryFeatureFlags = VkFlags

ENUM VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryAllocateFlagBits = enum VkMemoryAllocateFlagBits

ENUM VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkMemoryAllocateFlags = VkFlags

TYPEDEF VkCommandPoolTrimFlags = VkFlags

TYPEDEF VkDescriptorUpdateTemplateCreateFlags = VkFlags

ENUM VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalMemoryHandleTypeFlagBits = enum VkExternalMemoryHandleTypeFlagBits

ENUM VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalMemoryHandleTypeFlags = VkFlags

ENUM VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalMemoryFeatureFlagBits = enum VkExternalMemoryFeatureFlagBits

ENUM VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalMemoryFeatureFlags = VkFlags

ENUM VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalFenceHandleTypeFlagBits = enum VkExternalFenceHandleTypeFlagBits

ENUM VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalFenceHandleTypeFlags = VkFlags

ENUM VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalFenceFeatureFlagBits = enum VkExternalFenceFeatureFlagBits

ENUM VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalFenceFeatureFlags = VkFlags

ENUM VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFenceImportFlagBits = enum VkFenceImportFlagBits

ENUM VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkFenceImportFlags = VkFlags

ENUM VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSemaphoreImportFlagBits = enum VkSemaphoreImportFlagBits

ENUM VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSemaphoreImportFlags = VkFlags

ENUM VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalSemaphoreHandleTypeFlagBits = enum VkExternalSemaphoreHandleTypeFlagBits

ENUM VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalSemaphoreHandleTypeFlags = VkFlags

ENUM VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalSemaphoreFeatureFlagBits = enum VkExternalSemaphoreFeatureFlagBits

ENUM VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkExternalSemaphoreFeatureFlags = VkFlags

struct VkPhysicalDeviceSubgroupProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subgroupSize, type = (uint32_t), offset = 16, size = 4
    name = supportedStages, type = (VkShaderStageFlags), offset = 20, size = 4
    name = supportedOperations, type = (VkSubgroupFeatureFlags), offset = 24, size = 4
    name = quadOperationsInAllStages, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceSubgroupProperties = struct VkPhysicalDeviceSubgroupProperties

struct VkPhysicalDeviceSubgroupProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subgroupSize, type = (uint32_t), offset = 16, size = 4
    name = supportedStages, type = (VkShaderStageFlags), offset = 20, size = 4
    name = supportedOperations, type = (VkSubgroupFeatureFlags), offset = 24, size = 4
    name = quadOperationsInAllStages, type = (VkBool32), offset = 28, size = 4
} ; size: 32

struct VkBindBufferMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkBindBufferMemoryInfo = struct VkBindBufferMemoryInfo

struct VkBindBufferMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkBindImageMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkBindImageMemoryInfo = struct VkBindImageMemoryInfo

struct VkBindImageMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkPhysicalDevice16BitStorageFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer16BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer16BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant16, type = (VkBool32), offset = 24, size = 4
    name = storageInputOutput16, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDevice16BitStorageFeatures = struct VkPhysicalDevice16BitStorageFeatures

struct VkPhysicalDevice16BitStorageFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer16BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer16BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant16, type = (VkBool32), offset = 24, size = 4
    name = storageInputOutput16, type = (VkBool32), offset = 28, size = 4
} ; size: 32

struct VkMemoryDedicatedRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = prefersDedicatedAllocation, type = (VkBool32), offset = 16, size = 4
    name = requiresDedicatedAllocation, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkMemoryDedicatedRequirements = struct VkMemoryDedicatedRequirements

struct VkMemoryDedicatedRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = prefersDedicatedAllocation, type = (VkBool32), offset = 16, size = 4
    name = requiresDedicatedAllocation, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkMemoryDedicatedAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = buffer, type = (VkBuffer), offset = 24, size = 8
} ; size: 32

TYPEDEF VkMemoryDedicatedAllocateInfo = struct VkMemoryDedicatedAllocateInfo

struct VkMemoryDedicatedAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = buffer, type = (VkBuffer), offset = 24, size = 8
} ; size: 32

struct VkMemoryAllocateFlagsInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryAllocateFlags), offset = 16, size = 4
    name = deviceMask, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkMemoryAllocateFlagsInfo = struct VkMemoryAllocateFlagsInfo

struct VkMemoryAllocateFlagsInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryAllocateFlags), offset = 16, size = 4
    name = deviceMask, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkDeviceGroupRenderPassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceMask, type = (uint32_t), offset = 16, size = 4
    name = deviceRenderAreaCount, type = (uint32_t), offset = 20, size = 4
    name = pDeviceRenderAreas, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDeviceGroupRenderPassBeginInfo = struct VkDeviceGroupRenderPassBeginInfo

struct VkDeviceGroupRenderPassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceMask, type = (uint32_t), offset = 16, size = 4
    name = deviceRenderAreaCount, type = (uint32_t), offset = 20, size = 4
    name = pDeviceRenderAreas, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

struct VkDeviceGroupCommandBufferBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceMask, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceGroupCommandBufferBeginInfo = struct VkDeviceGroupCommandBufferBeginInfo

struct VkDeviceGroupCommandBufferBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceMask, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkDeviceGroupSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphoreDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
    name = commandBufferCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCommandBufferDeviceMasks, type = (const uint32_t *), offset = 40, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreDeviceIndices, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkDeviceGroupSubmitInfo = struct VkDeviceGroupSubmitInfo

struct VkDeviceGroupSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphoreDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
    name = commandBufferCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCommandBufferDeviceMasks, type = (const uint32_t *), offset = 40, size = 8
    name = signalSemaphoreCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreDeviceIndices, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

struct VkDeviceGroupBindSparseInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = resourceDeviceIndex, type = (uint32_t), offset = 16, size = 4
    name = memoryDeviceIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkDeviceGroupBindSparseInfo = struct VkDeviceGroupBindSparseInfo

struct VkDeviceGroupBindSparseInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = resourceDeviceIndex, type = (uint32_t), offset = 16, size = 4
    name = memoryDeviceIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkBindBufferMemoryDeviceGroupInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkBindBufferMemoryDeviceGroupInfo = struct VkBindBufferMemoryDeviceGroupInfo

struct VkBindBufferMemoryDeviceGroupInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

struct VkBindImageMemoryDeviceGroupInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
    name = splitInstanceBindRegionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSplitInstanceBindRegions, type = (const VkRect2D *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkBindImageMemoryDeviceGroupInfo = struct VkBindImageMemoryDeviceGroupInfo

struct VkBindImageMemoryDeviceGroupInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 24, size = 8
    name = splitInstanceBindRegionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSplitInstanceBindRegions, type = (const VkRect2D *), offset = 40, size = 8
} ; size: 48

struct VkPhysicalDeviceGroupProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = physicalDeviceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = physicalDevices, type = (VkPhysicalDevice[32]), offset = 24, size = 256
    name = subsetAllocation, type = (VkBool32), offset = 280, size = 4
} ; size: 288

TYPEDEF VkPhysicalDeviceGroupProperties = struct VkPhysicalDeviceGroupProperties

struct VkPhysicalDeviceGroupProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = physicalDeviceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = physicalDevices, type = (VkPhysicalDevice[32]), offset = 24, size = 256
    name = subsetAllocation, type = (VkBool32), offset = 280, size = 4
} ; size: 288

struct VkDeviceGroupDeviceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = physicalDeviceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPhysicalDevices, type = (const VkPhysicalDevice *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDeviceGroupDeviceCreateInfo = struct VkDeviceGroupDeviceCreateInfo

struct VkDeviceGroupDeviceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = physicalDeviceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPhysicalDevices, type = (const VkPhysicalDevice *), offset = 24, size = 8
} ; size: 32

struct VkBufferMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferMemoryRequirementsInfo2 = struct VkBufferMemoryRequirementsInfo2

struct VkBufferMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

struct VkImageMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageMemoryRequirementsInfo2 = struct VkImageMemoryRequirementsInfo2

struct VkImageMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

struct VkImageSparseMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageSparseMemoryRequirementsInfo2 = struct VkImageSparseMemoryRequirementsInfo2

struct VkImageSparseMemoryRequirementsInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

struct VkMemoryRequirements2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryRequirements, type = (VkMemoryRequirements), offset = 16, size = 24
} ; size: 40

TYPEDEF VkMemoryRequirements2 = struct VkMemoryRequirements2

struct VkMemoryRequirements2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryRequirements, type = (VkMemoryRequirements), offset = 16, size = 24
} ; size: 40

struct VkSparseImageMemoryRequirements2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryRequirements, type = (VkSparseImageMemoryRequirements), offset = 16, size = 48
} ; size: 64

TYPEDEF VkSparseImageMemoryRequirements2 = struct VkSparseImageMemoryRequirements2

struct VkSparseImageMemoryRequirements2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryRequirements, type = (VkSparseImageMemoryRequirements), offset = 16, size = 48
} ; size: 64

struct VkPhysicalDeviceFeatures2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = features, type = (VkPhysicalDeviceFeatures), offset = 16, size = 220
} ; size: 240

TYPEDEF VkPhysicalDeviceFeatures2 = struct VkPhysicalDeviceFeatures2

struct VkPhysicalDeviceFeatures2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = features, type = (VkPhysicalDeviceFeatures), offset = 16, size = 220
} ; size: 240

struct VkPhysicalDeviceProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = properties, type = (VkPhysicalDeviceProperties), offset = 16, size = 824
} ; size: 840

TYPEDEF VkPhysicalDeviceProperties2 = struct VkPhysicalDeviceProperties2

struct VkPhysicalDeviceProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = properties, type = (VkPhysicalDeviceProperties), offset = 16, size = 824
} ; size: 840

struct VkFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatProperties, type = (VkFormatProperties), offset = 16, size = 12
} ; size: 32

TYPEDEF VkFormatProperties2 = struct VkFormatProperties2

struct VkFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatProperties, type = (VkFormatProperties), offset = 16, size = 12
} ; size: 32

struct VkImageFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageFormatProperties, type = (VkImageFormatProperties), offset = 16, size = 32
} ; size: 48

TYPEDEF VkImageFormatProperties2 = struct VkImageFormatProperties2

struct VkImageFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageFormatProperties, type = (VkImageFormatProperties), offset = 16, size = 32
} ; size: 48

struct VkPhysicalDeviceImageFormatInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = type, type = (VkImageType), offset = 20, size = 4
    name = tiling, type = (VkImageTiling), offset = 24, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 28, size = 4
    name = flags, type = (VkImageCreateFlags), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceImageFormatInfo2 = struct VkPhysicalDeviceImageFormatInfo2

struct VkPhysicalDeviceImageFormatInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = type, type = (VkImageType), offset = 20, size = 4
    name = tiling, type = (VkImageTiling), offset = 24, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 28, size = 4
    name = flags, type = (VkImageCreateFlags), offset = 32, size = 4
} ; size: 40

struct VkQueueFamilyProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = queueFamilyProperties, type = (VkQueueFamilyProperties), offset = 16, size = 24
} ; size: 40

TYPEDEF VkQueueFamilyProperties2 = struct VkQueueFamilyProperties2

struct VkQueueFamilyProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = queueFamilyProperties, type = (VkQueueFamilyProperties), offset = 16, size = 24
} ; size: 40

struct VkPhysicalDeviceMemoryProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryProperties, type = (VkPhysicalDeviceMemoryProperties), offset = 16, size = 520
} ; size: 536

TYPEDEF VkPhysicalDeviceMemoryProperties2 = struct VkPhysicalDeviceMemoryProperties2

struct VkPhysicalDeviceMemoryProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryProperties, type = (VkPhysicalDeviceMemoryProperties), offset = 16, size = 520
} ; size: 536

struct VkSparseImageFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = properties, type = (VkSparseImageFormatProperties), offset = 16, size = 20
} ; size: 40

TYPEDEF VkSparseImageFormatProperties2 = struct VkSparseImageFormatProperties2

struct VkSparseImageFormatProperties2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = properties, type = (VkSparseImageFormatProperties), offset = 16, size = 20
} ; size: 40

struct VkPhysicalDeviceSparseImageFormatInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = type, type = (VkImageType), offset = 20, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 24, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 28, size = 4
    name = tiling, type = (VkImageTiling), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceSparseImageFormatInfo2 = struct VkPhysicalDeviceSparseImageFormatInfo2

struct VkPhysicalDeviceSparseImageFormatInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = type, type = (VkImageType), offset = 20, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 24, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 28, size = 4
    name = tiling, type = (VkImageTiling), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDevicePointClippingProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pointClippingBehavior, type = (VkPointClippingBehavior), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePointClippingProperties = struct VkPhysicalDevicePointClippingProperties

struct VkPhysicalDevicePointClippingProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pointClippingBehavior, type = (VkPointClippingBehavior), offset = 16, size = 4
} ; size: 24

struct VkInputAttachmentAspectReference {
    name = subpass, type = (uint32_t), offset = 0, size = 4
    name = inputAttachmentIndex, type = (uint32_t), offset = 4, size = 4
    name = aspectMask, type = (VkImageAspectFlags), offset = 8, size = 4
} ; size: 12

TYPEDEF VkInputAttachmentAspectReference = struct VkInputAttachmentAspectReference

struct VkInputAttachmentAspectReference {
    name = subpass, type = (uint32_t), offset = 0, size = 4
    name = inputAttachmentIndex, type = (uint32_t), offset = 4, size = 4
    name = aspectMask, type = (VkImageAspectFlags), offset = 8, size = 4
} ; size: 12

struct VkRenderPassInputAttachmentAspectCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = aspectReferenceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAspectReferences, type = (const VkInputAttachmentAspectReference *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkRenderPassInputAttachmentAspectCreateInfo = struct VkRenderPassInputAttachmentAspectCreateInfo

struct VkRenderPassInputAttachmentAspectCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = aspectReferenceCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAspectReferences, type = (const VkInputAttachmentAspectReference *), offset = 24, size = 8
} ; size: 32

struct VkImageViewUsageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkImageViewUsageCreateInfo = struct VkImageViewUsageCreateInfo

struct VkImageViewUsageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

struct VkPipelineTessellationDomainOriginStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = domainOrigin, type = (VkTessellationDomainOrigin), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineTessellationDomainOriginStateCreateInfo = struct VkPipelineTessellationDomainOriginStateCreateInfo

struct VkPipelineTessellationDomainOriginStateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = domainOrigin, type = (VkTessellationDomainOrigin), offset = 16, size = 4
} ; size: 24

struct VkRenderPassMultiviewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = subpassCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pViewMasks, type = (const uint32_t *), offset = 24, size = 8
    name = dependencyCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pViewOffsets, type = (const int32_t *), offset = 40, size = 8
    name = correlationMaskCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pCorrelationMasks, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkRenderPassMultiviewCreateInfo = struct VkRenderPassMultiviewCreateInfo

struct VkRenderPassMultiviewCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = subpassCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pViewMasks, type = (const uint32_t *), offset = 24, size = 8
    name = dependencyCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pViewOffsets, type = (const int32_t *), offset = 40, size = 8
    name = correlationMaskCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pCorrelationMasks, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

struct VkPhysicalDeviceMultiviewFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiview, type = (VkBool32), offset = 16, size = 4
    name = multiviewGeometryShader, type = (VkBool32), offset = 20, size = 4
    name = multiviewTessellationShader, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceMultiviewFeatures = struct VkPhysicalDeviceMultiviewFeatures

struct VkPhysicalDeviceMultiviewFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiview, type = (VkBool32), offset = 16, size = 4
    name = multiviewGeometryShader, type = (VkBool32), offset = 20, size = 4
    name = multiviewTessellationShader, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceMultiviewProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxMultiviewViewCount, type = (uint32_t), offset = 16, size = 4
    name = maxMultiviewInstanceIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiviewProperties = struct VkPhysicalDeviceMultiviewProperties

struct VkPhysicalDeviceMultiviewProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxMultiviewViewCount, type = (uint32_t), offset = 16, size = 4
    name = maxMultiviewInstanceIndex, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceVariablePointersFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = variablePointersStorageBuffer, type = (VkBool32), offset = 16, size = 4
    name = variablePointers, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVariablePointersFeatures = struct VkPhysicalDeviceVariablePointersFeatures

struct VkPhysicalDeviceVariablePointersFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = variablePointersStorageBuffer, type = (VkBool32), offset = 16, size = 4
    name = variablePointers, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures

struct VkPhysicalDeviceProtectedMemoryFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = protectedMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceProtectedMemoryFeatures = struct VkPhysicalDeviceProtectedMemoryFeatures

struct VkPhysicalDeviceProtectedMemoryFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = protectedMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceProtectedMemoryProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = protectedNoFault, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceProtectedMemoryProperties = struct VkPhysicalDeviceProtectedMemoryProperties

struct VkPhysicalDeviceProtectedMemoryProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = protectedNoFault, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDeviceQueueInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceQueueCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
    name = queueIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDeviceQueueInfo2 = struct VkDeviceQueueInfo2

struct VkDeviceQueueInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceQueueCreateFlags), offset = 16, size = 4
    name = queueFamilyIndex, type = (uint32_t), offset = 20, size = 4
    name = queueIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkProtectedSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = protectedSubmit, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkProtectedSubmitInfo = struct VkProtectedSubmitInfo

struct VkProtectedSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = protectedSubmit, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSamplerYcbcrConversionCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = ycbcrModel, type = (VkSamplerYcbcrModelConversion), offset = 20, size = 4
    name = ycbcrRange, type = (VkSamplerYcbcrRange), offset = 24, size = 4
    name = components, type = (VkComponentMapping), offset = 28, size = 16
    name = xChromaOffset, type = (VkChromaLocation), offset = 44, size = 4
    name = yChromaOffset, type = (VkChromaLocation), offset = 48, size = 4
    name = chromaFilter, type = (VkFilter), offset = 52, size = 4
    name = forceExplicitReconstruction, type = (VkBool32), offset = 56, size = 4
} ; size: 64

TYPEDEF VkSamplerYcbcrConversionCreateInfo = struct VkSamplerYcbcrConversionCreateInfo

struct VkSamplerYcbcrConversionCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = ycbcrModel, type = (VkSamplerYcbcrModelConversion), offset = 20, size = 4
    name = ycbcrRange, type = (VkSamplerYcbcrRange), offset = 24, size = 4
    name = components, type = (VkComponentMapping), offset = 28, size = 16
    name = xChromaOffset, type = (VkChromaLocation), offset = 44, size = 4
    name = yChromaOffset, type = (VkChromaLocation), offset = 48, size = 4
    name = chromaFilter, type = (VkFilter), offset = 52, size = 4
    name = forceExplicitReconstruction, type = (VkBool32), offset = 56, size = 4
} ; size: 64

struct VkSamplerYcbcrConversionInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = conversion, type = (VkSamplerYcbcrConversion), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSamplerYcbcrConversionInfo = struct VkSamplerYcbcrConversionInfo

struct VkSamplerYcbcrConversionInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = conversion, type = (VkSamplerYcbcrConversion), offset = 16, size = 8
} ; size: 24

struct VkBindImagePlaneMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkBindImagePlaneMemoryInfo = struct VkBindImagePlaneMemoryInfo

struct VkBindImagePlaneMemoryInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 16, size = 4
} ; size: 24

struct VkImagePlaneMemoryRequirementsInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkImagePlaneMemoryRequirementsInfo = struct VkImagePlaneMemoryRequirementsInfo

struct VkImagePlaneMemoryRequirementsInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = samplerYcbcrConversion, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct VkPhysicalDeviceSamplerYcbcrConversionFeatures

struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = samplerYcbcrConversion, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSamplerYcbcrConversionImageFormatProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDescriptorCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSamplerYcbcrConversionImageFormatProperties = struct VkSamplerYcbcrConversionImageFormatProperties

struct VkSamplerYcbcrConversionImageFormatProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDescriptorCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkDescriptorUpdateTemplateEntry {
    name = dstBinding, type = (uint32_t), offset = 0, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 4, size = 4
    name = descriptorCount, type = (uint32_t), offset = 8, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 12, size = 4
    name = offset, type = (size_t), offset = 16, size = 8
    name = stride, type = (size_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorUpdateTemplateEntry = struct VkDescriptorUpdateTemplateEntry

struct VkDescriptorUpdateTemplateEntry {
    name = dstBinding, type = (uint32_t), offset = 0, size = 4
    name = dstArrayElement, type = (uint32_t), offset = 4, size = 4
    name = descriptorCount, type = (uint32_t), offset = 8, size = 4
    name = descriptorType, type = (VkDescriptorType), offset = 12, size = 4
    name = offset, type = (size_t), offset = 16, size = 8
    name = stride, type = (size_t), offset = 24, size = 8
} ; size: 32

struct VkDescriptorUpdateTemplateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorUpdateTemplateCreateFlags), offset = 16, size = 4
    name = descriptorUpdateEntryCount, type = (uint32_t), offset = 20, size = 4
    name = pDescriptorUpdateEntries, type = (const VkDescriptorUpdateTemplateEntry *), offset = 24, size = 8
    name = templateType, type = (VkDescriptorUpdateTemplateType), offset = 32, size = 4
    padding (4 bytes)
    name = descriptorSetLayout, type = (VkDescriptorSetLayout), offset = 40, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 48, size = 4
    padding (4 bytes)
    name = pipelineLayout, type = (VkPipelineLayout), offset = 56, size = 8
    name = set, type = (uint32_t), offset = 64, size = 4
} ; size: 72

TYPEDEF VkDescriptorUpdateTemplateCreateInfo = struct VkDescriptorUpdateTemplateCreateInfo

struct VkDescriptorUpdateTemplateCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDescriptorUpdateTemplateCreateFlags), offset = 16, size = 4
    name = descriptorUpdateEntryCount, type = (uint32_t), offset = 20, size = 4
    name = pDescriptorUpdateEntries, type = (const VkDescriptorUpdateTemplateEntry *), offset = 24, size = 8
    name = templateType, type = (VkDescriptorUpdateTemplateType), offset = 32, size = 4
    padding (4 bytes)
    name = descriptorSetLayout, type = (VkDescriptorSetLayout), offset = 40, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 48, size = 4
    padding (4 bytes)
    name = pipelineLayout, type = (VkPipelineLayout), offset = 56, size = 8
    name = set, type = (uint32_t), offset = 64, size = 4
} ; size: 72

struct VkExternalMemoryProperties {
    name = externalMemoryFeatures, type = (VkExternalMemoryFeatureFlags), offset = 0, size = 4
    name = exportFromImportedHandleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 4, size = 4
    name = compatibleHandleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 8, size = 4
} ; size: 12

TYPEDEF VkExternalMemoryProperties = struct VkExternalMemoryProperties

struct VkExternalMemoryProperties {
    name = externalMemoryFeatures, type = (VkExternalMemoryFeatureFlags), offset = 0, size = 4
    name = exportFromImportedHandleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 4, size = 4
    name = compatibleHandleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 8, size = 4
} ; size: 12

struct VkPhysicalDeviceExternalImageFormatInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExternalImageFormatInfo = struct VkPhysicalDeviceExternalImageFormatInfo

struct VkPhysicalDeviceExternalImageFormatInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

struct VkExternalImageFormatProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryProperties, type = (VkExternalMemoryProperties), offset = 16, size = 12
} ; size: 32

TYPEDEF VkExternalImageFormatProperties = struct VkExternalImageFormatProperties

struct VkExternalImageFormatProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryProperties, type = (VkExternalMemoryProperties), offset = 16, size = 12
} ; size: 32

struct VkPhysicalDeviceExternalBufferInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferCreateFlags), offset = 16, size = 4
    name = usage, type = (VkBufferUsageFlags), offset = 20, size = 4
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceExternalBufferInfo = struct VkPhysicalDeviceExternalBufferInfo

struct VkPhysicalDeviceExternalBufferInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkBufferCreateFlags), offset = 16, size = 4
    name = usage, type = (VkBufferUsageFlags), offset = 20, size = 4
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

struct VkExternalBufferProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryProperties, type = (VkExternalMemoryProperties), offset = 16, size = 12
} ; size: 32

TYPEDEF VkExternalBufferProperties = struct VkExternalBufferProperties

struct VkExternalBufferProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryProperties, type = (VkExternalMemoryProperties), offset = 16, size = 12
} ; size: 32

struct VkPhysicalDeviceIDProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = driverUUID, type = (uint8_t[16]), offset = 32, size = 16
    name = deviceLUID, type = (uint8_t[8]), offset = 48, size = 8
    name = deviceNodeMask, type = (uint32_t), offset = 56, size = 4
    name = deviceLUIDValid, type = (VkBool32), offset = 60, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceIDProperties = struct VkPhysicalDeviceIDProperties

struct VkPhysicalDeviceIDProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = driverUUID, type = (uint8_t[16]), offset = 32, size = 16
    name = deviceLUID, type = (uint8_t[8]), offset = 48, size = 8
    name = deviceNodeMask, type = (uint32_t), offset = 56, size = 4
    name = deviceLUIDValid, type = (VkBool32), offset = 60, size = 4
} ; size: 64

struct VkExternalMemoryImageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExternalMemoryImageCreateInfo = struct VkExternalMemoryImageCreateInfo

struct VkExternalMemoryImageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

struct VkExternalMemoryBufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExternalMemoryBufferCreateInfo = struct VkExternalMemoryBufferCreateInfo

struct VkExternalMemoryBufferCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

struct VkExportMemoryAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExportMemoryAllocateInfo = struct VkExportMemoryAllocateInfo

struct VkExportMemoryAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlags), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExternalFenceInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExternalFenceInfo = struct VkPhysicalDeviceExternalFenceInfo

struct VkPhysicalDeviceExternalFenceInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

struct VkExternalFenceProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exportFromImportedHandleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 16, size = 4
    name = compatibleHandleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 20, size = 4
    name = externalFenceFeatures, type = (VkExternalFenceFeatureFlags), offset = 24, size = 4
} ; size: 32

TYPEDEF VkExternalFenceProperties = struct VkExternalFenceProperties

struct VkExternalFenceProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exportFromImportedHandleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 16, size = 4
    name = compatibleHandleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 20, size = 4
    name = externalFenceFeatures, type = (VkExternalFenceFeatureFlags), offset = 24, size = 4
} ; size: 32

struct VkExportFenceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExportFenceCreateInfo = struct VkExportFenceCreateInfo

struct VkExportFenceCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalFenceHandleTypeFlags), offset = 16, size = 4
} ; size: 24

struct VkExportSemaphoreCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExportSemaphoreCreateInfo = struct VkExportSemaphoreCreateInfo

struct VkExportSemaphoreCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExternalSemaphoreInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExternalSemaphoreInfo = struct VkPhysicalDeviceExternalSemaphoreInfo

struct VkPhysicalDeviceExternalSemaphoreInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 16, size = 4
} ; size: 24

struct VkExternalSemaphoreProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exportFromImportedHandleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 16, size = 4
    name = compatibleHandleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 20, size = 4
    name = externalSemaphoreFeatures, type = (VkExternalSemaphoreFeatureFlags), offset = 24, size = 4
} ; size: 32

TYPEDEF VkExternalSemaphoreProperties = struct VkExternalSemaphoreProperties

struct VkExternalSemaphoreProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exportFromImportedHandleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 16, size = 4
    name = compatibleHandleTypes, type = (VkExternalSemaphoreHandleTypeFlags), offset = 20, size = 4
    name = externalSemaphoreFeatures, type = (VkExternalSemaphoreFeatureFlags), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceMaintenance3Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxPerSetDescriptors, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = maxMemoryAllocationSize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPhysicalDeviceMaintenance3Properties = struct VkPhysicalDeviceMaintenance3Properties

struct VkPhysicalDeviceMaintenance3Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxPerSetDescriptors, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = maxMemoryAllocationSize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

struct VkDescriptorSetLayoutSupport {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supported, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDescriptorSetLayoutSupport = struct VkDescriptorSetLayoutSupport

struct VkDescriptorSetLayoutSupport {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supported, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderDrawParametersFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderDrawParameters, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderDrawParametersFeatures = struct VkPhysicalDeviceShaderDrawParametersFeatures

struct VkPhysicalDeviceShaderDrawParametersFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderDrawParameters, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures

TYPEDEF PFN_vkEnumerateInstanceVersion = VkResult (*)(uint32_t *) __attribute__((stdcall))

TYPEDEF PFN_vkBindBufferMemory2 = VkResult (*)(VkDevice, uint32_t, const VkBindBufferMemoryInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkBindImageMemory2 = VkResult (*)(VkDevice, uint32_t, const VkBindImageMemoryInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceGroupPeerMemoryFeatures = void (*)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDeviceMask = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDispatchBase = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkEnumeratePhysicalDeviceGroups = VkResult (*)(VkInstance, uint32_t *, VkPhysicalDeviceGroupProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageMemoryRequirements2 = void (*)(VkDevice, const VkImageMemoryRequirementsInfo2 *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferMemoryRequirements2 = void (*)(VkDevice, const VkBufferMemoryRequirementsInfo2 *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSparseMemoryRequirements2 = void (*)(VkDevice, const VkImageSparseMemoryRequirementsInfo2 *, uint32_t *, VkSparseImageMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceFeatures2 = void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceProperties2 = void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceFormatProperties2 = void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceImageFormatProperties2 = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceImageFormatInfo2 *, VkImageFormatProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceMemoryProperties2 = void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = void (*)(VkPhysicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *, uint32_t *, VkSparseImageFormatProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkTrimCommandPool = void (*)(VkDevice, VkCommandPool, VkCommandPoolTrimFlags) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceQueue2 = void (*)(VkDevice, const VkDeviceQueueInfo2 *, VkQueue *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateSamplerYcbcrConversion = VkResult (*)(VkDevice, const VkSamplerYcbcrConversionCreateInfo *, const VkAllocationCallbacks *, VkSamplerYcbcrConversion *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroySamplerYcbcrConversion = void (*)(VkDevice, VkSamplerYcbcrConversion, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDescriptorUpdateTemplate = VkResult (*)(VkDevice, const VkDescriptorUpdateTemplateCreateInfo *, const VkAllocationCallbacks *, VkDescriptorUpdateTemplate *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDescriptorUpdateTemplate = void (*)(VkDevice, VkDescriptorUpdateTemplate, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkUpdateDescriptorSetWithTemplate = void (*)(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, const void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceExternalBufferProperties = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalBufferInfo *, VkExternalBufferProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceExternalFenceProperties = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalFenceInfo *, VkExternalFenceProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *, VkExternalSemaphoreProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDescriptorSetLayoutSupport = void (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *) __attribute__((stdcall))

FUNC VkResult vkEnumerateInstanceVersion(uint32_t * pApiVersion)

FUNC VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos)

FUNC VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos)

FUNC void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures)

FUNC void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)

FUNC void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)

FUNC VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties)

FUNC void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements)

FUNC void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures)

FUNC void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties)

FUNC void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties)

FUNC VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties)

FUNC void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties)

FUNC void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties)

FUNC void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties)

FUNC void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

FUNC void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 * pQueueInfo, VkQueue * pQueue)

FUNC VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion)

FUNC void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate)

FUNC void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator)

FUNC void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData)

FUNC void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties)

FUNC void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties)

FUNC void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties)

FUNC void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport)

ENUM VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
    VK_DRIVER_ID_MESA_RADV = 3
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
    VK_DRIVER_ID_ARM_PROPRIETARY = 9
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
    VK_DRIVER_ID_GGP_PROPRIETARY = 11
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
    VK_DRIVER_ID_MESA_LLVMPIPE = 13
    VK_DRIVER_ID_MOLTENVK = 14
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17
    VK_DRIVER_ID_MESA_TURNIP = 18
    VK_DRIVER_ID_MESA_V3DV = 19
    VK_DRIVER_ID_MESA_PANVK = 20
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21
    VK_DRIVER_ID_MESA_VENUS = 22
    VK_DRIVER_ID_MESA_DOZEN = 23
    VK_DRIVER_ID_MESA_NVK = 24
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25
    VK_DRIVER_ID_MESA_AGXV = 26
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
    VK_DRIVER_ID_MESA_RADV_KHR = 3
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12
    VK_DRIVER_ID_MAX_ENUM = 2147483647
}

TYPEDEF VkDriverId = enum VkDriverId

ENUM VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
    VK_DRIVER_ID_MESA_RADV = 3
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
    VK_DRIVER_ID_ARM_PROPRIETARY = 9
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
    VK_DRIVER_ID_GGP_PROPRIETARY = 11
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
    VK_DRIVER_ID_MESA_LLVMPIPE = 13
    VK_DRIVER_ID_MOLTENVK = 14
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17
    VK_DRIVER_ID_MESA_TURNIP = 18
    VK_DRIVER_ID_MESA_V3DV = 19
    VK_DRIVER_ID_MESA_PANVK = 20
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21
    VK_DRIVER_ID_MESA_VENUS = 22
    VK_DRIVER_ID_MESA_DOZEN = 23
    VK_DRIVER_ID_MESA_NVK = 24
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25
    VK_DRIVER_ID_MESA_AGXV = 26
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
    VK_DRIVER_ID_MESA_RADV_KHR = 3
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12
    VK_DRIVER_ID_MAX_ENUM = 2147483647
}

ENUM VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
}

TYPEDEF VkShaderFloatControlsIndependence = enum VkShaderFloatControlsIndependence

ENUM VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
}

ENUM VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
    VK_SAMPLER_REDUCTION_MODE_MIN = 1
    VK_SAMPLER_REDUCTION_MODE_MAX = 2
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
}

TYPEDEF VkSamplerReductionMode = enum VkSamplerReductionMode

ENUM VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
    VK_SAMPLER_REDUCTION_MODE_MIN = 1
    VK_SAMPLER_REDUCTION_MODE_MAX = 2
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
}

ENUM VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY = 0
    VK_SEMAPHORE_TYPE_TIMELINE = 1
    VK_SEMAPHORE_TYPE_BINARY_KHR = 0
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1
    VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647
}

TYPEDEF VkSemaphoreType = enum VkSemaphoreType

ENUM VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY = 0
    VK_SEMAPHORE_TYPE_TIMELINE = 1
    VK_SEMAPHORE_TYPE_BINARY_KHR = 0
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1
    VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647
}

ENUM VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE = 0
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
    VK_RESOLVE_MODE_AVERAGE_BIT = 2
    VK_RESOLVE_MODE_MIN_BIT = 4
    VK_RESOLVE_MODE_MAX_BIT = 8
    VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16
    VK_RESOLVE_MODE_NONE_KHR = 0
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2
    VK_RESOLVE_MODE_MIN_BIT_KHR = 4
    VK_RESOLVE_MODE_MAX_BIT_KHR = 8
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkResolveModeFlagBits = enum VkResolveModeFlagBits

ENUM VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE = 0
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
    VK_RESOLVE_MODE_AVERAGE_BIT = 2
    VK_RESOLVE_MODE_MIN_BIT = 4
    VK_RESOLVE_MODE_MAX_BIT = 8
    VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16
    VK_RESOLVE_MODE_NONE_KHR = 0
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2
    VK_RESOLVE_MODE_MIN_BIT_KHR = 4
    VK_RESOLVE_MODE_MAX_BIT_KHR = 8
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkResolveModeFlags = VkFlags

ENUM VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorBindingFlagBits = enum VkDescriptorBindingFlagBits

ENUM VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkDescriptorBindingFlags = VkFlags

ENUM VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT = 1
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSemaphoreWaitFlagBits = enum VkSemaphoreWaitFlagBits

ENUM VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT = 1
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSemaphoreWaitFlags = VkFlags

struct VkPhysicalDeviceVulkan11Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer16BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer16BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant16, type = (VkBool32), offset = 24, size = 4
    name = storageInputOutput16, type = (VkBool32), offset = 28, size = 4
    name = multiview, type = (VkBool32), offset = 32, size = 4
    name = multiviewGeometryShader, type = (VkBool32), offset = 36, size = 4
    name = multiviewTessellationShader, type = (VkBool32), offset = 40, size = 4
    name = variablePointersStorageBuffer, type = (VkBool32), offset = 44, size = 4
    name = variablePointers, type = (VkBool32), offset = 48, size = 4
    name = protectedMemory, type = (VkBool32), offset = 52, size = 4
    name = samplerYcbcrConversion, type = (VkBool32), offset = 56, size = 4
    name = shaderDrawParameters, type = (VkBool32), offset = 60, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceVulkan11Features = struct VkPhysicalDeviceVulkan11Features

struct VkPhysicalDeviceVulkan11Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer16BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer16BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant16, type = (VkBool32), offset = 24, size = 4
    name = storageInputOutput16, type = (VkBool32), offset = 28, size = 4
    name = multiview, type = (VkBool32), offset = 32, size = 4
    name = multiviewGeometryShader, type = (VkBool32), offset = 36, size = 4
    name = multiviewTessellationShader, type = (VkBool32), offset = 40, size = 4
    name = variablePointersStorageBuffer, type = (VkBool32), offset = 44, size = 4
    name = variablePointers, type = (VkBool32), offset = 48, size = 4
    name = protectedMemory, type = (VkBool32), offset = 52, size = 4
    name = samplerYcbcrConversion, type = (VkBool32), offset = 56, size = 4
    name = shaderDrawParameters, type = (VkBool32), offset = 60, size = 4
} ; size: 64

struct VkPhysicalDeviceVulkan11Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = driverUUID, type = (uint8_t[16]), offset = 32, size = 16
    name = deviceLUID, type = (uint8_t[8]), offset = 48, size = 8
    name = deviceNodeMask, type = (uint32_t), offset = 56, size = 4
    name = deviceLUIDValid, type = (VkBool32), offset = 60, size = 4
    name = subgroupSize, type = (uint32_t), offset = 64, size = 4
    name = subgroupSupportedStages, type = (VkShaderStageFlags), offset = 68, size = 4
    name = subgroupSupportedOperations, type = (VkSubgroupFeatureFlags), offset = 72, size = 4
    name = subgroupQuadOperationsInAllStages, type = (VkBool32), offset = 76, size = 4
    name = pointClippingBehavior, type = (VkPointClippingBehavior), offset = 80, size = 4
    name = maxMultiviewViewCount, type = (uint32_t), offset = 84, size = 4
    name = maxMultiviewInstanceIndex, type = (uint32_t), offset = 88, size = 4
    name = protectedNoFault, type = (VkBool32), offset = 92, size = 4
    name = maxPerSetDescriptors, type = (uint32_t), offset = 96, size = 4
    padding (4 bytes)
    name = maxMemoryAllocationSize, type = (VkDeviceSize), offset = 104, size = 8
} ; size: 112

TYPEDEF VkPhysicalDeviceVulkan11Properties = struct VkPhysicalDeviceVulkan11Properties

struct VkPhysicalDeviceVulkan11Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = driverUUID, type = (uint8_t[16]), offset = 32, size = 16
    name = deviceLUID, type = (uint8_t[8]), offset = 48, size = 8
    name = deviceNodeMask, type = (uint32_t), offset = 56, size = 4
    name = deviceLUIDValid, type = (VkBool32), offset = 60, size = 4
    name = subgroupSize, type = (uint32_t), offset = 64, size = 4
    name = subgroupSupportedStages, type = (VkShaderStageFlags), offset = 68, size = 4
    name = subgroupSupportedOperations, type = (VkSubgroupFeatureFlags), offset = 72, size = 4
    name = subgroupQuadOperationsInAllStages, type = (VkBool32), offset = 76, size = 4
    name = pointClippingBehavior, type = (VkPointClippingBehavior), offset = 80, size = 4
    name = maxMultiviewViewCount, type = (uint32_t), offset = 84, size = 4
    name = maxMultiviewInstanceIndex, type = (uint32_t), offset = 88, size = 4
    name = protectedNoFault, type = (VkBool32), offset = 92, size = 4
    name = maxPerSetDescriptors, type = (uint32_t), offset = 96, size = 4
    padding (4 bytes)
    name = maxMemoryAllocationSize, type = (VkDeviceSize), offset = 104, size = 8
} ; size: 112

struct VkPhysicalDeviceVulkan12Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = samplerMirrorClampToEdge, type = (VkBool32), offset = 16, size = 4
    name = drawIndirectCount, type = (VkBool32), offset = 20, size = 4
    name = storageBuffer8BitAccess, type = (VkBool32), offset = 24, size = 4
    name = uniformAndStorageBuffer8BitAccess, type = (VkBool32), offset = 28, size = 4
    name = storagePushConstant8, type = (VkBool32), offset = 32, size = 4
    name = shaderBufferInt64Atomics, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedInt64Atomics, type = (VkBool32), offset = 40, size = 4
    name = shaderFloat16, type = (VkBool32), offset = 44, size = 4
    name = shaderInt8, type = (VkBool32), offset = 48, size = 4
    name = descriptorIndexing, type = (VkBool32), offset = 52, size = 4
    name = shaderInputAttachmentArrayDynamicIndexing, type = (VkBool32), offset = 56, size = 4
    name = shaderUniformTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 60, size = 4
    name = shaderStorageTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 64, size = 4
    name = shaderUniformBufferArrayNonUniformIndexing, type = (VkBool32), offset = 68, size = 4
    name = shaderSampledImageArrayNonUniformIndexing, type = (VkBool32), offset = 72, size = 4
    name = shaderStorageBufferArrayNonUniformIndexing, type = (VkBool32), offset = 76, size = 4
    name = shaderStorageImageArrayNonUniformIndexing, type = (VkBool32), offset = 80, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexing, type = (VkBool32), offset = 84, size = 4
    name = shaderUniformTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 88, size = 4
    name = shaderStorageTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 92, size = 4
    name = descriptorBindingUniformBufferUpdateAfterBind, type = (VkBool32), offset = 96, size = 4
    name = descriptorBindingSampledImageUpdateAfterBind, type = (VkBool32), offset = 100, size = 4
    name = descriptorBindingStorageImageUpdateAfterBind, type = (VkBool32), offset = 104, size = 4
    name = descriptorBindingStorageBufferUpdateAfterBind, type = (VkBool32), offset = 108, size = 4
    name = descriptorBindingUniformTexelBufferUpdateAfterBind, type = (VkBool32), offset = 112, size = 4
    name = descriptorBindingStorageTexelBufferUpdateAfterBind, type = (VkBool32), offset = 116, size = 4
    name = descriptorBindingUpdateUnusedWhilePending, type = (VkBool32), offset = 120, size = 4
    name = descriptorBindingPartiallyBound, type = (VkBool32), offset = 124, size = 4
    name = descriptorBindingVariableDescriptorCount, type = (VkBool32), offset = 128, size = 4
    name = runtimeDescriptorArray, type = (VkBool32), offset = 132, size = 4
    name = samplerFilterMinmax, type = (VkBool32), offset = 136, size = 4
    name = scalarBlockLayout, type = (VkBool32), offset = 140, size = 4
    name = imagelessFramebuffer, type = (VkBool32), offset = 144, size = 4
    name = uniformBufferStandardLayout, type = (VkBool32), offset = 148, size = 4
    name = shaderSubgroupExtendedTypes, type = (VkBool32), offset = 152, size = 4
    name = separateDepthStencilLayouts, type = (VkBool32), offset = 156, size = 4
    name = hostQueryReset, type = (VkBool32), offset = 160, size = 4
    name = timelineSemaphore, type = (VkBool32), offset = 164, size = 4
    name = bufferDeviceAddress, type = (VkBool32), offset = 168, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 172, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 176, size = 4
    name = vulkanMemoryModel, type = (VkBool32), offset = 180, size = 4
    name = vulkanMemoryModelDeviceScope, type = (VkBool32), offset = 184, size = 4
    name = vulkanMemoryModelAvailabilityVisibilityChains, type = (VkBool32), offset = 188, size = 4
    name = shaderOutputViewportIndex, type = (VkBool32), offset = 192, size = 4
    name = shaderOutputLayer, type = (VkBool32), offset = 196, size = 4
    name = subgroupBroadcastDynamicId, type = (VkBool32), offset = 200, size = 4
} ; size: 208

TYPEDEF VkPhysicalDeviceVulkan12Features = struct VkPhysicalDeviceVulkan12Features

struct VkPhysicalDeviceVulkan12Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = samplerMirrorClampToEdge, type = (VkBool32), offset = 16, size = 4
    name = drawIndirectCount, type = (VkBool32), offset = 20, size = 4
    name = storageBuffer8BitAccess, type = (VkBool32), offset = 24, size = 4
    name = uniformAndStorageBuffer8BitAccess, type = (VkBool32), offset = 28, size = 4
    name = storagePushConstant8, type = (VkBool32), offset = 32, size = 4
    name = shaderBufferInt64Atomics, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedInt64Atomics, type = (VkBool32), offset = 40, size = 4
    name = shaderFloat16, type = (VkBool32), offset = 44, size = 4
    name = shaderInt8, type = (VkBool32), offset = 48, size = 4
    name = descriptorIndexing, type = (VkBool32), offset = 52, size = 4
    name = shaderInputAttachmentArrayDynamicIndexing, type = (VkBool32), offset = 56, size = 4
    name = shaderUniformTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 60, size = 4
    name = shaderStorageTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 64, size = 4
    name = shaderUniformBufferArrayNonUniformIndexing, type = (VkBool32), offset = 68, size = 4
    name = shaderSampledImageArrayNonUniformIndexing, type = (VkBool32), offset = 72, size = 4
    name = shaderStorageBufferArrayNonUniformIndexing, type = (VkBool32), offset = 76, size = 4
    name = shaderStorageImageArrayNonUniformIndexing, type = (VkBool32), offset = 80, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexing, type = (VkBool32), offset = 84, size = 4
    name = shaderUniformTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 88, size = 4
    name = shaderStorageTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 92, size = 4
    name = descriptorBindingUniformBufferUpdateAfterBind, type = (VkBool32), offset = 96, size = 4
    name = descriptorBindingSampledImageUpdateAfterBind, type = (VkBool32), offset = 100, size = 4
    name = descriptorBindingStorageImageUpdateAfterBind, type = (VkBool32), offset = 104, size = 4
    name = descriptorBindingStorageBufferUpdateAfterBind, type = (VkBool32), offset = 108, size = 4
    name = descriptorBindingUniformTexelBufferUpdateAfterBind, type = (VkBool32), offset = 112, size = 4
    name = descriptorBindingStorageTexelBufferUpdateAfterBind, type = (VkBool32), offset = 116, size = 4
    name = descriptorBindingUpdateUnusedWhilePending, type = (VkBool32), offset = 120, size = 4
    name = descriptorBindingPartiallyBound, type = (VkBool32), offset = 124, size = 4
    name = descriptorBindingVariableDescriptorCount, type = (VkBool32), offset = 128, size = 4
    name = runtimeDescriptorArray, type = (VkBool32), offset = 132, size = 4
    name = samplerFilterMinmax, type = (VkBool32), offset = 136, size = 4
    name = scalarBlockLayout, type = (VkBool32), offset = 140, size = 4
    name = imagelessFramebuffer, type = (VkBool32), offset = 144, size = 4
    name = uniformBufferStandardLayout, type = (VkBool32), offset = 148, size = 4
    name = shaderSubgroupExtendedTypes, type = (VkBool32), offset = 152, size = 4
    name = separateDepthStencilLayouts, type = (VkBool32), offset = 156, size = 4
    name = hostQueryReset, type = (VkBool32), offset = 160, size = 4
    name = timelineSemaphore, type = (VkBool32), offset = 164, size = 4
    name = bufferDeviceAddress, type = (VkBool32), offset = 168, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 172, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 176, size = 4
    name = vulkanMemoryModel, type = (VkBool32), offset = 180, size = 4
    name = vulkanMemoryModelDeviceScope, type = (VkBool32), offset = 184, size = 4
    name = vulkanMemoryModelAvailabilityVisibilityChains, type = (VkBool32), offset = 188, size = 4
    name = shaderOutputViewportIndex, type = (VkBool32), offset = 192, size = 4
    name = shaderOutputLayer, type = (VkBool32), offset = 196, size = 4
    name = subgroupBroadcastDynamicId, type = (VkBool32), offset = 200, size = 4
} ; size: 208

struct VkConformanceVersion {
    name = major, type = (uint8_t), offset = 0, size = 1
    name = minor, type = (uint8_t), offset = 1, size = 1
    name = subminor, type = (uint8_t), offset = 2, size = 1
    name = patch, type = (uint8_t), offset = 3, size = 1
} ; size: 4

TYPEDEF VkConformanceVersion = struct VkConformanceVersion

struct VkConformanceVersion {
    name = major, type = (uint8_t), offset = 0, size = 1
    name = minor, type = (uint8_t), offset = 1, size = 1
    name = subminor, type = (uint8_t), offset = 2, size = 1
    name = patch, type = (uint8_t), offset = 3, size = 1
} ; size: 4

struct VkPhysicalDeviceVulkan12Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = driverID, type = (VkDriverId), offset = 16, size = 4
    name = driverName, type = (char[256]), offset = 20, size = 256
    name = driverInfo, type = (char[256]), offset = 276, size = 256
    name = conformanceVersion, type = (VkConformanceVersion), offset = 532, size = 4
    name = denormBehaviorIndependence, type = (VkShaderFloatControlsIndependence), offset = 536, size = 4
    name = roundingModeIndependence, type = (VkShaderFloatControlsIndependence), offset = 540, size = 4
    name = shaderSignedZeroInfNanPreserveFloat16, type = (VkBool32), offset = 544, size = 4
    name = shaderSignedZeroInfNanPreserveFloat32, type = (VkBool32), offset = 548, size = 4
    name = shaderSignedZeroInfNanPreserveFloat64, type = (VkBool32), offset = 552, size = 4
    name = shaderDenormPreserveFloat16, type = (VkBool32), offset = 556, size = 4
    name = shaderDenormPreserveFloat32, type = (VkBool32), offset = 560, size = 4
    name = shaderDenormPreserveFloat64, type = (VkBool32), offset = 564, size = 4
    name = shaderDenormFlushToZeroFloat16, type = (VkBool32), offset = 568, size = 4
    name = shaderDenormFlushToZeroFloat32, type = (VkBool32), offset = 572, size = 4
    name = shaderDenormFlushToZeroFloat64, type = (VkBool32), offset = 576, size = 4
    name = shaderRoundingModeRTEFloat16, type = (VkBool32), offset = 580, size = 4
    name = shaderRoundingModeRTEFloat32, type = (VkBool32), offset = 584, size = 4
    name = shaderRoundingModeRTEFloat64, type = (VkBool32), offset = 588, size = 4
    name = shaderRoundingModeRTZFloat16, type = (VkBool32), offset = 592, size = 4
    name = shaderRoundingModeRTZFloat32, type = (VkBool32), offset = 596, size = 4
    name = shaderRoundingModeRTZFloat64, type = (VkBool32), offset = 600, size = 4
    name = maxUpdateAfterBindDescriptorsInAllPools, type = (uint32_t), offset = 604, size = 4
    name = shaderUniformBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 608, size = 4
    name = shaderSampledImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 612, size = 4
    name = shaderStorageBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 616, size = 4
    name = shaderStorageImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 620, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexingNative, type = (VkBool32), offset = 624, size = 4
    name = robustBufferAccessUpdateAfterBind, type = (VkBool32), offset = 628, size = 4
    name = quadDivergentImplicitLod, type = (VkBool32), offset = 632, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSamplers, type = (uint32_t), offset = 636, size = 4
    name = maxPerStageDescriptorUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 640, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 644, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSampledImages, type = (uint32_t), offset = 648, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageImages, type = (uint32_t), offset = 652, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInputAttachments, type = (uint32_t), offset = 656, size = 4
    name = maxPerStageUpdateAfterBindResources, type = (uint32_t), offset = 660, size = 4
    name = maxDescriptorSetUpdateAfterBindSamplers, type = (uint32_t), offset = 664, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 668, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, type = (uint32_t), offset = 672, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 676, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, type = (uint32_t), offset = 680, size = 4
    name = maxDescriptorSetUpdateAfterBindSampledImages, type = (uint32_t), offset = 684, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageImages, type = (uint32_t), offset = 688, size = 4
    name = maxDescriptorSetUpdateAfterBindInputAttachments, type = (uint32_t), offset = 692, size = 4
    name = supportedDepthResolveModes, type = (VkResolveModeFlags), offset = 696, size = 4
    name = supportedStencilResolveModes, type = (VkResolveModeFlags), offset = 700, size = 4
    name = independentResolveNone, type = (VkBool32), offset = 704, size = 4
    name = independentResolve, type = (VkBool32), offset = 708, size = 4
    name = filterMinmaxSingleComponentFormats, type = (VkBool32), offset = 712, size = 4
    name = filterMinmaxImageComponentMapping, type = (VkBool32), offset = 716, size = 4
    name = maxTimelineSemaphoreValueDifference, type = (uint64_t), offset = 720, size = 8
    name = framebufferIntegerColorSampleCounts, type = (VkSampleCountFlags), offset = 728, size = 4
} ; size: 736

TYPEDEF VkPhysicalDeviceVulkan12Properties = struct VkPhysicalDeviceVulkan12Properties

struct VkPhysicalDeviceVulkan12Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = driverID, type = (VkDriverId), offset = 16, size = 4
    name = driverName, type = (char[256]), offset = 20, size = 256
    name = driverInfo, type = (char[256]), offset = 276, size = 256
    name = conformanceVersion, type = (VkConformanceVersion), offset = 532, size = 4
    name = denormBehaviorIndependence, type = (VkShaderFloatControlsIndependence), offset = 536, size = 4
    name = roundingModeIndependence, type = (VkShaderFloatControlsIndependence), offset = 540, size = 4
    name = shaderSignedZeroInfNanPreserveFloat16, type = (VkBool32), offset = 544, size = 4
    name = shaderSignedZeroInfNanPreserveFloat32, type = (VkBool32), offset = 548, size = 4
    name = shaderSignedZeroInfNanPreserveFloat64, type = (VkBool32), offset = 552, size = 4
    name = shaderDenormPreserveFloat16, type = (VkBool32), offset = 556, size = 4
    name = shaderDenormPreserveFloat32, type = (VkBool32), offset = 560, size = 4
    name = shaderDenormPreserveFloat64, type = (VkBool32), offset = 564, size = 4
    name = shaderDenormFlushToZeroFloat16, type = (VkBool32), offset = 568, size = 4
    name = shaderDenormFlushToZeroFloat32, type = (VkBool32), offset = 572, size = 4
    name = shaderDenormFlushToZeroFloat64, type = (VkBool32), offset = 576, size = 4
    name = shaderRoundingModeRTEFloat16, type = (VkBool32), offset = 580, size = 4
    name = shaderRoundingModeRTEFloat32, type = (VkBool32), offset = 584, size = 4
    name = shaderRoundingModeRTEFloat64, type = (VkBool32), offset = 588, size = 4
    name = shaderRoundingModeRTZFloat16, type = (VkBool32), offset = 592, size = 4
    name = shaderRoundingModeRTZFloat32, type = (VkBool32), offset = 596, size = 4
    name = shaderRoundingModeRTZFloat64, type = (VkBool32), offset = 600, size = 4
    name = maxUpdateAfterBindDescriptorsInAllPools, type = (uint32_t), offset = 604, size = 4
    name = shaderUniformBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 608, size = 4
    name = shaderSampledImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 612, size = 4
    name = shaderStorageBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 616, size = 4
    name = shaderStorageImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 620, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexingNative, type = (VkBool32), offset = 624, size = 4
    name = robustBufferAccessUpdateAfterBind, type = (VkBool32), offset = 628, size = 4
    name = quadDivergentImplicitLod, type = (VkBool32), offset = 632, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSamplers, type = (uint32_t), offset = 636, size = 4
    name = maxPerStageDescriptorUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 640, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 644, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSampledImages, type = (uint32_t), offset = 648, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageImages, type = (uint32_t), offset = 652, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInputAttachments, type = (uint32_t), offset = 656, size = 4
    name = maxPerStageUpdateAfterBindResources, type = (uint32_t), offset = 660, size = 4
    name = maxDescriptorSetUpdateAfterBindSamplers, type = (uint32_t), offset = 664, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 668, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, type = (uint32_t), offset = 672, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 676, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, type = (uint32_t), offset = 680, size = 4
    name = maxDescriptorSetUpdateAfterBindSampledImages, type = (uint32_t), offset = 684, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageImages, type = (uint32_t), offset = 688, size = 4
    name = maxDescriptorSetUpdateAfterBindInputAttachments, type = (uint32_t), offset = 692, size = 4
    name = supportedDepthResolveModes, type = (VkResolveModeFlags), offset = 696, size = 4
    name = supportedStencilResolveModes, type = (VkResolveModeFlags), offset = 700, size = 4
    name = independentResolveNone, type = (VkBool32), offset = 704, size = 4
    name = independentResolve, type = (VkBool32), offset = 708, size = 4
    name = filterMinmaxSingleComponentFormats, type = (VkBool32), offset = 712, size = 4
    name = filterMinmaxImageComponentMapping, type = (VkBool32), offset = 716, size = 4
    name = maxTimelineSemaphoreValueDifference, type = (uint64_t), offset = 720, size = 8
    name = framebufferIntegerColorSampleCounts, type = (VkSampleCountFlags), offset = 728, size = 4
} ; size: 736

struct VkImageFormatListCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewFormatCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pViewFormats, type = (const VkFormat *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImageFormatListCreateInfo = struct VkImageFormatListCreateInfo

struct VkImageFormatListCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewFormatCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pViewFormats, type = (const VkFormat *), offset = 24, size = 8
} ; size: 32

struct VkAttachmentDescription2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkAttachmentDescriptionFlags), offset = 16, size = 4
    name = format, type = (VkFormat), offset = 20, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 24, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 28, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 32, size = 4
    name = stencilLoadOp, type = (VkAttachmentLoadOp), offset = 36, size = 4
    name = stencilStoreOp, type = (VkAttachmentStoreOp), offset = 40, size = 4
    name = initialLayout, type = (VkImageLayout), offset = 44, size = 4
    name = finalLayout, type = (VkImageLayout), offset = 48, size = 4
} ; size: 56

TYPEDEF VkAttachmentDescription2 = struct VkAttachmentDescription2

struct VkAttachmentDescription2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkAttachmentDescriptionFlags), offset = 16, size = 4
    name = format, type = (VkFormat), offset = 20, size = 4
    name = samples, type = (VkSampleCountFlagBits), offset = 24, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 28, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 32, size = 4
    name = stencilLoadOp, type = (VkAttachmentLoadOp), offset = 36, size = 4
    name = stencilStoreOp, type = (VkAttachmentStoreOp), offset = 40, size = 4
    name = initialLayout, type = (VkImageLayout), offset = 44, size = 4
    name = finalLayout, type = (VkImageLayout), offset = 48, size = 4
} ; size: 56

struct VkAttachmentReference2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachment, type = (uint32_t), offset = 16, size = 4
    name = layout, type = (VkImageLayout), offset = 20, size = 4
    name = aspectMask, type = (VkImageAspectFlags), offset = 24, size = 4
} ; size: 32

TYPEDEF VkAttachmentReference2 = struct VkAttachmentReference2

struct VkAttachmentReference2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachment, type = (uint32_t), offset = 16, size = 4
    name = layout, type = (VkImageLayout), offset = 20, size = 4
    name = aspectMask, type = (VkImageAspectFlags), offset = 24, size = 4
} ; size: 32

struct VkSubpassDescription2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSubpassDescriptionFlags), offset = 16, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 20, size = 4
    name = viewMask, type = (uint32_t), offset = 24, size = 4
    name = inputAttachmentCount, type = (uint32_t), offset = 28, size = 4
    name = pInputAttachments, type = (const VkAttachmentReference2 *), offset = 32, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pColorAttachments, type = (const VkAttachmentReference2 *), offset = 48, size = 8
    name = pResolveAttachments, type = (const VkAttachmentReference2 *), offset = 56, size = 8
    name = pDepthStencilAttachment, type = (const VkAttachmentReference2 *), offset = 64, size = 8
    name = preserveAttachmentCount, type = (uint32_t), offset = 72, size = 4
    padding (4 bytes)
    name = pPreserveAttachments, type = (const uint32_t *), offset = 80, size = 8
} ; size: 88

TYPEDEF VkSubpassDescription2 = struct VkSubpassDescription2

struct VkSubpassDescription2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSubpassDescriptionFlags), offset = 16, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 20, size = 4
    name = viewMask, type = (uint32_t), offset = 24, size = 4
    name = inputAttachmentCount, type = (uint32_t), offset = 28, size = 4
    name = pInputAttachments, type = (const VkAttachmentReference2 *), offset = 32, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pColorAttachments, type = (const VkAttachmentReference2 *), offset = 48, size = 8
    name = pResolveAttachments, type = (const VkAttachmentReference2 *), offset = 56, size = 8
    name = pDepthStencilAttachment, type = (const VkAttachmentReference2 *), offset = 64, size = 8
    name = preserveAttachmentCount, type = (uint32_t), offset = 72, size = 4
    padding (4 bytes)
    name = pPreserveAttachments, type = (const uint32_t *), offset = 80, size = 8
} ; size: 88

struct VkSubpassDependency2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubpass, type = (uint32_t), offset = 16, size = 4
    name = dstSubpass, type = (uint32_t), offset = 20, size = 4
    name = srcStageMask, type = (VkPipelineStageFlags), offset = 24, size = 4
    name = dstStageMask, type = (VkPipelineStageFlags), offset = 28, size = 4
    name = srcAccessMask, type = (VkAccessFlags), offset = 32, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 36, size = 4
    name = dependencyFlags, type = (VkDependencyFlags), offset = 40, size = 4
    name = viewOffset, type = (int32_t), offset = 44, size = 4
} ; size: 48

TYPEDEF VkSubpassDependency2 = struct VkSubpassDependency2

struct VkSubpassDependency2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubpass, type = (uint32_t), offset = 16, size = 4
    name = dstSubpass, type = (uint32_t), offset = 20, size = 4
    name = srcStageMask, type = (VkPipelineStageFlags), offset = 24, size = 4
    name = dstStageMask, type = (VkPipelineStageFlags), offset = 28, size = 4
    name = srcAccessMask, type = (VkAccessFlags), offset = 32, size = 4
    name = dstAccessMask, type = (VkAccessFlags), offset = 36, size = 4
    name = dependencyFlags, type = (VkDependencyFlags), offset = 40, size = 4
    name = viewOffset, type = (int32_t), offset = 44, size = 4
} ; size: 48

struct VkRenderPassCreateInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderPassCreateFlags), offset = 16, size = 4
    name = attachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pAttachments, type = (const VkAttachmentDescription2 *), offset = 24, size = 8
    name = subpassCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSubpasses, type = (const VkSubpassDescription2 *), offset = 40, size = 8
    name = dependencyCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDependencies, type = (const VkSubpassDependency2 *), offset = 56, size = 8
    name = correlatedViewMaskCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pCorrelatedViewMasks, type = (const uint32_t *), offset = 72, size = 8
} ; size: 80

TYPEDEF VkRenderPassCreateInfo2 = struct VkRenderPassCreateInfo2

struct VkRenderPassCreateInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderPassCreateFlags), offset = 16, size = 4
    name = attachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pAttachments, type = (const VkAttachmentDescription2 *), offset = 24, size = 8
    name = subpassCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSubpasses, type = (const VkSubpassDescription2 *), offset = 40, size = 8
    name = dependencyCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDependencies, type = (const VkSubpassDependency2 *), offset = 56, size = 8
    name = correlatedViewMaskCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pCorrelatedViewMasks, type = (const uint32_t *), offset = 72, size = 8
} ; size: 80

struct VkSubpassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = contents, type = (VkSubpassContents), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSubpassBeginInfo = struct VkSubpassBeginInfo

struct VkSubpassBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = contents, type = (VkSubpassContents), offset = 16, size = 4
} ; size: 24

struct VkSubpassEndInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkSubpassEndInfo = struct VkSubpassEndInfo

struct VkSubpassEndInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
} ; size: 16

struct VkPhysicalDevice8BitStorageFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer8BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer8BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant8, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDevice8BitStorageFeatures = struct VkPhysicalDevice8BitStorageFeatures

struct VkPhysicalDevice8BitStorageFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageBuffer8BitAccess, type = (VkBool32), offset = 16, size = 4
    name = uniformAndStorageBuffer8BitAccess, type = (VkBool32), offset = 20, size = 4
    name = storagePushConstant8, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceDriverProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = driverID, type = (VkDriverId), offset = 16, size = 4
    name = driverName, type = (char[256]), offset = 20, size = 256
    name = driverInfo, type = (char[256]), offset = 276, size = 256
    name = conformanceVersion, type = (VkConformanceVersion), offset = 532, size = 4
} ; size: 536

TYPEDEF VkPhysicalDeviceDriverProperties = struct VkPhysicalDeviceDriverProperties

struct VkPhysicalDeviceDriverProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = driverID, type = (VkDriverId), offset = 16, size = 4
    name = driverName, type = (char[256]), offset = 20, size = 256
    name = driverInfo, type = (char[256]), offset = 276, size = 256
    name = conformanceVersion, type = (VkConformanceVersion), offset = 532, size = 4
} ; size: 536

struct VkPhysicalDeviceShaderAtomicInt64Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferInt64Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderSharedInt64Atomics, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderAtomicInt64Features = struct VkPhysicalDeviceShaderAtomicInt64Features

struct VkPhysicalDeviceShaderAtomicInt64Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferInt64Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderSharedInt64Atomics, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderFloat16Int8Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloat16, type = (VkBool32), offset = 16, size = 4
    name = shaderInt8, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderFloat16Int8Features = struct VkPhysicalDeviceShaderFloat16Int8Features

struct VkPhysicalDeviceShaderFloat16Int8Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloat16, type = (VkBool32), offset = 16, size = 4
    name = shaderInt8, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceFloatControlsProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = denormBehaviorIndependence, type = (VkShaderFloatControlsIndependence), offset = 16, size = 4
    name = roundingModeIndependence, type = (VkShaderFloatControlsIndependence), offset = 20, size = 4
    name = shaderSignedZeroInfNanPreserveFloat16, type = (VkBool32), offset = 24, size = 4
    name = shaderSignedZeroInfNanPreserveFloat32, type = (VkBool32), offset = 28, size = 4
    name = shaderSignedZeroInfNanPreserveFloat64, type = (VkBool32), offset = 32, size = 4
    name = shaderDenormPreserveFloat16, type = (VkBool32), offset = 36, size = 4
    name = shaderDenormPreserveFloat32, type = (VkBool32), offset = 40, size = 4
    name = shaderDenormPreserveFloat64, type = (VkBool32), offset = 44, size = 4
    name = shaderDenormFlushToZeroFloat16, type = (VkBool32), offset = 48, size = 4
    name = shaderDenormFlushToZeroFloat32, type = (VkBool32), offset = 52, size = 4
    name = shaderDenormFlushToZeroFloat64, type = (VkBool32), offset = 56, size = 4
    name = shaderRoundingModeRTEFloat16, type = (VkBool32), offset = 60, size = 4
    name = shaderRoundingModeRTEFloat32, type = (VkBool32), offset = 64, size = 4
    name = shaderRoundingModeRTEFloat64, type = (VkBool32), offset = 68, size = 4
    name = shaderRoundingModeRTZFloat16, type = (VkBool32), offset = 72, size = 4
    name = shaderRoundingModeRTZFloat32, type = (VkBool32), offset = 76, size = 4
    name = shaderRoundingModeRTZFloat64, type = (VkBool32), offset = 80, size = 4
} ; size: 88

TYPEDEF VkPhysicalDeviceFloatControlsProperties = struct VkPhysicalDeviceFloatControlsProperties

struct VkPhysicalDeviceFloatControlsProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = denormBehaviorIndependence, type = (VkShaderFloatControlsIndependence), offset = 16, size = 4
    name = roundingModeIndependence, type = (VkShaderFloatControlsIndependence), offset = 20, size = 4
    name = shaderSignedZeroInfNanPreserveFloat16, type = (VkBool32), offset = 24, size = 4
    name = shaderSignedZeroInfNanPreserveFloat32, type = (VkBool32), offset = 28, size = 4
    name = shaderSignedZeroInfNanPreserveFloat64, type = (VkBool32), offset = 32, size = 4
    name = shaderDenormPreserveFloat16, type = (VkBool32), offset = 36, size = 4
    name = shaderDenormPreserveFloat32, type = (VkBool32), offset = 40, size = 4
    name = shaderDenormPreserveFloat64, type = (VkBool32), offset = 44, size = 4
    name = shaderDenormFlushToZeroFloat16, type = (VkBool32), offset = 48, size = 4
    name = shaderDenormFlushToZeroFloat32, type = (VkBool32), offset = 52, size = 4
    name = shaderDenormFlushToZeroFloat64, type = (VkBool32), offset = 56, size = 4
    name = shaderRoundingModeRTEFloat16, type = (VkBool32), offset = 60, size = 4
    name = shaderRoundingModeRTEFloat32, type = (VkBool32), offset = 64, size = 4
    name = shaderRoundingModeRTEFloat64, type = (VkBool32), offset = 68, size = 4
    name = shaderRoundingModeRTZFloat16, type = (VkBool32), offset = 72, size = 4
    name = shaderRoundingModeRTZFloat32, type = (VkBool32), offset = 76, size = 4
    name = shaderRoundingModeRTZFloat64, type = (VkBool32), offset = 80, size = 4
} ; size: 88

struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = bindingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pBindingFlags, type = (const VkDescriptorBindingFlags *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorSetLayoutBindingFlagsCreateInfo = struct VkDescriptorSetLayoutBindingFlagsCreateInfo

struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = bindingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pBindingFlags, type = (const VkDescriptorBindingFlags *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceDescriptorIndexingFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderInputAttachmentArrayDynamicIndexing, type = (VkBool32), offset = 16, size = 4
    name = shaderUniformTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 20, size = 4
    name = shaderStorageTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 24, size = 4
    name = shaderUniformBufferArrayNonUniformIndexing, type = (VkBool32), offset = 28, size = 4
    name = shaderSampledImageArrayNonUniformIndexing, type = (VkBool32), offset = 32, size = 4
    name = shaderStorageBufferArrayNonUniformIndexing, type = (VkBool32), offset = 36, size = 4
    name = shaderStorageImageArrayNonUniformIndexing, type = (VkBool32), offset = 40, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexing, type = (VkBool32), offset = 44, size = 4
    name = shaderUniformTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 48, size = 4
    name = shaderStorageTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 52, size = 4
    name = descriptorBindingUniformBufferUpdateAfterBind, type = (VkBool32), offset = 56, size = 4
    name = descriptorBindingSampledImageUpdateAfterBind, type = (VkBool32), offset = 60, size = 4
    name = descriptorBindingStorageImageUpdateAfterBind, type = (VkBool32), offset = 64, size = 4
    name = descriptorBindingStorageBufferUpdateAfterBind, type = (VkBool32), offset = 68, size = 4
    name = descriptorBindingUniformTexelBufferUpdateAfterBind, type = (VkBool32), offset = 72, size = 4
    name = descriptorBindingStorageTexelBufferUpdateAfterBind, type = (VkBool32), offset = 76, size = 4
    name = descriptorBindingUpdateUnusedWhilePending, type = (VkBool32), offset = 80, size = 4
    name = descriptorBindingPartiallyBound, type = (VkBool32), offset = 84, size = 4
    name = descriptorBindingVariableDescriptorCount, type = (VkBool32), offset = 88, size = 4
    name = runtimeDescriptorArray, type = (VkBool32), offset = 92, size = 4
} ; size: 96

TYPEDEF VkPhysicalDeviceDescriptorIndexingFeatures = struct VkPhysicalDeviceDescriptorIndexingFeatures

struct VkPhysicalDeviceDescriptorIndexingFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderInputAttachmentArrayDynamicIndexing, type = (VkBool32), offset = 16, size = 4
    name = shaderUniformTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 20, size = 4
    name = shaderStorageTexelBufferArrayDynamicIndexing, type = (VkBool32), offset = 24, size = 4
    name = shaderUniformBufferArrayNonUniformIndexing, type = (VkBool32), offset = 28, size = 4
    name = shaderSampledImageArrayNonUniformIndexing, type = (VkBool32), offset = 32, size = 4
    name = shaderStorageBufferArrayNonUniformIndexing, type = (VkBool32), offset = 36, size = 4
    name = shaderStorageImageArrayNonUniformIndexing, type = (VkBool32), offset = 40, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexing, type = (VkBool32), offset = 44, size = 4
    name = shaderUniformTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 48, size = 4
    name = shaderStorageTexelBufferArrayNonUniformIndexing, type = (VkBool32), offset = 52, size = 4
    name = descriptorBindingUniformBufferUpdateAfterBind, type = (VkBool32), offset = 56, size = 4
    name = descriptorBindingSampledImageUpdateAfterBind, type = (VkBool32), offset = 60, size = 4
    name = descriptorBindingStorageImageUpdateAfterBind, type = (VkBool32), offset = 64, size = 4
    name = descriptorBindingStorageBufferUpdateAfterBind, type = (VkBool32), offset = 68, size = 4
    name = descriptorBindingUniformTexelBufferUpdateAfterBind, type = (VkBool32), offset = 72, size = 4
    name = descriptorBindingStorageTexelBufferUpdateAfterBind, type = (VkBool32), offset = 76, size = 4
    name = descriptorBindingUpdateUnusedWhilePending, type = (VkBool32), offset = 80, size = 4
    name = descriptorBindingPartiallyBound, type = (VkBool32), offset = 84, size = 4
    name = descriptorBindingVariableDescriptorCount, type = (VkBool32), offset = 88, size = 4
    name = runtimeDescriptorArray, type = (VkBool32), offset = 92, size = 4
} ; size: 96

struct VkPhysicalDeviceDescriptorIndexingProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxUpdateAfterBindDescriptorsInAllPools, type = (uint32_t), offset = 16, size = 4
    name = shaderUniformBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 20, size = 4
    name = shaderSampledImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 24, size = 4
    name = shaderStorageBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 28, size = 4
    name = shaderStorageImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 32, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexingNative, type = (VkBool32), offset = 36, size = 4
    name = robustBufferAccessUpdateAfterBind, type = (VkBool32), offset = 40, size = 4
    name = quadDivergentImplicitLod, type = (VkBool32), offset = 44, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSamplers, type = (uint32_t), offset = 48, size = 4
    name = maxPerStageDescriptorUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 52, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 56, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSampledImages, type = (uint32_t), offset = 60, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageImages, type = (uint32_t), offset = 64, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInputAttachments, type = (uint32_t), offset = 68, size = 4
    name = maxPerStageUpdateAfterBindResources, type = (uint32_t), offset = 72, size = 4
    name = maxDescriptorSetUpdateAfterBindSamplers, type = (uint32_t), offset = 76, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 80, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, type = (uint32_t), offset = 84, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 88, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, type = (uint32_t), offset = 92, size = 4
    name = maxDescriptorSetUpdateAfterBindSampledImages, type = (uint32_t), offset = 96, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageImages, type = (uint32_t), offset = 100, size = 4
    name = maxDescriptorSetUpdateAfterBindInputAttachments, type = (uint32_t), offset = 104, size = 4
} ; size: 112

TYPEDEF VkPhysicalDeviceDescriptorIndexingProperties = struct VkPhysicalDeviceDescriptorIndexingProperties

struct VkPhysicalDeviceDescriptorIndexingProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxUpdateAfterBindDescriptorsInAllPools, type = (uint32_t), offset = 16, size = 4
    name = shaderUniformBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 20, size = 4
    name = shaderSampledImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 24, size = 4
    name = shaderStorageBufferArrayNonUniformIndexingNative, type = (VkBool32), offset = 28, size = 4
    name = shaderStorageImageArrayNonUniformIndexingNative, type = (VkBool32), offset = 32, size = 4
    name = shaderInputAttachmentArrayNonUniformIndexingNative, type = (VkBool32), offset = 36, size = 4
    name = robustBufferAccessUpdateAfterBind, type = (VkBool32), offset = 40, size = 4
    name = quadDivergentImplicitLod, type = (VkBool32), offset = 44, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSamplers, type = (uint32_t), offset = 48, size = 4
    name = maxPerStageDescriptorUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 52, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 56, size = 4
    name = maxPerStageDescriptorUpdateAfterBindSampledImages, type = (uint32_t), offset = 60, size = 4
    name = maxPerStageDescriptorUpdateAfterBindStorageImages, type = (uint32_t), offset = 64, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInputAttachments, type = (uint32_t), offset = 68, size = 4
    name = maxPerStageUpdateAfterBindResources, type = (uint32_t), offset = 72, size = 4
    name = maxDescriptorSetUpdateAfterBindSamplers, type = (uint32_t), offset = 76, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffers, type = (uint32_t), offset = 80, size = 4
    name = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, type = (uint32_t), offset = 84, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffers, type = (uint32_t), offset = 88, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, type = (uint32_t), offset = 92, size = 4
    name = maxDescriptorSetUpdateAfterBindSampledImages, type = (uint32_t), offset = 96, size = 4
    name = maxDescriptorSetUpdateAfterBindStorageImages, type = (uint32_t), offset = 100, size = 4
    name = maxDescriptorSetUpdateAfterBindInputAttachments, type = (uint32_t), offset = 104, size = 4
} ; size: 112

struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorSetCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDescriptorCounts, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorSetVariableDescriptorCountAllocateInfo = struct VkDescriptorSetVariableDescriptorCountAllocateInfo

struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorSetCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDescriptorCounts, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVariableDescriptorCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDescriptorSetVariableDescriptorCountLayoutSupport = struct VkDescriptorSetVariableDescriptorCountLayoutSupport

struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVariableDescriptorCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkSubpassDescriptionDepthStencilResolve {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthResolveMode, type = (VkResolveModeFlagBits), offset = 16, size = 4
    name = stencilResolveMode, type = (VkResolveModeFlagBits), offset = 20, size = 4
    name = pDepthStencilResolveAttachment, type = (const VkAttachmentReference2 *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSubpassDescriptionDepthStencilResolve = struct VkSubpassDescriptionDepthStencilResolve

struct VkSubpassDescriptionDepthStencilResolve {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthResolveMode, type = (VkResolveModeFlagBits), offset = 16, size = 4
    name = stencilResolveMode, type = (VkResolveModeFlagBits), offset = 20, size = 4
    name = pDepthStencilResolveAttachment, type = (const VkAttachmentReference2 *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceDepthStencilResolveProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedDepthResolveModes, type = (VkResolveModeFlags), offset = 16, size = 4
    name = supportedStencilResolveModes, type = (VkResolveModeFlags), offset = 20, size = 4
    name = independentResolveNone, type = (VkBool32), offset = 24, size = 4
    name = independentResolve, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceDepthStencilResolveProperties = struct VkPhysicalDeviceDepthStencilResolveProperties

struct VkPhysicalDeviceDepthStencilResolveProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedDepthResolveModes, type = (VkResolveModeFlags), offset = 16, size = 4
    name = supportedStencilResolveModes, type = (VkResolveModeFlags), offset = 20, size = 4
    name = independentResolveNone, type = (VkBool32), offset = 24, size = 4
    name = independentResolve, type = (VkBool32), offset = 28, size = 4
} ; size: 32

struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = scalarBlockLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceScalarBlockLayoutFeatures = struct VkPhysicalDeviceScalarBlockLayoutFeatures

struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = scalarBlockLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkImageStencilUsageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stencilUsage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkImageStencilUsageCreateInfo = struct VkImageStencilUsageCreateInfo

struct VkImageStencilUsageCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stencilUsage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

struct VkSamplerReductionModeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = reductionMode, type = (VkSamplerReductionMode), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSamplerReductionModeCreateInfo = struct VkSamplerReductionModeCreateInfo

struct VkSamplerReductionModeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = reductionMode, type = (VkSamplerReductionMode), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = filterMinmaxSingleComponentFormats, type = (VkBool32), offset = 16, size = 4
    name = filterMinmaxImageComponentMapping, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSamplerFilterMinmaxProperties = struct VkPhysicalDeviceSamplerFilterMinmaxProperties

struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = filterMinmaxSingleComponentFormats, type = (VkBool32), offset = 16, size = 4
    name = filterMinmaxImageComponentMapping, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vulkanMemoryModel, type = (VkBool32), offset = 16, size = 4
    name = vulkanMemoryModelDeviceScope, type = (VkBool32), offset = 20, size = 4
    name = vulkanMemoryModelAvailabilityVisibilityChains, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceVulkanMemoryModelFeatures = struct VkPhysicalDeviceVulkanMemoryModelFeatures

struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vulkanMemoryModel, type = (VkBool32), offset = 16, size = 4
    name = vulkanMemoryModelDeviceScope, type = (VkBool32), offset = 20, size = 4
    name = vulkanMemoryModelAvailabilityVisibilityChains, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceImagelessFramebufferFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imagelessFramebuffer, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImagelessFramebufferFeatures = struct VkPhysicalDeviceImagelessFramebufferFeatures

struct VkPhysicalDeviceImagelessFramebufferFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imagelessFramebuffer, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkFramebufferAttachmentImageInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCreateFlags), offset = 16, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 20, size = 4
    name = width, type = (uint32_t), offset = 24, size = 4
    name = height, type = (uint32_t), offset = 28, size = 4
    name = layerCount, type = (uint32_t), offset = 32, size = 4
    name = viewFormatCount, type = (uint32_t), offset = 36, size = 4
    name = pViewFormats, type = (const VkFormat *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkFramebufferAttachmentImageInfo = struct VkFramebufferAttachmentImageInfo

struct VkFramebufferAttachmentImageInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCreateFlags), offset = 16, size = 4
    name = usage, type = (VkImageUsageFlags), offset = 20, size = 4
    name = width, type = (uint32_t), offset = 24, size = 4
    name = height, type = (uint32_t), offset = 28, size = 4
    name = layerCount, type = (uint32_t), offset = 32, size = 4
    name = viewFormatCount, type = (uint32_t), offset = 36, size = 4
    name = pViewFormats, type = (const VkFormat *), offset = 40, size = 8
} ; size: 48

struct VkFramebufferAttachmentsCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentImageInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachmentImageInfos, type = (const VkFramebufferAttachmentImageInfo *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkFramebufferAttachmentsCreateInfo = struct VkFramebufferAttachmentsCreateInfo

struct VkFramebufferAttachmentsCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentImageInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachmentImageInfos, type = (const VkFramebufferAttachmentImageInfo *), offset = 24, size = 8
} ; size: 32

struct VkRenderPassAttachmentBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachments, type = (const VkImageView *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkRenderPassAttachmentBeginInfo = struct VkRenderPassAttachmentBeginInfo

struct VkRenderPassAttachmentBeginInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachments, type = (const VkImageView *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = uniformBufferStandardLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures

struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = uniformBufferStandardLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupExtendedTypes, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures

struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupExtendedTypes, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = separateDepthStencilLayouts, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures

struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = separateDepthStencilLayouts, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkAttachmentReferenceStencilLayout {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stencilLayout, type = (VkImageLayout), offset = 16, size = 4
} ; size: 24

TYPEDEF VkAttachmentReferenceStencilLayout = struct VkAttachmentReferenceStencilLayout

struct VkAttachmentReferenceStencilLayout {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stencilLayout, type = (VkImageLayout), offset = 16, size = 4
} ; size: 24

struct VkAttachmentDescriptionStencilLayout {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stencilInitialLayout, type = (VkImageLayout), offset = 16, size = 4
    name = stencilFinalLayout, type = (VkImageLayout), offset = 20, size = 4
} ; size: 24

TYPEDEF VkAttachmentDescriptionStencilLayout = struct VkAttachmentDescriptionStencilLayout

struct VkAttachmentDescriptionStencilLayout {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stencilInitialLayout, type = (VkImageLayout), offset = 16, size = 4
    name = stencilFinalLayout, type = (VkImageLayout), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceHostQueryResetFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hostQueryReset, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceHostQueryResetFeatures = struct VkPhysicalDeviceHostQueryResetFeatures

struct VkPhysicalDeviceHostQueryResetFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hostQueryReset, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = timelineSemaphore, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTimelineSemaphoreFeatures = struct VkPhysicalDeviceTimelineSemaphoreFeatures

struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = timelineSemaphore, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceTimelineSemaphoreProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTimelineSemaphoreValueDifference, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceTimelineSemaphoreProperties = struct VkPhysicalDeviceTimelineSemaphoreProperties

struct VkPhysicalDeviceTimelineSemaphoreProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTimelineSemaphoreValueDifference, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkSemaphoreTypeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphoreType, type = (VkSemaphoreType), offset = 16, size = 4
    padding (4 bytes)
    name = initialValue, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSemaphoreTypeCreateInfo = struct VkSemaphoreTypeCreateInfo

struct VkSemaphoreTypeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphoreType, type = (VkSemaphoreType), offset = 16, size = 4
    padding (4 bytes)
    name = initialValue, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkTimelineSemaphoreSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreValueCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphoreValues, type = (const uint64_t *), offset = 24, size = 8
    name = signalSemaphoreValueCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreValues, type = (const uint64_t *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkTimelineSemaphoreSubmitInfo = struct VkTimelineSemaphoreSubmitInfo

struct VkTimelineSemaphoreSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreValueCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphoreValues, type = (const uint64_t *), offset = 24, size = 8
    name = signalSemaphoreValueCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreValues, type = (const uint64_t *), offset = 40, size = 8
} ; size: 48

struct VkSemaphoreWaitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSemaphoreWaitFlags), offset = 16, size = 4
    name = semaphoreCount, type = (uint32_t), offset = 20, size = 4
    name = pSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = pValues, type = (const uint64_t *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkSemaphoreWaitInfo = struct VkSemaphoreWaitInfo

struct VkSemaphoreWaitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSemaphoreWaitFlags), offset = 16, size = 4
    name = semaphoreCount, type = (uint32_t), offset = 20, size = 4
    name = pSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = pValues, type = (const uint64_t *), offset = 32, size = 8
} ; size: 40

struct VkSemaphoreSignalInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSemaphoreSignalInfo = struct VkSemaphoreSignalInfo

struct VkSemaphoreSignalInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = bufferDeviceAddress, type = (VkBool32), offset = 16, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceBufferDeviceAddressFeatures = struct VkPhysicalDeviceBufferDeviceAddressFeatures

struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = bufferDeviceAddress, type = (VkBool32), offset = 16, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkBufferDeviceAddressInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferDeviceAddressInfo = struct VkBufferDeviceAddressInfo

struct VkBufferDeviceAddressInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

struct VkBufferOpaqueCaptureAddressCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureAddress, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferOpaqueCaptureAddressCreateInfo = struct VkBufferOpaqueCaptureAddressCreateInfo

struct VkBufferOpaqueCaptureAddressCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureAddress, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureAddress, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkMemoryOpaqueCaptureAddressAllocateInfo = struct VkMemoryOpaqueCaptureAddressAllocateInfo

struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureAddress, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDeviceMemoryOpaqueCaptureAddressInfo = struct VkDeviceMemoryOpaqueCaptureAddressInfo

struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkCmdDrawIndirectCount = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndexedIndirectCount = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCreateRenderPass2 = VkResult (*)(VkDevice, const VkRenderPassCreateInfo2 *, const VkAllocationCallbacks *, VkRenderPass *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginRenderPass2 = void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdNextSubpass2 = void (*)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndRenderPass2 = void (*)(VkCommandBuffer, const VkSubpassEndInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkResetQueryPool = void (*)(VkDevice, VkQueryPool, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetSemaphoreCounterValue = VkResult (*)(VkDevice, VkSemaphore, uint64_t *) __attribute__((stdcall))

TYPEDEF PFN_vkWaitSemaphores = VkResult (*)(VkDevice, const VkSemaphoreWaitInfo *, uint64_t) __attribute__((stdcall))

TYPEDEF PFN_vkSignalSemaphore = VkResult (*)(VkDevice, const VkSemaphoreSignalInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferDeviceAddress = VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferOpaqueCaptureAddress = uint64_t (*)(VkDevice, const VkBufferDeviceAddressInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceMemoryOpaqueCaptureAddress = uint64_t (*)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo *) __attribute__((stdcall))

FUNC void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

FUNC void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

FUNC VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass)

FUNC void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo)

FUNC void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo)

FUNC void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo)

FUNC void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)

FUNC VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t * pValue)

FUNC VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout)

FUNC VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo)

FUNC VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo * pInfo)

FUNC uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo * pInfo)

FUNC uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo)

TYPEDEF VkFlags64 = uint64_t

TYPEDEF VkPrivateDataSlot = struct VkPrivateDataSlot_T *

ENUM VkPipelineCreationFeedbackFlagBits {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCreationFeedbackFlagBits = enum VkPipelineCreationFeedbackFlagBits

ENUM VkPipelineCreationFeedbackFlagBits {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkPipelineCreationFeedbackFlags = VkFlags

ENUM VkToolPurposeFlagBits {
    VK_TOOL_PURPOSE_VALIDATION_BIT = 1
    VK_TOOL_PURPOSE_PROFILING_BIT = 2
    VK_TOOL_PURPOSE_TRACING_BIT = 4
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkToolPurposeFlagBits = enum VkToolPurposeFlagBits

ENUM VkToolPurposeFlagBits {
    VK_TOOL_PURPOSE_VALIDATION_BIT = 1
    VK_TOOL_PURPOSE_PROFILING_BIT = 2
    VK_TOOL_PURPOSE_TRACING_BIT = 4
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkToolPurposeFlags = VkFlags

TYPEDEF VkPrivateDataSlotCreateFlags = VkFlags

TYPEDEF VkPipelineStageFlags2 = VkFlags64

TYPEDEF VkPipelineStageFlagBits2 = VkFlags64

TYPEDEF VkAccessFlags2 = VkFlags64

TYPEDEF VkAccessFlagBits2 = VkFlags64

ENUM VkSubmitFlagBits {
    VK_SUBMIT_PROTECTED_BIT = 1
    VK_SUBMIT_PROTECTED_BIT_KHR = 1
    VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubmitFlagBits = enum VkSubmitFlagBits

ENUM VkSubmitFlagBits {
    VK_SUBMIT_PROTECTED_BIT = 1
    VK_SUBMIT_PROTECTED_BIT_KHR = 1
    VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkSubmitFlags = VkFlags

ENUM VkRenderingFlagBits {
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1
    VK_RENDERING_SUSPENDING_BIT = 2
    VK_RENDERING_RESUMING_BIT = 4
    VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16
    VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1
    VK_RENDERING_SUSPENDING_BIT_KHR = 2
    VK_RENDERING_RESUMING_BIT_KHR = 4
    VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkRenderingFlagBits = enum VkRenderingFlagBits

ENUM VkRenderingFlagBits {
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1
    VK_RENDERING_SUSPENDING_BIT = 2
    VK_RENDERING_RESUMING_BIT = 4
    VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16
    VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1
    VK_RENDERING_SUSPENDING_BIT_KHR = 2
    VK_RENDERING_RESUMING_BIT_KHR = 4
    VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647
}

TYPEDEF VkRenderingFlags = VkFlags

TYPEDEF VkFormatFeatureFlags2 = VkFlags64

TYPEDEF VkFormatFeatureFlagBits2 = VkFlags64

struct VkPhysicalDeviceVulkan13Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustImageAccess, type = (VkBool32), offset = 16, size = 4
    name = inlineUniformBlock, type = (VkBool32), offset = 20, size = 4
    name = descriptorBindingInlineUniformBlockUpdateAfterBind, type = (VkBool32), offset = 24, size = 4
    name = pipelineCreationCacheControl, type = (VkBool32), offset = 28, size = 4
    name = privateData, type = (VkBool32), offset = 32, size = 4
    name = shaderDemoteToHelperInvocation, type = (VkBool32), offset = 36, size = 4
    name = shaderTerminateInvocation, type = (VkBool32), offset = 40, size = 4
    name = subgroupSizeControl, type = (VkBool32), offset = 44, size = 4
    name = computeFullSubgroups, type = (VkBool32), offset = 48, size = 4
    name = synchronization2, type = (VkBool32), offset = 52, size = 4
    name = textureCompressionASTC_HDR, type = (VkBool32), offset = 56, size = 4
    name = shaderZeroInitializeWorkgroupMemory, type = (VkBool32), offset = 60, size = 4
    name = dynamicRendering, type = (VkBool32), offset = 64, size = 4
    name = shaderIntegerDotProduct, type = (VkBool32), offset = 68, size = 4
    name = maintenance4, type = (VkBool32), offset = 72, size = 4
} ; size: 80

TYPEDEF VkPhysicalDeviceVulkan13Features = struct VkPhysicalDeviceVulkan13Features

struct VkPhysicalDeviceVulkan13Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustImageAccess, type = (VkBool32), offset = 16, size = 4
    name = inlineUniformBlock, type = (VkBool32), offset = 20, size = 4
    name = descriptorBindingInlineUniformBlockUpdateAfterBind, type = (VkBool32), offset = 24, size = 4
    name = pipelineCreationCacheControl, type = (VkBool32), offset = 28, size = 4
    name = privateData, type = (VkBool32), offset = 32, size = 4
    name = shaderDemoteToHelperInvocation, type = (VkBool32), offset = 36, size = 4
    name = shaderTerminateInvocation, type = (VkBool32), offset = 40, size = 4
    name = subgroupSizeControl, type = (VkBool32), offset = 44, size = 4
    name = computeFullSubgroups, type = (VkBool32), offset = 48, size = 4
    name = synchronization2, type = (VkBool32), offset = 52, size = 4
    name = textureCompressionASTC_HDR, type = (VkBool32), offset = 56, size = 4
    name = shaderZeroInitializeWorkgroupMemory, type = (VkBool32), offset = 60, size = 4
    name = dynamicRendering, type = (VkBool32), offset = 64, size = 4
    name = shaderIntegerDotProduct, type = (VkBool32), offset = 68, size = 4
    name = maintenance4, type = (VkBool32), offset = 72, size = 4
} ; size: 80

struct VkPhysicalDeviceVulkan13Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minSubgroupSize, type = (uint32_t), offset = 16, size = 4
    name = maxSubgroupSize, type = (uint32_t), offset = 20, size = 4
    name = maxComputeWorkgroupSubgroups, type = (uint32_t), offset = 24, size = 4
    name = requiredSubgroupSizeStages, type = (VkShaderStageFlags), offset = 28, size = 4
    name = maxInlineUniformBlockSize, type = (uint32_t), offset = 32, size = 4
    name = maxPerStageDescriptorInlineUniformBlocks, type = (uint32_t), offset = 36, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 40, size = 4
    name = maxDescriptorSetInlineUniformBlocks, type = (uint32_t), offset = 44, size = 4
    name = maxDescriptorSetUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 48, size = 4
    name = maxInlineUniformTotalSize, type = (uint32_t), offset = 52, size = 4
    name = integerDotProduct8BitUnsignedAccelerated, type = (VkBool32), offset = 56, size = 4
    name = integerDotProduct8BitSignedAccelerated, type = (VkBool32), offset = 60, size = 4
    name = integerDotProduct8BitMixedSignednessAccelerated, type = (VkBool32), offset = 64, size = 4
    name = integerDotProduct4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 68, size = 4
    name = integerDotProduct4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 72, size = 4
    name = integerDotProduct4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 76, size = 4
    name = integerDotProduct16BitUnsignedAccelerated, type = (VkBool32), offset = 80, size = 4
    name = integerDotProduct16BitSignedAccelerated, type = (VkBool32), offset = 84, size = 4
    name = integerDotProduct16BitMixedSignednessAccelerated, type = (VkBool32), offset = 88, size = 4
    name = integerDotProduct32BitUnsignedAccelerated, type = (VkBool32), offset = 92, size = 4
    name = integerDotProduct32BitSignedAccelerated, type = (VkBool32), offset = 96, size = 4
    name = integerDotProduct32BitMixedSignednessAccelerated, type = (VkBool32), offset = 100, size = 4
    name = integerDotProduct64BitUnsignedAccelerated, type = (VkBool32), offset = 104, size = 4
    name = integerDotProduct64BitSignedAccelerated, type = (VkBool32), offset = 108, size = 4
    name = integerDotProduct64BitMixedSignednessAccelerated, type = (VkBool32), offset = 112, size = 4
    name = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, type = (VkBool32), offset = 116, size = 4
    name = integerDotProductAccumulatingSaturating8BitSignedAccelerated, type = (VkBool32), offset = 120, size = 4
    name = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, type = (VkBool32), offset = 124, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 128, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 132, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 136, size = 4
    name = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, type = (VkBool32), offset = 140, size = 4
    name = integerDotProductAccumulatingSaturating16BitSignedAccelerated, type = (VkBool32), offset = 144, size = 4
    name = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, type = (VkBool32), offset = 148, size = 4
    name = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, type = (VkBool32), offset = 152, size = 4
    name = integerDotProductAccumulatingSaturating32BitSignedAccelerated, type = (VkBool32), offset = 156, size = 4
    name = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, type = (VkBool32), offset = 160, size = 4
    name = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, type = (VkBool32), offset = 164, size = 4
    name = integerDotProductAccumulatingSaturating64BitSignedAccelerated, type = (VkBool32), offset = 168, size = 4
    name = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, type = (VkBool32), offset = 172, size = 4
    name = storageTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 176, size = 8
    name = storageTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 184, size = 4
    padding (4 bytes)
    name = uniformTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 192, size = 8
    name = uniformTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 200, size = 4
    padding (4 bytes)
    name = maxBufferSize, type = (VkDeviceSize), offset = 208, size = 8
} ; size: 216

TYPEDEF VkPhysicalDeviceVulkan13Properties = struct VkPhysicalDeviceVulkan13Properties

struct VkPhysicalDeviceVulkan13Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minSubgroupSize, type = (uint32_t), offset = 16, size = 4
    name = maxSubgroupSize, type = (uint32_t), offset = 20, size = 4
    name = maxComputeWorkgroupSubgroups, type = (uint32_t), offset = 24, size = 4
    name = requiredSubgroupSizeStages, type = (VkShaderStageFlags), offset = 28, size = 4
    name = maxInlineUniformBlockSize, type = (uint32_t), offset = 32, size = 4
    name = maxPerStageDescriptorInlineUniformBlocks, type = (uint32_t), offset = 36, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 40, size = 4
    name = maxDescriptorSetInlineUniformBlocks, type = (uint32_t), offset = 44, size = 4
    name = maxDescriptorSetUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 48, size = 4
    name = maxInlineUniformTotalSize, type = (uint32_t), offset = 52, size = 4
    name = integerDotProduct8BitUnsignedAccelerated, type = (VkBool32), offset = 56, size = 4
    name = integerDotProduct8BitSignedAccelerated, type = (VkBool32), offset = 60, size = 4
    name = integerDotProduct8BitMixedSignednessAccelerated, type = (VkBool32), offset = 64, size = 4
    name = integerDotProduct4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 68, size = 4
    name = integerDotProduct4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 72, size = 4
    name = integerDotProduct4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 76, size = 4
    name = integerDotProduct16BitUnsignedAccelerated, type = (VkBool32), offset = 80, size = 4
    name = integerDotProduct16BitSignedAccelerated, type = (VkBool32), offset = 84, size = 4
    name = integerDotProduct16BitMixedSignednessAccelerated, type = (VkBool32), offset = 88, size = 4
    name = integerDotProduct32BitUnsignedAccelerated, type = (VkBool32), offset = 92, size = 4
    name = integerDotProduct32BitSignedAccelerated, type = (VkBool32), offset = 96, size = 4
    name = integerDotProduct32BitMixedSignednessAccelerated, type = (VkBool32), offset = 100, size = 4
    name = integerDotProduct64BitUnsignedAccelerated, type = (VkBool32), offset = 104, size = 4
    name = integerDotProduct64BitSignedAccelerated, type = (VkBool32), offset = 108, size = 4
    name = integerDotProduct64BitMixedSignednessAccelerated, type = (VkBool32), offset = 112, size = 4
    name = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, type = (VkBool32), offset = 116, size = 4
    name = integerDotProductAccumulatingSaturating8BitSignedAccelerated, type = (VkBool32), offset = 120, size = 4
    name = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, type = (VkBool32), offset = 124, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 128, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 132, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 136, size = 4
    name = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, type = (VkBool32), offset = 140, size = 4
    name = integerDotProductAccumulatingSaturating16BitSignedAccelerated, type = (VkBool32), offset = 144, size = 4
    name = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, type = (VkBool32), offset = 148, size = 4
    name = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, type = (VkBool32), offset = 152, size = 4
    name = integerDotProductAccumulatingSaturating32BitSignedAccelerated, type = (VkBool32), offset = 156, size = 4
    name = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, type = (VkBool32), offset = 160, size = 4
    name = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, type = (VkBool32), offset = 164, size = 4
    name = integerDotProductAccumulatingSaturating64BitSignedAccelerated, type = (VkBool32), offset = 168, size = 4
    name = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, type = (VkBool32), offset = 172, size = 4
    name = storageTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 176, size = 8
    name = storageTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 184, size = 4
    padding (4 bytes)
    name = uniformTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 192, size = 8
    name = uniformTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 200, size = 4
    padding (4 bytes)
    name = maxBufferSize, type = (VkDeviceSize), offset = 208, size = 8
} ; size: 216

struct VkPipelineCreationFeedback {
    name = flags, type = (VkPipelineCreationFeedbackFlags), offset = 0, size = 4
    padding (4 bytes)
    name = duration, type = (uint64_t), offset = 8, size = 8
} ; size: 16

TYPEDEF VkPipelineCreationFeedback = struct VkPipelineCreationFeedback

struct VkPipelineCreationFeedback {
    name = flags, type = (VkPipelineCreationFeedbackFlags), offset = 0, size = 4
    padding (4 bytes)
    name = duration, type = (uint64_t), offset = 8, size = 8
} ; size: 16

struct VkPipelineCreationFeedbackCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pPipelineCreationFeedback, type = (VkPipelineCreationFeedback *), offset = 16, size = 8
    name = pipelineStageCreationFeedbackCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPipelineStageCreationFeedbacks, type = (VkPipelineCreationFeedback *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPipelineCreationFeedbackCreateInfo = struct VkPipelineCreationFeedbackCreateInfo

struct VkPipelineCreationFeedbackCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pPipelineCreationFeedback, type = (VkPipelineCreationFeedback *), offset = 16, size = 8
    name = pipelineStageCreationFeedbackCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPipelineStageCreationFeedbacks, type = (VkPipelineCreationFeedback *), offset = 32, size = 8
} ; size: 40

struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTerminateInvocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderTerminateInvocationFeatures = struct VkPhysicalDeviceShaderTerminateInvocationFeatures

struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTerminateInvocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceToolProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = version, type = (char[256]), offset = 272, size = 256
    name = purposes, type = (VkToolPurposeFlags), offset = 528, size = 4
    name = description, type = (char[256]), offset = 532, size = 256
    name = layer, type = (char[256]), offset = 788, size = 256
} ; size: 1048

TYPEDEF VkPhysicalDeviceToolProperties = struct VkPhysicalDeviceToolProperties

struct VkPhysicalDeviceToolProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = version, type = (char[256]), offset = 272, size = 256
    name = purposes, type = (VkToolPurposeFlags), offset = 528, size = 4
    name = description, type = (char[256]), offset = 532, size = 256
    name = layer, type = (char[256]), offset = 788, size = 256
} ; size: 1048

struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderDemoteToHelperInvocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures

struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderDemoteToHelperInvocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevicePrivateDataFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = privateData, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePrivateDataFeatures = struct VkPhysicalDevicePrivateDataFeatures

struct VkPhysicalDevicePrivateDataFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = privateData, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDevicePrivateDataCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = privateDataSlotRequestCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDevicePrivateDataCreateInfo = struct VkDevicePrivateDataCreateInfo

struct VkDevicePrivateDataCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = privateDataSlotRequestCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPrivateDataSlotCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPrivateDataSlotCreateFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPrivateDataSlotCreateInfo = struct VkPrivateDataSlotCreateInfo

struct VkPrivateDataSlotCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPrivateDataSlotCreateFlags), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineCreationCacheControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelineCreationCacheControlFeatures = struct VkPhysicalDevicePipelineCreationCacheControlFeatures

struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineCreationCacheControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
} ; size: 48

TYPEDEF VkMemoryBarrier2 = struct VkMemoryBarrier2

struct VkMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
} ; size: 48

struct VkBufferMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 48, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 52, size = 4
    name = buffer, type = (VkBuffer), offset = 56, size = 8
    name = offset, type = (VkDeviceSize), offset = 64, size = 8
    name = size, type = (VkDeviceSize), offset = 72, size = 8
} ; size: 80

TYPEDEF VkBufferMemoryBarrier2 = struct VkBufferMemoryBarrier2

struct VkBufferMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 48, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 52, size = 4
    name = buffer, type = (VkBuffer), offset = 56, size = 8
    name = offset, type = (VkDeviceSize), offset = 64, size = 8
    name = size, type = (VkDeviceSize), offset = 72, size = 8
} ; size: 80

struct VkImageMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
    name = oldLayout, type = (VkImageLayout), offset = 48, size = 4
    name = newLayout, type = (VkImageLayout), offset = 52, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 56, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 60, size = 4
    name = image, type = (VkImage), offset = 64, size = 8
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 72, size = 20
} ; size: 96

TYPEDEF VkImageMemoryBarrier2 = struct VkImageMemoryBarrier2

struct VkImageMemoryBarrier2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = srcAccessMask, type = (VkAccessFlags2), offset = 24, size = 8
    name = dstStageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = dstAccessMask, type = (VkAccessFlags2), offset = 40, size = 8
    name = oldLayout, type = (VkImageLayout), offset = 48, size = 4
    name = newLayout, type = (VkImageLayout), offset = 52, size = 4
    name = srcQueueFamilyIndex, type = (uint32_t), offset = 56, size = 4
    name = dstQueueFamilyIndex, type = (uint32_t), offset = 60, size = 4
    name = image, type = (VkImage), offset = 64, size = 8
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 72, size = 20
} ; size: 96

struct VkDependencyInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dependencyFlags, type = (VkDependencyFlags), offset = 16, size = 4
    name = memoryBarrierCount, type = (uint32_t), offset = 20, size = 4
    name = pMemoryBarriers, type = (const VkMemoryBarrier2 *), offset = 24, size = 8
    name = bufferMemoryBarrierCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pBufferMemoryBarriers, type = (const VkBufferMemoryBarrier2 *), offset = 40, size = 8
    name = imageMemoryBarrierCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pImageMemoryBarriers, type = (const VkImageMemoryBarrier2 *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkDependencyInfo = struct VkDependencyInfo

struct VkDependencyInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dependencyFlags, type = (VkDependencyFlags), offset = 16, size = 4
    name = memoryBarrierCount, type = (uint32_t), offset = 20, size = 4
    name = pMemoryBarriers, type = (const VkMemoryBarrier2 *), offset = 24, size = 8
    name = bufferMemoryBarrierCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pBufferMemoryBarriers, type = (const VkBufferMemoryBarrier2 *), offset = 40, size = 8
    name = imageMemoryBarrierCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pImageMemoryBarriers, type = (const VkImageMemoryBarrier2 *), offset = 56, size = 8
} ; size: 64

struct VkSemaphoreSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
    name = stageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = deviceIndex, type = (uint32_t), offset = 40, size = 4
} ; size: 48

TYPEDEF VkSemaphoreSubmitInfo = struct VkSemaphoreSubmitInfo

struct VkSemaphoreSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
    name = stageMask, type = (VkPipelineStageFlags2), offset = 32, size = 8
    name = deviceIndex, type = (uint32_t), offset = 40, size = 4
} ; size: 48

struct VkCommandBufferSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = commandBuffer, type = (VkCommandBuffer), offset = 16, size = 8
    name = deviceMask, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkCommandBufferSubmitInfo = struct VkCommandBufferSubmitInfo

struct VkCommandBufferSubmitInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = commandBuffer, type = (VkCommandBuffer), offset = 16, size = 8
    name = deviceMask, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkSubmitInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSubmitFlags), offset = 16, size = 4
    name = waitSemaphoreInfoCount, type = (uint32_t), offset = 20, size = 4
    name = pWaitSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 24, size = 8
    name = commandBufferInfoCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCommandBufferInfos, type = (const VkCommandBufferSubmitInfo *), offset = 40, size = 8
    name = signalSemaphoreInfoCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkSubmitInfo2 = struct VkSubmitInfo2

struct VkSubmitInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSubmitFlags), offset = 16, size = 4
    name = waitSemaphoreInfoCount, type = (uint32_t), offset = 20, size = 4
    name = pWaitSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 24, size = 8
    name = commandBufferInfoCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCommandBufferInfos, type = (const VkCommandBufferSubmitInfo *), offset = 40, size = 8
    name = signalSemaphoreInfoCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pSignalSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 56, size = 8
} ; size: 64

struct VkPhysicalDeviceSynchronization2Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = synchronization2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSynchronization2Features = struct VkPhysicalDeviceSynchronization2Features

struct VkPhysicalDeviceSynchronization2Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = synchronization2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderZeroInitializeWorkgroupMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderZeroInitializeWorkgroupMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceImageRobustnessFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustImageAccess, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageRobustnessFeatures = struct VkPhysicalDeviceImageRobustnessFeatures

struct VkPhysicalDeviceImageRobustnessFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustImageAccess, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkBufferCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcOffset, type = (VkDeviceSize), offset = 16, size = 8
    name = dstOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkBufferCopy2 = struct VkBufferCopy2

struct VkBufferCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcOffset, type = (VkDeviceSize), offset = 16, size = 8
    name = dstOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkCopyBufferInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcBuffer, type = (VkBuffer), offset = 16, size = 8
    name = dstBuffer, type = (VkBuffer), offset = 24, size = 8
    name = regionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkBufferCopy2 *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkCopyBufferInfo2 = struct VkCopyBufferInfo2

struct VkCopyBufferInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcBuffer, type = (VkBuffer), offset = 16, size = 8
    name = dstBuffer, type = (VkBuffer), offset = 24, size = 8
    name = regionCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkBufferCopy2 *), offset = 40, size = 8
} ; size: 48

struct VkImageCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 32, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 44, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 60, size = 12
    name = extent, type = (VkExtent3D), offset = 72, size = 12
} ; size: 88

TYPEDEF VkImageCopy2 = struct VkImageCopy2

struct VkImageCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 32, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 44, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 60, size = 12
    name = extent, type = (VkExtent3D), offset = 72, size = 12
} ; size: 88

struct VkCopyImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageCopy2 *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkCopyImageInfo2 = struct VkCopyImageInfo2

struct VkCopyImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageCopy2 *), offset = 48, size = 8
} ; size: 56

struct VkBufferImageCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = bufferOffset, type = (VkDeviceSize), offset = 16, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 24, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

TYPEDEF VkBufferImageCopy2 = struct VkBufferImageCopy2

struct VkBufferImageCopy2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = bufferOffset, type = (VkDeviceSize), offset = 16, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 24, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

struct VkCopyBufferToImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcBuffer, type = (VkBuffer), offset = 16, size = 8
    name = dstImage, type = (VkImage), offset = 24, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkBufferImageCopy2 *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkCopyBufferToImageInfo2 = struct VkCopyBufferToImageInfo2

struct VkCopyBufferToImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcBuffer, type = (VkBuffer), offset = 16, size = 8
    name = dstImage, type = (VkImage), offset = 24, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkBufferImageCopy2 *), offset = 40, size = 8
} ; size: 48

struct VkCopyImageToBufferInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstBuffer, type = (VkBuffer), offset = 32, size = 8
    name = regionCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkBufferImageCopy2 *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkCopyImageToBufferInfo2 = struct VkCopyImageToBufferInfo2

struct VkCopyImageToBufferInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstBuffer, type = (VkBuffer), offset = 32, size = 8
    name = regionCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkBufferImageCopy2 *), offset = 48, size = 8
} ; size: 56

struct VkImageBlit2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffsets, type = (VkOffset3D[2]), offset = 32, size = 24
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 56, size = 16
    name = dstOffsets, type = (VkOffset3D[2]), offset = 72, size = 24
} ; size: 96

TYPEDEF VkImageBlit2 = struct VkImageBlit2

struct VkImageBlit2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffsets, type = (VkOffset3D[2]), offset = 32, size = 24
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 56, size = 16
    name = dstOffsets, type = (VkOffset3D[2]), offset = 72, size = 24
} ; size: 96

struct VkBlitImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageBlit2 *), offset = 48, size = 8
    name = filter, type = (VkFilter), offset = 56, size = 4
} ; size: 64

TYPEDEF VkBlitImageInfo2 = struct VkBlitImageInfo2

struct VkBlitImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageBlit2 *), offset = 48, size = 8
    name = filter, type = (VkFilter), offset = 56, size = 4
} ; size: 64

struct VkImageResolve2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 32, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 44, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 60, size = 12
    name = extent, type = (VkExtent3D), offset = 72, size = 12
} ; size: 88

TYPEDEF VkImageResolve2 = struct VkImageResolve2

struct VkImageResolve2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = srcOffset, type = (VkOffset3D), offset = 32, size = 12
    name = dstSubresource, type = (VkImageSubresourceLayers), offset = 44, size = 16
    name = dstOffset, type = (VkOffset3D), offset = 60, size = 12
    name = extent, type = (VkExtent3D), offset = 72, size = 12
} ; size: 88

struct VkResolveImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageResolve2 *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkResolveImageInfo2 = struct VkResolveImageInfo2

struct VkResolveImageInfo2 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcImage, type = (VkImage), offset = 16, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 24, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 32, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = regionCount, type = (uint32_t), offset = 44, size = 4
    name = pRegions, type = (const VkImageResolve2 *), offset = 48, size = 8
} ; size: 56

struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subgroupSizeControl, type = (VkBool32), offset = 16, size = 4
    name = computeFullSubgroups, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSubgroupSizeControlFeatures = struct VkPhysicalDeviceSubgroupSizeControlFeatures

struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subgroupSizeControl, type = (VkBool32), offset = 16, size = 4
    name = computeFullSubgroups, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceSubgroupSizeControlProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minSubgroupSize, type = (uint32_t), offset = 16, size = 4
    name = maxSubgroupSize, type = (uint32_t), offset = 20, size = 4
    name = maxComputeWorkgroupSubgroups, type = (uint32_t), offset = 24, size = 4
    name = requiredSubgroupSizeStages, type = (VkShaderStageFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceSubgroupSizeControlProperties = struct VkPhysicalDeviceSubgroupSizeControlProperties

struct VkPhysicalDeviceSubgroupSizeControlProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minSubgroupSize, type = (uint32_t), offset = 16, size = 4
    name = maxSubgroupSize, type = (uint32_t), offset = 20, size = 4
    name = maxComputeWorkgroupSubgroups, type = (uint32_t), offset = 24, size = 4
    name = requiredSubgroupSizeStages, type = (VkShaderStageFlags), offset = 28, size = 4
} ; size: 32

struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = requiredSubgroupSize, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = requiredSubgroupSize, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceInlineUniformBlockFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = inlineUniformBlock, type = (VkBool32), offset = 16, size = 4
    name = descriptorBindingInlineUniformBlockUpdateAfterBind, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceInlineUniformBlockFeatures = struct VkPhysicalDeviceInlineUniformBlockFeatures

struct VkPhysicalDeviceInlineUniformBlockFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = inlineUniformBlock, type = (VkBool32), offset = 16, size = 4
    name = descriptorBindingInlineUniformBlockUpdateAfterBind, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceInlineUniformBlockProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxInlineUniformBlockSize, type = (uint32_t), offset = 16, size = 4
    name = maxPerStageDescriptorInlineUniformBlocks, type = (uint32_t), offset = 20, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 24, size = 4
    name = maxDescriptorSetInlineUniformBlocks, type = (uint32_t), offset = 28, size = 4
    name = maxDescriptorSetUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceInlineUniformBlockProperties = struct VkPhysicalDeviceInlineUniformBlockProperties

struct VkPhysicalDeviceInlineUniformBlockProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxInlineUniformBlockSize, type = (uint32_t), offset = 16, size = 4
    name = maxPerStageDescriptorInlineUniformBlocks, type = (uint32_t), offset = 20, size = 4
    name = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 24, size = 4
    name = maxDescriptorSetInlineUniformBlocks, type = (uint32_t), offset = 28, size = 4
    name = maxDescriptorSetUpdateAfterBindInlineUniformBlocks, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkWriteDescriptorSetInlineUniformBlock {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkWriteDescriptorSetInlineUniformBlock = struct VkWriteDescriptorSetInlineUniformBlock

struct VkWriteDescriptorSetInlineUniformBlock {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxInlineUniformBlockBindings, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDescriptorPoolInlineUniformBlockCreateInfo = struct VkDescriptorPoolInlineUniformBlockCreateInfo

struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxInlineUniformBlockBindings, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureCompressionASTC_HDR, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures

struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureCompressionASTC_HDR, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkRenderingAttachmentInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
    name = resolveMode, type = (VkResolveModeFlagBits), offset = 28, size = 4
    name = resolveImageView, type = (VkImageView), offset = 32, size = 8
    name = resolveImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 44, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 48, size = 4
    name = clearValue, type = (VkClearValue), offset = 52, size = 16
} ; size: 72

TYPEDEF VkRenderingAttachmentInfo = struct VkRenderingAttachmentInfo

struct VkRenderingAttachmentInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
    name = resolveMode, type = (VkResolveModeFlagBits), offset = 28, size = 4
    name = resolveImageView, type = (VkImageView), offset = 32, size = 8
    name = resolveImageLayout, type = (VkImageLayout), offset = 40, size = 4
    name = loadOp, type = (VkAttachmentLoadOp), offset = 44, size = 4
    name = storeOp, type = (VkAttachmentStoreOp), offset = 48, size = 4
    name = clearValue, type = (VkClearValue), offset = 52, size = 16
} ; size: 72

struct VkRenderingInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderingFlags), offset = 16, size = 4
    name = renderArea, type = (VkRect2D), offset = 20, size = 16
    name = layerCount, type = (uint32_t), offset = 36, size = 4
    name = viewMask, type = (uint32_t), offset = 40, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 44, size = 4
    name = pColorAttachments, type = (const VkRenderingAttachmentInfo *), offset = 48, size = 8
    name = pDepthAttachment, type = (const VkRenderingAttachmentInfo *), offset = 56, size = 8
    name = pStencilAttachment, type = (const VkRenderingAttachmentInfo *), offset = 64, size = 8
} ; size: 72

TYPEDEF VkRenderingInfo = struct VkRenderingInfo

struct VkRenderingInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderingFlags), offset = 16, size = 4
    name = renderArea, type = (VkRect2D), offset = 20, size = 16
    name = layerCount, type = (uint32_t), offset = 36, size = 4
    name = viewMask, type = (uint32_t), offset = 40, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 44, size = 4
    name = pColorAttachments, type = (const VkRenderingAttachmentInfo *), offset = 48, size = 8
    name = pDepthAttachment, type = (const VkRenderingAttachmentInfo *), offset = 56, size = 8
    name = pStencilAttachment, type = (const VkRenderingAttachmentInfo *), offset = 64, size = 8
} ; size: 72

struct VkPipelineRenderingCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewMask, type = (uint32_t), offset = 16, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 24, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 32, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 36, size = 4
} ; size: 40

TYPEDEF VkPipelineRenderingCreateInfo = struct VkPipelineRenderingCreateInfo

struct VkPipelineRenderingCreateInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewMask, type = (uint32_t), offset = 16, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 24, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 32, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 36, size = 4
} ; size: 40

struct VkPhysicalDeviceDynamicRenderingFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRendering, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDynamicRenderingFeatures = struct VkPhysicalDeviceDynamicRenderingFeatures

struct VkPhysicalDeviceDynamicRenderingFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRendering, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkCommandBufferInheritanceRenderingInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderingFlags), offset = 16, size = 4
    name = viewMask, type = (uint32_t), offset = 20, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 32, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 40, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 44, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 48, size = 4
} ; size: 56

TYPEDEF VkCommandBufferInheritanceRenderingInfo = struct VkCommandBufferInheritanceRenderingInfo

struct VkCommandBufferInheritanceRenderingInfo {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkRenderingFlags), offset = 16, size = 4
    name = viewMask, type = (uint32_t), offset = 20, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 32, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 40, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 44, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 48, size = 4
} ; size: 56

struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderIntegerDotProduct, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderIntegerDotProductFeatures = struct VkPhysicalDeviceShaderIntegerDotProductFeatures

struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderIntegerDotProduct, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = integerDotProduct8BitUnsignedAccelerated, type = (VkBool32), offset = 16, size = 4
    name = integerDotProduct8BitSignedAccelerated, type = (VkBool32), offset = 20, size = 4
    name = integerDotProduct8BitMixedSignednessAccelerated, type = (VkBool32), offset = 24, size = 4
    name = integerDotProduct4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 28, size = 4
    name = integerDotProduct4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 32, size = 4
    name = integerDotProduct4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 36, size = 4
    name = integerDotProduct16BitUnsignedAccelerated, type = (VkBool32), offset = 40, size = 4
    name = integerDotProduct16BitSignedAccelerated, type = (VkBool32), offset = 44, size = 4
    name = integerDotProduct16BitMixedSignednessAccelerated, type = (VkBool32), offset = 48, size = 4
    name = integerDotProduct32BitUnsignedAccelerated, type = (VkBool32), offset = 52, size = 4
    name = integerDotProduct32BitSignedAccelerated, type = (VkBool32), offset = 56, size = 4
    name = integerDotProduct32BitMixedSignednessAccelerated, type = (VkBool32), offset = 60, size = 4
    name = integerDotProduct64BitUnsignedAccelerated, type = (VkBool32), offset = 64, size = 4
    name = integerDotProduct64BitSignedAccelerated, type = (VkBool32), offset = 68, size = 4
    name = integerDotProduct64BitMixedSignednessAccelerated, type = (VkBool32), offset = 72, size = 4
    name = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, type = (VkBool32), offset = 76, size = 4
    name = integerDotProductAccumulatingSaturating8BitSignedAccelerated, type = (VkBool32), offset = 80, size = 4
    name = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, type = (VkBool32), offset = 84, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 88, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 92, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 96, size = 4
    name = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, type = (VkBool32), offset = 100, size = 4
    name = integerDotProductAccumulatingSaturating16BitSignedAccelerated, type = (VkBool32), offset = 104, size = 4
    name = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, type = (VkBool32), offset = 108, size = 4
    name = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, type = (VkBool32), offset = 112, size = 4
    name = integerDotProductAccumulatingSaturating32BitSignedAccelerated, type = (VkBool32), offset = 116, size = 4
    name = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, type = (VkBool32), offset = 120, size = 4
    name = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, type = (VkBool32), offset = 124, size = 4
    name = integerDotProductAccumulatingSaturating64BitSignedAccelerated, type = (VkBool32), offset = 128, size = 4
    name = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, type = (VkBool32), offset = 132, size = 4
} ; size: 136

TYPEDEF VkPhysicalDeviceShaderIntegerDotProductProperties = struct VkPhysicalDeviceShaderIntegerDotProductProperties

struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = integerDotProduct8BitUnsignedAccelerated, type = (VkBool32), offset = 16, size = 4
    name = integerDotProduct8BitSignedAccelerated, type = (VkBool32), offset = 20, size = 4
    name = integerDotProduct8BitMixedSignednessAccelerated, type = (VkBool32), offset = 24, size = 4
    name = integerDotProduct4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 28, size = 4
    name = integerDotProduct4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 32, size = 4
    name = integerDotProduct4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 36, size = 4
    name = integerDotProduct16BitUnsignedAccelerated, type = (VkBool32), offset = 40, size = 4
    name = integerDotProduct16BitSignedAccelerated, type = (VkBool32), offset = 44, size = 4
    name = integerDotProduct16BitMixedSignednessAccelerated, type = (VkBool32), offset = 48, size = 4
    name = integerDotProduct32BitUnsignedAccelerated, type = (VkBool32), offset = 52, size = 4
    name = integerDotProduct32BitSignedAccelerated, type = (VkBool32), offset = 56, size = 4
    name = integerDotProduct32BitMixedSignednessAccelerated, type = (VkBool32), offset = 60, size = 4
    name = integerDotProduct64BitUnsignedAccelerated, type = (VkBool32), offset = 64, size = 4
    name = integerDotProduct64BitSignedAccelerated, type = (VkBool32), offset = 68, size = 4
    name = integerDotProduct64BitMixedSignednessAccelerated, type = (VkBool32), offset = 72, size = 4
    name = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, type = (VkBool32), offset = 76, size = 4
    name = integerDotProductAccumulatingSaturating8BitSignedAccelerated, type = (VkBool32), offset = 80, size = 4
    name = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, type = (VkBool32), offset = 84, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, type = (VkBool32), offset = 88, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, type = (VkBool32), offset = 92, size = 4
    name = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, type = (VkBool32), offset = 96, size = 4
    name = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, type = (VkBool32), offset = 100, size = 4
    name = integerDotProductAccumulatingSaturating16BitSignedAccelerated, type = (VkBool32), offset = 104, size = 4
    name = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, type = (VkBool32), offset = 108, size = 4
    name = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, type = (VkBool32), offset = 112, size = 4
    name = integerDotProductAccumulatingSaturating32BitSignedAccelerated, type = (VkBool32), offset = 116, size = 4
    name = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, type = (VkBool32), offset = 120, size = 4
    name = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, type = (VkBool32), offset = 124, size = 4
    name = integerDotProductAccumulatingSaturating64BitSignedAccelerated, type = (VkBool32), offset = 128, size = 4
    name = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, type = (VkBool32), offset = 132, size = 4
} ; size: 136

struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 16, size = 8
    name = storageTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 24, size = 4
    padding (4 bytes)
    name = uniformTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 32, size = 8
    name = uniformTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 40, size = 4
} ; size: 48

TYPEDEF VkPhysicalDeviceTexelBufferAlignmentProperties = struct VkPhysicalDeviceTexelBufferAlignmentProperties

struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = storageTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 16, size = 8
    name = storageTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 24, size = 4
    padding (4 bytes)
    name = uniformTexelBufferOffsetAlignmentBytes, type = (VkDeviceSize), offset = 32, size = 8
    name = uniformTexelBufferOffsetSingleTexelAlignment, type = (VkBool32), offset = 40, size = 4
} ; size: 48

struct VkFormatProperties3 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = linearTilingFeatures, type = (VkFormatFeatureFlags2), offset = 16, size = 8
    name = optimalTilingFeatures, type = (VkFormatFeatureFlags2), offset = 24, size = 8
    name = bufferFeatures, type = (VkFormatFeatureFlags2), offset = 32, size = 8
} ; size: 40

TYPEDEF VkFormatProperties3 = struct VkFormatProperties3

struct VkFormatProperties3 {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = linearTilingFeatures, type = (VkFormatFeatureFlags2), offset = 16, size = 8
    name = optimalTilingFeatures, type = (VkFormatFeatureFlags2), offset = 24, size = 8
    name = bufferFeatures, type = (VkFormatFeatureFlags2), offset = 32, size = 8
} ; size: 40

struct VkPhysicalDeviceMaintenance4Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance4, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMaintenance4Features = struct VkPhysicalDeviceMaintenance4Features

struct VkPhysicalDeviceMaintenance4Features {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance4, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMaintenance4Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxBufferSize, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceMaintenance4Properties = struct VkPhysicalDeviceMaintenance4Properties

struct VkPhysicalDeviceMaintenance4Properties {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxBufferSize, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkDeviceBufferMemoryRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkBufferCreateInfo *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDeviceBufferMemoryRequirements = struct VkDeviceBufferMemoryRequirements

struct VkDeviceBufferMemoryRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkBufferCreateInfo *), offset = 16, size = 8
} ; size: 24

struct VkDeviceImageMemoryRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkImageCreateInfo *), offset = 16, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDeviceImageMemoryRequirements = struct VkDeviceImageMemoryRequirements

struct VkDeviceImageMemoryRequirements {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkImageCreateInfo *), offset = 16, size = 8
    name = planeAspect, type = (VkImageAspectFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkGetPhysicalDeviceToolProperties = VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *) __attribute__((stdcall))

TYPEDEF PFN_vkCreatePrivateDataSlot = VkResult (*)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyPrivateDataSlot = void (*)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkSetPrivateData = VkResult (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetPrivateData = void (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetEvent2 = void (*)(VkCommandBuffer, VkEvent, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResetEvent2 = void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWaitEvents2 = void (*)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPipelineBarrier2 = void (*)(VkCommandBuffer, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteTimestamp2 = void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkQueueSubmit2 = VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyBuffer2 = void (*)(VkCommandBuffer, const VkCopyBufferInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImage2 = void (*)(VkCommandBuffer, const VkCopyImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyBufferToImage2 = void (*)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImageToBuffer2 = void (*)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBlitImage2 = void (*)(VkCommandBuffer, const VkBlitImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResolveImage2 = void (*)(VkCommandBuffer, const VkResolveImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginRendering = void (*)(VkCommandBuffer, const VkRenderingInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndRendering = void (*)(VkCommandBuffer) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCullMode = void (*)(VkCommandBuffer, VkCullModeFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetFrontFace = void (*)(VkCommandBuffer, VkFrontFace) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPrimitiveTopology = void (*)(VkCommandBuffer, VkPrimitiveTopology) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewportWithCount = void (*)(VkCommandBuffer, uint32_t, const VkViewport *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetScissorWithCount = void (*)(VkCommandBuffer, uint32_t, const VkRect2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindVertexBuffers2 = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthTestEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthWriteEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthCompareOp = void (*)(VkCommandBuffer, VkCompareOp) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBoundsTestEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilTestEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilOp = void (*)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRasterizerDiscardEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBiasEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPrimitiveRestartEnable = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceBufferMemoryRequirements = void (*)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceImageMemoryRequirements = void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceImageSparseMemoryRequirements = void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties)

FUNC VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot)

FUNC void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)

FUNC void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData)

FUNC void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo)

FUNC void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)

FUNC void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos)

FUNC void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo)

FUNC void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)

FUNC VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence)

FUNC void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo)

FUNC void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo)

FUNC void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo)

FUNC void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo)

FUNC void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo)

FUNC void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo)

FUNC void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo)

FUNC void vkCmdEndRendering(VkCommandBuffer commandBuffer)

FUNC void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)

FUNC void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)

FUNC void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)

FUNC void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports)

FUNC void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors)

FUNC void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides)

FUNC void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)

FUNC void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)

FUNC void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)

FUNC void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)

FUNC void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)

FUNC void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)

FUNC void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)

FUNC void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)

FUNC void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)

FUNC void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements)

TYPEDEF VkSurfaceKHR = struct VkSurfaceKHR_T *

ENUM VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0
    VK_PRESENT_MODE_MAILBOX_KHR = 1
    VK_PRESENT_MODE_FIFO_KHR = 2
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
    VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPresentModeKHR = enum VkPresentModeKHR

ENUM VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0
    VK_PRESENT_MODE_MAILBOX_KHR = 1
    VK_PRESENT_MODE_FIFO_KHR = 2
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
    VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
}

ENUM VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
    VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkColorSpaceKHR = enum VkColorSpaceKHR

ENUM VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
    VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
}

ENUM VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkSurfaceTransformFlagBitsKHR = enum VkSurfaceTransformFlagBitsKHR

ENUM VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

ENUM VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkCompositeAlphaFlagBitsKHR = enum VkCompositeAlphaFlagBitsKHR

ENUM VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkCompositeAlphaFlagsKHR = VkFlags

TYPEDEF VkSurfaceTransformFlagsKHR = VkFlags

struct VkSurfaceCapabilitiesKHR {
    name = minImageCount, type = (uint32_t), offset = 0, size = 4
    name = maxImageCount, type = (uint32_t), offset = 4, size = 4
    name = currentExtent, type = (VkExtent2D), offset = 8, size = 8
    name = minImageExtent, type = (VkExtent2D), offset = 16, size = 8
    name = maxImageExtent, type = (VkExtent2D), offset = 24, size = 8
    name = maxImageArrayLayers, type = (uint32_t), offset = 32, size = 4
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 36, size = 4
    name = currentTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 40, size = 4
    name = supportedCompositeAlpha, type = (VkCompositeAlphaFlagsKHR), offset = 44, size = 4
    name = supportedUsageFlags, type = (VkImageUsageFlags), offset = 48, size = 4
} ; size: 52

TYPEDEF VkSurfaceCapabilitiesKHR = struct VkSurfaceCapabilitiesKHR

struct VkSurfaceCapabilitiesKHR {
    name = minImageCount, type = (uint32_t), offset = 0, size = 4
    name = maxImageCount, type = (uint32_t), offset = 4, size = 4
    name = currentExtent, type = (VkExtent2D), offset = 8, size = 8
    name = minImageExtent, type = (VkExtent2D), offset = 16, size = 8
    name = maxImageExtent, type = (VkExtent2D), offset = 24, size = 8
    name = maxImageArrayLayers, type = (uint32_t), offset = 32, size = 4
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 36, size = 4
    name = currentTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 40, size = 4
    name = supportedCompositeAlpha, type = (VkCompositeAlphaFlagsKHR), offset = 44, size = 4
    name = supportedUsageFlags, type = (VkImageUsageFlags), offset = 48, size = 4
} ; size: 52

struct VkSurfaceFormatKHR {
    name = format, type = (VkFormat), offset = 0, size = 4
    name = colorSpace, type = (VkColorSpaceKHR), offset = 4, size = 4
} ; size: 8

TYPEDEF VkSurfaceFormatKHR = struct VkSurfaceFormatKHR

struct VkSurfaceFormatKHR {
    name = format, type = (VkFormat), offset = 0, size = 4
    name = colorSpace, type = (VkColorSpaceKHR), offset = 4, size = 4
} ; size: 8

TYPEDEF PFN_vkDestroySurfaceKHR = void (*)(VkInstance, VkSurfaceKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceSupportKHR = VkResult (*)(VkPhysicalDevice, uint32_t, VkSurfaceKHR, VkBool32 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkSurfaceFormatKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkPresentModeKHR *) __attribute__((stdcall))

FUNC void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 * pSupported)

FUNC VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR * pSurfaceCapabilities)

FUNC VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pSurfaceFormatCount, VkSurfaceFormatKHR * pSurfaceFormats)

FUNC VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes)

TYPEDEF VkSwapchainKHR = struct VkSwapchainKHR_T *

ENUM VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkSwapchainCreateFlagBitsKHR = enum VkSwapchainCreateFlagBitsKHR

ENUM VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkSwapchainCreateFlagsKHR = VkFlags

ENUM VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkDeviceGroupPresentModeFlagBitsKHR = enum VkDeviceGroupPresentModeFlagBitsKHR

ENUM VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkDeviceGroupPresentModeFlagsKHR = VkFlags

struct VkSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSwapchainCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = surface, type = (VkSurfaceKHR), offset = 24, size = 8
    name = minImageCount, type = (uint32_t), offset = 32, size = 4
    name = imageFormat, type = (VkFormat), offset = 36, size = 4
    name = imageColorSpace, type = (VkColorSpaceKHR), offset = 40, size = 4
    name = imageExtent, type = (VkExtent2D), offset = 44, size = 8
    name = imageArrayLayers, type = (uint32_t), offset = 52, size = 4
    name = imageUsage, type = (VkImageUsageFlags), offset = 56, size = 4
    name = imageSharingMode, type = (VkSharingMode), offset = 60, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 72, size = 8
    name = preTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 80, size = 4
    name = compositeAlpha, type = (VkCompositeAlphaFlagBitsKHR), offset = 84, size = 4
    name = presentMode, type = (VkPresentModeKHR), offset = 88, size = 4
    name = clipped, type = (VkBool32), offset = 92, size = 4
    name = oldSwapchain, type = (VkSwapchainKHR), offset = 96, size = 8
} ; size: 104

TYPEDEF VkSwapchainCreateInfoKHR = struct VkSwapchainCreateInfoKHR

struct VkSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkSwapchainCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = surface, type = (VkSurfaceKHR), offset = 24, size = 8
    name = minImageCount, type = (uint32_t), offset = 32, size = 4
    name = imageFormat, type = (VkFormat), offset = 36, size = 4
    name = imageColorSpace, type = (VkColorSpaceKHR), offset = 40, size = 4
    name = imageExtent, type = (VkExtent2D), offset = 44, size = 8
    name = imageArrayLayers, type = (uint32_t), offset = 52, size = 4
    name = imageUsage, type = (VkImageUsageFlags), offset = 56, size = 4
    name = imageSharingMode, type = (VkSharingMode), offset = 60, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 72, size = 8
    name = preTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 80, size = 4
    name = compositeAlpha, type = (VkCompositeAlphaFlagBitsKHR), offset = 84, size = 4
    name = presentMode, type = (VkPresentModeKHR), offset = 88, size = 4
    name = clipped, type = (VkBool32), offset = 92, size = 4
    name = oldSwapchain, type = (VkSwapchainKHR), offset = 96, size = 8
} ; size: 104

struct VkPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = swapchainCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSwapchains, type = (const VkSwapchainKHR *), offset = 40, size = 8
    name = pImageIndices, type = (const uint32_t *), offset = 48, size = 8
    name = pResults, type = (VkResult *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkPresentInfoKHR = struct VkPresentInfoKHR

struct VkPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = waitSemaphoreCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pWaitSemaphores, type = (const VkSemaphore *), offset = 24, size = 8
    name = swapchainCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pSwapchains, type = (const VkSwapchainKHR *), offset = 40, size = 8
    name = pImageIndices, type = (const uint32_t *), offset = 48, size = 8
    name = pResults, type = (VkResult *), offset = 56, size = 8
} ; size: 64

struct VkImageSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageSwapchainCreateInfoKHR = struct VkImageSwapchainCreateInfoKHR

struct VkImageSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
} ; size: 24

struct VkBindImageMemorySwapchainInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = imageIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkBindImageMemorySwapchainInfoKHR = struct VkBindImageMemorySwapchainInfoKHR

struct VkBindImageMemorySwapchainInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = imageIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkAcquireNextImageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = timeout, type = (uint64_t), offset = 24, size = 8
    name = semaphore, type = (VkSemaphore), offset = 32, size = 8
    name = fence, type = (VkFence), offset = 40, size = 8
    name = deviceMask, type = (uint32_t), offset = 48, size = 4
} ; size: 56

TYPEDEF VkAcquireNextImageInfoKHR = struct VkAcquireNextImageInfoKHR

struct VkAcquireNextImageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = timeout, type = (uint64_t), offset = 24, size = 8
    name = semaphore, type = (VkSemaphore), offset = 32, size = 8
    name = fence, type = (VkFence), offset = 40, size = 8
    name = deviceMask, type = (uint32_t), offset = 48, size = 4
} ; size: 56

struct VkDeviceGroupPresentCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentMask, type = (uint32_t[32]), offset = 16, size = 128
    name = modes, type = (VkDeviceGroupPresentModeFlagsKHR), offset = 144, size = 4
} ; size: 152

TYPEDEF VkDeviceGroupPresentCapabilitiesKHR = struct VkDeviceGroupPresentCapabilitiesKHR

struct VkDeviceGroupPresentCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentMask, type = (uint32_t[32]), offset = 16, size = 128
    name = modes, type = (VkDeviceGroupPresentModeFlagsKHR), offset = 144, size = 4
} ; size: 152

struct VkDeviceGroupPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceMasks, type = (const uint32_t *), offset = 24, size = 8
    name = mode, type = (VkDeviceGroupPresentModeFlagBitsKHR), offset = 32, size = 4
} ; size: 40

TYPEDEF VkDeviceGroupPresentInfoKHR = struct VkDeviceGroupPresentInfoKHR

struct VkDeviceGroupPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDeviceMasks, type = (const uint32_t *), offset = 24, size = 8
    name = mode, type = (VkDeviceGroupPresentModeFlagBitsKHR), offset = 32, size = 4
} ; size: 40

struct VkDeviceGroupSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = modes, type = (VkDeviceGroupPresentModeFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceGroupSwapchainCreateInfoKHR = struct VkDeviceGroupSwapchainCreateInfoKHR

struct VkDeviceGroupSwapchainCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = modes, type = (VkDeviceGroupPresentModeFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCreateSwapchainKHR = VkResult (*)(VkDevice, const VkSwapchainCreateInfoKHR *, const VkAllocationCallbacks *, VkSwapchainKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroySwapchainKHR = void (*)(VkDevice, VkSwapchainKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetSwapchainImagesKHR = VkResult (*)(VkDevice, VkSwapchainKHR, uint32_t *, VkImage *) __attribute__((stdcall))

TYPEDEF PFN_vkAcquireNextImageKHR = VkResult (*)(VkDevice, VkSwapchainKHR, uint64_t, VkSemaphore, VkFence, uint32_t *) __attribute__((stdcall))

TYPEDEF PFN_vkQueuePresentKHR = VkResult (*)(VkQueue, const VkPresentInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceGroupPresentCapabilitiesKHR = VkResult (*)(VkDevice, VkDeviceGroupPresentCapabilitiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceGroupSurfacePresentModesKHR = VkResult (*)(VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDevicePresentRectanglesKHR = VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkRect2D *) __attribute__((stdcall))

TYPEDEF PFN_vkAcquireNextImage2KHR = VkResult (*)(VkDevice, const VkAcquireNextImageInfoKHR *, uint32_t *) __attribute__((stdcall))

FUNC VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchain)

FUNC void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pSwapchainImageCount, VkImage * pSwapchainImages)

FUNC VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t * pImageIndex)

FUNC VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR * pPresentInfo)

FUNC VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR * pDeviceGroupPresentCapabilities)

FUNC VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR * pModes)

FUNC VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pRectCount, VkRect2D * pRects)

FUNC VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR * pAcquireInfo, uint32_t * pImageIndex)

TYPEDEF VkDisplayKHR = struct VkDisplayKHR_T *

TYPEDEF VkDisplayModeKHR = struct VkDisplayModeKHR_T *

TYPEDEF VkDisplayModeCreateFlagsKHR = VkFlags

ENUM VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkDisplayPlaneAlphaFlagBitsKHR = enum VkDisplayPlaneAlphaFlagBitsKHR

ENUM VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkDisplayPlaneAlphaFlagsKHR = VkFlags

TYPEDEF VkDisplaySurfaceCreateFlagsKHR = VkFlags

struct VkDisplayModeParametersKHR {
    name = visibleRegion, type = (VkExtent2D), offset = 0, size = 8
    name = refreshRate, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkDisplayModeParametersKHR = struct VkDisplayModeParametersKHR

struct VkDisplayModeParametersKHR {
    name = visibleRegion, type = (VkExtent2D), offset = 0, size = 8
    name = refreshRate, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkDisplayModeCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDisplayModeCreateFlagsKHR), offset = 16, size = 4
    name = parameters, type = (VkDisplayModeParametersKHR), offset = 20, size = 12
} ; size: 32

TYPEDEF VkDisplayModeCreateInfoKHR = struct VkDisplayModeCreateInfoKHR

struct VkDisplayModeCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDisplayModeCreateFlagsKHR), offset = 16, size = 4
    name = parameters, type = (VkDisplayModeParametersKHR), offset = 20, size = 12
} ; size: 32

struct VkDisplayModePropertiesKHR {
    name = displayMode, type = (VkDisplayModeKHR), offset = 0, size = 8
    name = parameters, type = (VkDisplayModeParametersKHR), offset = 8, size = 12
} ; size: 24

TYPEDEF VkDisplayModePropertiesKHR = struct VkDisplayModePropertiesKHR

struct VkDisplayModePropertiesKHR {
    name = displayMode, type = (VkDisplayModeKHR), offset = 0, size = 8
    name = parameters, type = (VkDisplayModeParametersKHR), offset = 8, size = 12
} ; size: 24

struct VkDisplayPlaneCapabilitiesKHR {
    name = supportedAlpha, type = (VkDisplayPlaneAlphaFlagsKHR), offset = 0, size = 4
    name = minSrcPosition, type = (VkOffset2D), offset = 4, size = 8
    name = maxSrcPosition, type = (VkOffset2D), offset = 12, size = 8
    name = minSrcExtent, type = (VkExtent2D), offset = 20, size = 8
    name = maxSrcExtent, type = (VkExtent2D), offset = 28, size = 8
    name = minDstPosition, type = (VkOffset2D), offset = 36, size = 8
    name = maxDstPosition, type = (VkOffset2D), offset = 44, size = 8
    name = minDstExtent, type = (VkExtent2D), offset = 52, size = 8
    name = maxDstExtent, type = (VkExtent2D), offset = 60, size = 8
} ; size: 68

TYPEDEF VkDisplayPlaneCapabilitiesKHR = struct VkDisplayPlaneCapabilitiesKHR

struct VkDisplayPlaneCapabilitiesKHR {
    name = supportedAlpha, type = (VkDisplayPlaneAlphaFlagsKHR), offset = 0, size = 4
    name = minSrcPosition, type = (VkOffset2D), offset = 4, size = 8
    name = maxSrcPosition, type = (VkOffset2D), offset = 12, size = 8
    name = minSrcExtent, type = (VkExtent2D), offset = 20, size = 8
    name = maxSrcExtent, type = (VkExtent2D), offset = 28, size = 8
    name = minDstPosition, type = (VkOffset2D), offset = 36, size = 8
    name = maxDstPosition, type = (VkOffset2D), offset = 44, size = 8
    name = minDstExtent, type = (VkExtent2D), offset = 52, size = 8
    name = maxDstExtent, type = (VkExtent2D), offset = 60, size = 8
} ; size: 68

struct VkDisplayPlanePropertiesKHR {
    name = currentDisplay, type = (VkDisplayKHR), offset = 0, size = 8
    name = currentStackIndex, type = (uint32_t), offset = 8, size = 4
} ; size: 16

TYPEDEF VkDisplayPlanePropertiesKHR = struct VkDisplayPlanePropertiesKHR

struct VkDisplayPlanePropertiesKHR {
    name = currentDisplay, type = (VkDisplayKHR), offset = 0, size = 8
    name = currentStackIndex, type = (uint32_t), offset = 8, size = 4
} ; size: 16

struct VkDisplayPropertiesKHR {
    name = display, type = (VkDisplayKHR), offset = 0, size = 8
    name = displayName, type = (const char *), offset = 8, size = 8
    name = physicalDimensions, type = (VkExtent2D), offset = 16, size = 8
    name = physicalResolution, type = (VkExtent2D), offset = 24, size = 8
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 32, size = 4
    name = planeReorderPossible, type = (VkBool32), offset = 36, size = 4
    name = persistentContent, type = (VkBool32), offset = 40, size = 4
} ; size: 48

TYPEDEF VkDisplayPropertiesKHR = struct VkDisplayPropertiesKHR

struct VkDisplayPropertiesKHR {
    name = display, type = (VkDisplayKHR), offset = 0, size = 8
    name = displayName, type = (const char *), offset = 8, size = 8
    name = physicalDimensions, type = (VkExtent2D), offset = 16, size = 8
    name = physicalResolution, type = (VkExtent2D), offset = 24, size = 8
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 32, size = 4
    name = planeReorderPossible, type = (VkBool32), offset = 36, size = 4
    name = persistentContent, type = (VkBool32), offset = 40, size = 4
} ; size: 48

struct VkDisplaySurfaceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDisplaySurfaceCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = displayMode, type = (VkDisplayModeKHR), offset = 24, size = 8
    name = planeIndex, type = (uint32_t), offset = 32, size = 4
    name = planeStackIndex, type = (uint32_t), offset = 36, size = 4
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 40, size = 4
    name = globalAlpha, type = (float), offset = 44, size = 4
    name = alphaMode, type = (VkDisplayPlaneAlphaFlagBitsKHR), offset = 48, size = 4
    name = imageExtent, type = (VkExtent2D), offset = 52, size = 8
} ; size: 64

TYPEDEF VkDisplaySurfaceCreateInfoKHR = struct VkDisplaySurfaceCreateInfoKHR

struct VkDisplaySurfaceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDisplaySurfaceCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = displayMode, type = (VkDisplayModeKHR), offset = 24, size = 8
    name = planeIndex, type = (uint32_t), offset = 32, size = 4
    name = planeStackIndex, type = (uint32_t), offset = 36, size = 4
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 40, size = 4
    name = globalAlpha, type = (float), offset = 44, size = 4
    name = alphaMode, type = (VkDisplayPlaneAlphaFlagBitsKHR), offset = 48, size = 4
    name = imageExtent, type = (VkExtent2D), offset = 52, size = 8
} ; size: 64

TYPEDEF PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPlanePropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDisplayPlaneSupportedDisplaysKHR = VkResult (*)(VkPhysicalDevice, uint32_t, uint32_t *, VkDisplayKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDisplayModePropertiesKHR = VkResult (*)(VkPhysicalDevice, VkDisplayKHR, uint32_t *, VkDisplayModePropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDisplayModeKHR = VkResult (*)(VkPhysicalDevice, VkDisplayKHR, const VkDisplayModeCreateInfoKHR *, const VkAllocationCallbacks *, VkDisplayModeKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDisplayPlaneCapabilitiesKHR = VkResult (*)(VkPhysicalDevice, VkDisplayModeKHR, uint32_t, VkDisplayPlaneCapabilitiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDisplayPlaneSurfaceKHR = VkResult (*)(VkInstance, const VkDisplaySurfaceCreateInfoKHR *, const VkAllocationCallbacks *, VkSurfaceKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPropertiesKHR * pProperties)

FUNC VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlanePropertiesKHR * pProperties)

FUNC VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t * pDisplayCount, VkDisplayKHR * pDisplays)

FUNC VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModePropertiesKHR * pProperties)

FUNC VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDisplayModeKHR * pMode)

FUNC VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR * pCapabilities)

FUNC VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface)

struct VkDisplayPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcRect, type = (VkRect2D), offset = 16, size = 16
    name = dstRect, type = (VkRect2D), offset = 32, size = 16
    name = persistent, type = (VkBool32), offset = 48, size = 4
} ; size: 56

TYPEDEF VkDisplayPresentInfoKHR = struct VkDisplayPresentInfoKHR

struct VkDisplayPresentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcRect, type = (VkRect2D), offset = 16, size = 16
    name = dstRect, type = (VkRect2D), offset = 32, size = 16
    name = persistent, type = (VkBool32), offset = 48, size = 4
} ; size: 56

TYPEDEF PFN_vkCreateSharedSwapchainsKHR = VkResult (*)(VkDevice, uint32_t, const VkSwapchainCreateInfoKHR *, const VkAllocationCallbacks *, VkSwapchainKHR *) __attribute__((stdcall))

FUNC VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchains)

TYPEDEF VkVideoSessionKHR = struct VkVideoSessionKHR_T *

TYPEDEF VkVideoSessionParametersKHR = struct VkVideoSessionParametersKHR_T *

ENUM VkQueryResultStatusKHR {
    VK_QUERY_RESULT_STATUS_ERROR_KHR = -1
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1
    VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000
    VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkQueryResultStatusKHR = enum VkQueryResultStatusKHR

ENUM VkQueryResultStatusKHR {
    VK_QUERY_RESULT_STATUS_ERROR_KHR = -1
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1
    VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000
    VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647
}

ENUM VkVideoCodecOperationFlagBitsKHR {
    VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0
    VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536
    VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072
    VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1
    VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2
    VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 4
    VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCodecOperationFlagBitsKHR = enum VkVideoCodecOperationFlagBitsKHR

ENUM VkVideoCodecOperationFlagBitsKHR {
    VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0
    VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536
    VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072
    VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1
    VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2
    VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 4
    VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCodecOperationFlagsKHR = VkFlags

ENUM VkVideoChromaSubsamplingFlagBitsKHR {
    VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0
    VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1
    VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2
    VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4
    VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8
    VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoChromaSubsamplingFlagBitsKHR = enum VkVideoChromaSubsamplingFlagBitsKHR

ENUM VkVideoChromaSubsamplingFlagBitsKHR {
    VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0
    VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1
    VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2
    VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4
    VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8
    VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoChromaSubsamplingFlagsKHR = VkFlags

ENUM VkVideoComponentBitDepthFlagBitsKHR {
    VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0
    VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1
    VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4
    VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16
    VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoComponentBitDepthFlagBitsKHR = enum VkVideoComponentBitDepthFlagBitsKHR

ENUM VkVideoComponentBitDepthFlagBitsKHR {
    VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0
    VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1
    VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4
    VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16
    VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoComponentBitDepthFlagsKHR = VkFlags

ENUM VkVideoCapabilityFlagBitsKHR {
    VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1
    VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2
    VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCapabilityFlagBitsKHR = enum VkVideoCapabilityFlagBitsKHR

ENUM VkVideoCapabilityFlagBitsKHR {
    VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1
    VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2
    VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCapabilityFlagsKHR = VkFlags

ENUM VkVideoSessionCreateFlagBitsKHR {
    VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1
    VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2
    VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4
    VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoSessionCreateFlagBitsKHR = enum VkVideoSessionCreateFlagBitsKHR

ENUM VkVideoSessionCreateFlagBitsKHR {
    VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1
    VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2
    VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4
    VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoSessionCreateFlagsKHR = VkFlags

TYPEDEF VkVideoSessionParametersCreateFlagsKHR = VkFlags

TYPEDEF VkVideoBeginCodingFlagsKHR = VkFlags

TYPEDEF VkVideoEndCodingFlagsKHR = VkFlags

ENUM VkVideoCodingControlFlagBitsKHR {
    VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1
    VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2
    VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4
    VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCodingControlFlagBitsKHR = enum VkVideoCodingControlFlagBitsKHR

ENUM VkVideoCodingControlFlagBitsKHR {
    VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1
    VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2
    VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4
    VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoCodingControlFlagsKHR = VkFlags

struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = queryResultStatusSupport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueueFamilyQueryResultStatusPropertiesKHR = struct VkQueueFamilyQueryResultStatusPropertiesKHR

struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = queryResultStatusSupport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkQueueFamilyVideoPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = videoCodecOperations, type = (VkVideoCodecOperationFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueueFamilyVideoPropertiesKHR = struct VkQueueFamilyVideoPropertiesKHR

struct VkQueueFamilyVideoPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = videoCodecOperations, type = (VkVideoCodecOperationFlagsKHR), offset = 16, size = 4
} ; size: 24

struct VkVideoProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoCodecOperation, type = (VkVideoCodecOperationFlagBitsKHR), offset = 16, size = 4
    name = chromaSubsampling, type = (VkVideoChromaSubsamplingFlagsKHR), offset = 20, size = 4
    name = lumaBitDepth, type = (VkVideoComponentBitDepthFlagsKHR), offset = 24, size = 4
    name = chromaBitDepth, type = (VkVideoComponentBitDepthFlagsKHR), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVideoProfileInfoKHR = struct VkVideoProfileInfoKHR

struct VkVideoProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoCodecOperation, type = (VkVideoCodecOperationFlagBitsKHR), offset = 16, size = 4
    name = chromaSubsampling, type = (VkVideoChromaSubsamplingFlagsKHR), offset = 20, size = 4
    name = lumaBitDepth, type = (VkVideoComponentBitDepthFlagsKHR), offset = 24, size = 4
    name = chromaBitDepth, type = (VkVideoComponentBitDepthFlagsKHR), offset = 28, size = 4
} ; size: 32

struct VkVideoProfileListInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = profileCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pProfiles, type = (const VkVideoProfileInfoKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkVideoProfileListInfoKHR = struct VkVideoProfileListInfoKHR

struct VkVideoProfileListInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = profileCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pProfiles, type = (const VkVideoProfileInfoKHR *), offset = 24, size = 8
} ; size: 32

struct VkVideoCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoCapabilityFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = minBitstreamBufferOffsetAlignment, type = (VkDeviceSize), offset = 24, size = 8
    name = minBitstreamBufferSizeAlignment, type = (VkDeviceSize), offset = 32, size = 8
    name = pictureAccessGranularity, type = (VkExtent2D), offset = 40, size = 8
    name = minCodedExtent, type = (VkExtent2D), offset = 48, size = 8
    name = maxCodedExtent, type = (VkExtent2D), offset = 56, size = 8
    name = maxDpbSlots, type = (uint32_t), offset = 64, size = 4
    name = maxActiveReferencePictures, type = (uint32_t), offset = 68, size = 4
    name = stdHeaderVersion, type = (VkExtensionProperties), offset = 72, size = 260
} ; size: 336

TYPEDEF VkVideoCapabilitiesKHR = struct VkVideoCapabilitiesKHR

struct VkVideoCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoCapabilityFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = minBitstreamBufferOffsetAlignment, type = (VkDeviceSize), offset = 24, size = 8
    name = minBitstreamBufferSizeAlignment, type = (VkDeviceSize), offset = 32, size = 8
    name = pictureAccessGranularity, type = (VkExtent2D), offset = 40, size = 8
    name = minCodedExtent, type = (VkExtent2D), offset = 48, size = 8
    name = maxCodedExtent, type = (VkExtent2D), offset = 56, size = 8
    name = maxDpbSlots, type = (uint32_t), offset = 64, size = 4
    name = maxActiveReferencePictures, type = (uint32_t), offset = 68, size = 4
    name = stdHeaderVersion, type = (VkExtensionProperties), offset = 72, size = 260
} ; size: 336

struct VkPhysicalDeviceVideoFormatInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageUsage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVideoFormatInfoKHR = struct VkPhysicalDeviceVideoFormatInfoKHR

struct VkPhysicalDeviceVideoFormatInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageUsage, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

struct VkVideoFormatPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = componentMapping, type = (VkComponentMapping), offset = 20, size = 16
    name = imageCreateFlags, type = (VkImageCreateFlags), offset = 36, size = 4
    name = imageType, type = (VkImageType), offset = 40, size = 4
    name = imageTiling, type = (VkImageTiling), offset = 44, size = 4
    name = imageUsageFlags, type = (VkImageUsageFlags), offset = 48, size = 4
} ; size: 56

TYPEDEF VkVideoFormatPropertiesKHR = struct VkVideoFormatPropertiesKHR

struct VkVideoFormatPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
    name = componentMapping, type = (VkComponentMapping), offset = 20, size = 16
    name = imageCreateFlags, type = (VkImageCreateFlags), offset = 36, size = 4
    name = imageType, type = (VkImageType), offset = 40, size = 4
    name = imageTiling, type = (VkImageTiling), offset = 44, size = 4
    name = imageUsageFlags, type = (VkImageUsageFlags), offset = 48, size = 4
} ; size: 56

struct VkVideoPictureResourceInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = codedOffset, type = (VkOffset2D), offset = 16, size = 8
    name = codedExtent, type = (VkExtent2D), offset = 24, size = 8
    name = baseArrayLayer, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = imageViewBinding, type = (VkImageView), offset = 40, size = 8
} ; size: 48

TYPEDEF VkVideoPictureResourceInfoKHR = struct VkVideoPictureResourceInfoKHR

struct VkVideoPictureResourceInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = codedOffset, type = (VkOffset2D), offset = 16, size = 8
    name = codedExtent, type = (VkExtent2D), offset = 24, size = 8
    name = baseArrayLayer, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = imageViewBinding, type = (VkImageView), offset = 40, size = 8
} ; size: 48

struct VkVideoReferenceSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = slotIndex, type = (int32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPictureResource, type = (const VkVideoPictureResourceInfoKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkVideoReferenceSlotInfoKHR = struct VkVideoReferenceSlotInfoKHR

struct VkVideoReferenceSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = slotIndex, type = (int32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPictureResource, type = (const VkVideoPictureResourceInfoKHR *), offset = 24, size = 8
} ; size: 32

struct VkVideoSessionMemoryRequirementsKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryBindIndex, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = memoryRequirements, type = (VkMemoryRequirements), offset = 24, size = 24
} ; size: 48

TYPEDEF VkVideoSessionMemoryRequirementsKHR = struct VkVideoSessionMemoryRequirementsKHR

struct VkVideoSessionMemoryRequirementsKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryBindIndex, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = memoryRequirements, type = (VkMemoryRequirements), offset = 24, size = 24
} ; size: 48

struct VkBindVideoSessionMemoryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memoryBindIndex, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = memorySize, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

TYPEDEF VkBindVideoSessionMemoryInfoKHR = struct VkBindVideoSessionMemoryInfoKHR

struct VkBindVideoSessionMemoryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memoryBindIndex, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = memorySize, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

struct VkVideoSessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueFamilyIndex, type = (uint32_t), offset = 16, size = 4
    name = flags, type = (VkVideoSessionCreateFlagsKHR), offset = 20, size = 4
    name = pVideoProfile, type = (const VkVideoProfileInfoKHR *), offset = 24, size = 8
    name = pictureFormat, type = (VkFormat), offset = 32, size = 4
    name = maxCodedExtent, type = (VkExtent2D), offset = 36, size = 8
    name = referencePictureFormat, type = (VkFormat), offset = 44, size = 4
    name = maxDpbSlots, type = (uint32_t), offset = 48, size = 4
    name = maxActiveReferencePictures, type = (uint32_t), offset = 52, size = 4
    name = pStdHeaderVersion, type = (const VkExtensionProperties *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkVideoSessionCreateInfoKHR = struct VkVideoSessionCreateInfoKHR

struct VkVideoSessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueFamilyIndex, type = (uint32_t), offset = 16, size = 4
    name = flags, type = (VkVideoSessionCreateFlagsKHR), offset = 20, size = 4
    name = pVideoProfile, type = (const VkVideoProfileInfoKHR *), offset = 24, size = 8
    name = pictureFormat, type = (VkFormat), offset = 32, size = 4
    name = maxCodedExtent, type = (VkExtent2D), offset = 36, size = 8
    name = referencePictureFormat, type = (VkFormat), offset = 44, size = 4
    name = maxDpbSlots, type = (uint32_t), offset = 48, size = 4
    name = maxActiveReferencePictures, type = (uint32_t), offset = 52, size = 4
    name = pStdHeaderVersion, type = (const VkExtensionProperties *), offset = 56, size = 8
} ; size: 64

struct VkVideoSessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoSessionParametersCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = videoSessionParametersTemplate, type = (VkVideoSessionParametersKHR), offset = 24, size = 8
    name = videoSession, type = (VkVideoSessionKHR), offset = 32, size = 8
} ; size: 40

TYPEDEF VkVideoSessionParametersCreateInfoKHR = struct VkVideoSessionParametersCreateInfoKHR

struct VkVideoSessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoSessionParametersCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = videoSessionParametersTemplate, type = (VkVideoSessionParametersKHR), offset = 24, size = 8
    name = videoSession, type = (VkVideoSessionKHR), offset = 32, size = 8
} ; size: 40

struct VkVideoSessionParametersUpdateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = updateSequenceCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoSessionParametersUpdateInfoKHR = struct VkVideoSessionParametersUpdateInfoKHR

struct VkVideoSessionParametersUpdateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = updateSequenceCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkVideoBeginCodingInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoBeginCodingFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = videoSession, type = (VkVideoSessionKHR), offset = 24, size = 8
    name = videoSessionParameters, type = (VkVideoSessionParametersKHR), offset = 32, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkVideoBeginCodingInfoKHR = struct VkVideoBeginCodingInfoKHR

struct VkVideoBeginCodingInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoBeginCodingFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = videoSession, type = (VkVideoSessionKHR), offset = 24, size = 8
    name = videoSessionParameters, type = (VkVideoSessionParametersKHR), offset = 32, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 48, size = 8
} ; size: 56

struct VkVideoEndCodingInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEndCodingFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoEndCodingInfoKHR = struct VkVideoEndCodingInfoKHR

struct VkVideoEndCodingInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEndCodingFlagsKHR), offset = 16, size = 4
} ; size: 24

struct VkVideoCodingControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoCodingControlFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoCodingControlInfoKHR = struct VkVideoCodingControlInfoKHR

struct VkVideoCodingControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoCodingControlFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = VkResult (*)(VkPhysicalDevice, const VkVideoProfileInfoKHR *, VkVideoCapabilitiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR *, uint32_t *, VkVideoFormatPropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateVideoSessionKHR = VkResult (*)(VkDevice, const VkVideoSessionCreateInfoKHR *, const VkAllocationCallbacks *, VkVideoSessionKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyVideoSessionKHR = void (*)(VkDevice, VkVideoSessionKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetVideoSessionMemoryRequirementsKHR = VkResult (*)(VkDevice, VkVideoSessionKHR, uint32_t *, VkVideoSessionMemoryRequirementsKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkBindVideoSessionMemoryKHR = VkResult (*)(VkDevice, VkVideoSessionKHR, uint32_t, const VkBindVideoSessionMemoryInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateVideoSessionParametersKHR = VkResult (*)(VkDevice, const VkVideoSessionParametersCreateInfoKHR *, const VkAllocationCallbacks *, VkVideoSessionParametersKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkUpdateVideoSessionParametersKHR = VkResult (*)(VkDevice, VkVideoSessionParametersKHR, const VkVideoSessionParametersUpdateInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyVideoSessionParametersKHR = void (*)(VkDevice, VkVideoSessionParametersKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginVideoCodingKHR = void (*)(VkCommandBuffer, const VkVideoBeginCodingInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndVideoCodingKHR = void (*)(VkCommandBuffer, const VkVideoEndCodingInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdControlVideoCodingKHR = void (*)(VkCommandBuffer, const VkVideoCodingControlInfoKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR * pVideoProfile, VkVideoCapabilitiesKHR * pCapabilities)

FUNC VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR * pVideoFormatInfo, uint32_t * pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR * pVideoFormatProperties)

FUNC VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionKHR * pVideoSession)

FUNC void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t * pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR * pMemoryRequirements)

FUNC VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR * pBindSessionMemoryInfos)

FUNC VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionParametersKHR * pVideoSessionParameters)

FUNC VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR * pUpdateInfo)

FUNC void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks * pAllocator)

FUNC void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR * pBeginInfo)

FUNC void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR * pEndCodingInfo)

FUNC void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR * pCodingControlInfo)

ENUM VkVideoDecodeCapabilityFlagBitsKHR {
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2
    VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeCapabilityFlagBitsKHR = enum VkVideoDecodeCapabilityFlagBitsKHR

ENUM VkVideoDecodeCapabilityFlagBitsKHR {
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2
    VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeCapabilityFlagsKHR = VkFlags

ENUM VkVideoDecodeUsageFlagBitsKHR {
    VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0
    VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1
    VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2
    VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4
    VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeUsageFlagBitsKHR = enum VkVideoDecodeUsageFlagBitsKHR

ENUM VkVideoDecodeUsageFlagBitsKHR {
    VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0
    VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1
    VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2
    VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4
    VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeUsageFlagsKHR = VkFlags

TYPEDEF VkVideoDecodeFlagsKHR = VkFlags

struct VkVideoDecodeCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoDecodeCapabilityFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoDecodeCapabilitiesKHR = struct VkVideoDecodeCapabilitiesKHR

struct VkVideoDecodeCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoDecodeCapabilityFlagsKHR), offset = 16, size = 4
} ; size: 24

struct VkVideoDecodeUsageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoUsageHints, type = (VkVideoDecodeUsageFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoDecodeUsageInfoKHR = struct VkVideoDecodeUsageInfoKHR

struct VkVideoDecodeUsageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoUsageHints, type = (VkVideoDecodeUsageFlagsKHR), offset = 16, size = 4
} ; size: 24

struct VkVideoDecodeInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoDecodeFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = srcBuffer, type = (VkBuffer), offset = 24, size = 8
    name = srcBufferOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = srcBufferRange, type = (VkDeviceSize), offset = 40, size = 8
    name = dstPictureResource, type = (VkVideoPictureResourceInfoKHR), offset = 48, size = 48
    name = pSetupReferenceSlot, type = (const VkVideoReferenceSlotInfoKHR *), offset = 96, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 104, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 112, size = 8
} ; size: 120

TYPEDEF VkVideoDecodeInfoKHR = struct VkVideoDecodeInfoKHR

struct VkVideoDecodeInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoDecodeFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = srcBuffer, type = (VkBuffer), offset = 24, size = 8
    name = srcBufferOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = srcBufferRange, type = (VkDeviceSize), offset = 40, size = 8
    name = dstPictureResource, type = (VkVideoPictureResourceInfoKHR), offset = 48, size = 48
    name = pSetupReferenceSlot, type = (const VkVideoReferenceSlotInfoKHR *), offset = 96, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 104, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 112, size = 8
} ; size: 120

TYPEDEF PFN_vkCmdDecodeVideoKHR = void (*)(VkCommandBuffer, const VkVideoDecodeInfoKHR *) __attribute__((stdcall))

FUNC void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR * pDecodeInfo)

ENUM VkVideoEncodeH264CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128
    VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256
    VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264CapabilityFlagBitsKHR = enum VkVideoEncodeH264CapabilityFlagBitsKHR

ENUM VkVideoEncodeH264CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128
    VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256
    VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264CapabilityFlagsKHR = VkFlags

ENUM VkVideoEncodeH264StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256
    VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512
    VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096
    VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192
    VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072
    VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288
    VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
    VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264StdFlagBitsKHR = enum VkVideoEncodeH264StdFlagBitsKHR

ENUM VkVideoEncodeH264StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256
    VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512
    VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096
    VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192
    VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072
    VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288
    VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
    VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264StdFlagsKHR = VkFlags

ENUM VkVideoEncodeH264RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264RateControlFlagBitsKHR = enum VkVideoEncodeH264RateControlFlagBitsKHR

ENUM VkVideoEncodeH264RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH264RateControlFlagsKHR = VkFlags

struct VkVideoEncodeH264CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = flags, type = (VkVideoEncodeH264CapabilityFlagsKHR), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = maxSliceCount, type = (uint32_t), offset = -1, size = 4
    name = maxPPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxBPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxL1ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxTemporalLayerCount, type = (uint32_t), offset = -1, size = 4
    name = expectDyadicTemporalLayerPattern, type = (VkBool32), offset = -1, size = 4
    name = minQp, type = (int32_t), offset = -1, size = 4
    name = maxQp, type = (int32_t), offset = -1, size = 4
    name = prefersGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = requiresGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = stdSyntaxFlags, type = (VkVideoEncodeH264StdFlagsKHR), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH264CapabilitiesKHR = struct VkVideoEncodeH264CapabilitiesKHR

struct VkVideoEncodeH264CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = flags, type = (VkVideoEncodeH264CapabilityFlagsKHR), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = maxSliceCount, type = (uint32_t), offset = -1, size = 4
    name = maxPPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxBPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxL1ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxTemporalLayerCount, type = (uint32_t), offset = -1, size = 4
    name = expectDyadicTemporalLayerPattern, type = (VkBool32), offset = -1, size = 4
    name = minQp, type = (int32_t), offset = -1, size = 4
    name = maxQp, type = (int32_t), offset = -1, size = 4
    name = prefersGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = requiresGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = stdSyntaxFlags, type = (VkVideoEncodeH264StdFlagsKHR), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH264QpKHR {
    name = qpI, type = (int32_t), offset = 0, size = 4
    name = qpP, type = (int32_t), offset = 4, size = 4
    name = qpB, type = (int32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkVideoEncodeH264QpKHR = struct VkVideoEncodeH264QpKHR

struct VkVideoEncodeH264QpKHR {
    name = qpI, type = (int32_t), offset = 0, size = 4
    name = qpP, type = (int32_t), offset = 4, size = 4
    name = qpB, type = (int32_t), offset = 8, size = 4
} ; size: 12

struct VkVideoEncodeH264QualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlFlags, type = (VkVideoEncodeH264RateControlFlagsKHR), offset = 16, size = 4
    name = preferredGopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = preferredIdrPeriod, type = (uint32_t), offset = 24, size = 4
    name = preferredConsecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = preferredTemporalLayerCount, type = (uint32_t), offset = 32, size = 4
    name = preferredConstantQp, type = (VkVideoEncodeH264QpKHR), offset = 36, size = 12
    name = preferredMaxL0ReferenceCount, type = (uint32_t), offset = 48, size = 4
    name = preferredMaxL1ReferenceCount, type = (uint32_t), offset = 52, size = 4
    name = preferredStdEntropyCodingModeFlag, type = (VkBool32), offset = 56, size = 4
} ; size: 64

TYPEDEF VkVideoEncodeH264QualityLevelPropertiesKHR = struct VkVideoEncodeH264QualityLevelPropertiesKHR

struct VkVideoEncodeH264QualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlFlags, type = (VkVideoEncodeH264RateControlFlagsKHR), offset = 16, size = 4
    name = preferredGopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = preferredIdrPeriod, type = (uint32_t), offset = 24, size = 4
    name = preferredConsecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = preferredTemporalLayerCount, type = (uint32_t), offset = 32, size = 4
    name = preferredConstantQp, type = (VkVideoEncodeH264QpKHR), offset = 36, size = 12
    name = preferredMaxL0ReferenceCount, type = (uint32_t), offset = 48, size = 4
    name = preferredMaxL1ReferenceCount, type = (uint32_t), offset = 52, size = 4
    name = preferredStdEntropyCodingModeFlag, type = (VkBool32), offset = 56, size = 4
} ; size: 64

struct VkVideoEncodeH264SessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = useMaxLevelIdc, type = (VkBool32), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH264SessionCreateInfoKHR = struct VkVideoEncodeH264SessionCreateInfoKHR

struct VkVideoEncodeH264SessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = useMaxLevelIdc, type = (VkBool32), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH264SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH264SessionParametersAddInfoKHR = struct VkVideoEncodeH264SessionParametersAddInfoKHR

struct VkVideoEncodeH264SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdSPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 20, size = 4
    name = pParametersAddInfo, type = (const VkVideoEncodeH264SessionParametersAddInfoKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkVideoEncodeH264SessionParametersCreateInfoKHR = struct VkVideoEncodeH264SessionParametersCreateInfoKHR

struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdSPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 20, size = 4
    name = pParametersAddInfo, type = (const VkVideoEncodeH264SessionParametersAddInfoKHR *), offset = 24, size = 8
} ; size: 32

struct VkVideoEncodeH264SessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = writeStdSPS, type = (VkBool32), offset = 16, size = 4
    name = writeStdPPS, type = (VkBool32), offset = 20, size = 4
    name = stdSPSId, type = (uint32_t), offset = 24, size = 4
    name = stdPPSId, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVideoEncodeH264SessionParametersGetInfoKHR = struct VkVideoEncodeH264SessionParametersGetInfoKHR

struct VkVideoEncodeH264SessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = writeStdSPS, type = (VkBool32), offset = 16, size = 4
    name = writeStdPPS, type = (VkBool32), offset = 20, size = 4
    name = stdSPSId, type = (uint32_t), offset = 24, size = 4
    name = stdPPSId, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasStdSPSOverrides, type = (VkBool32), offset = 16, size = 4
    name = hasStdPPSOverrides, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkVideoEncodeH264SessionParametersFeedbackInfoKHR = struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR

struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasStdSPSOverrides, type = (VkBool32), offset = 16, size = 4
    name = hasStdPPSOverrides, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkVideoEncodeH264NaluSliceInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = constantQp, type = (int32_t), offset = -1, size = 4
    name = pStdSliceHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH264NaluSliceInfoKHR = struct VkVideoEncodeH264NaluSliceInfoKHR

struct VkVideoEncodeH264NaluSliceInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = constantQp, type = (int32_t), offset = -1, size = 4
    name = pStdSliceHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH264PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = naluSliceEntryCount, type = (uint32_t), offset = -1, size = 4
    name = pNaluSliceEntries, type = (const VkVideoEncodeH264NaluSliceInfoKHR *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = generatePrefixNalu, type = (VkBool32), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH264PictureInfoKHR = struct VkVideoEncodeH264PictureInfoKHR

struct VkVideoEncodeH264PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = naluSliceEntryCount, type = (uint32_t), offset = -1, size = 4
    name = pNaluSliceEntries, type = (const VkVideoEncodeH264NaluSliceInfoKHR *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = generatePrefixNalu, type = (VkBool32), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH264DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH264DpbSlotInfoKHR = struct VkVideoEncodeH264DpbSlotInfoKHR

struct VkVideoEncodeH264DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH264ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH264ProfileInfoKHR = struct VkVideoEncodeH264ProfileInfoKHR

struct VkVideoEncodeH264ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH264RateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeH264RateControlFlagsKHR), offset = 16, size = 4
    name = gopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = idrPeriod, type = (uint32_t), offset = 24, size = 4
    name = consecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = temporalLayerCount, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkVideoEncodeH264RateControlInfoKHR = struct VkVideoEncodeH264RateControlInfoKHR

struct VkVideoEncodeH264RateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeH264RateControlFlagsKHR), offset = 16, size = 4
    name = gopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = idrPeriod, type = (uint32_t), offset = 24, size = 4
    name = consecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = temporalLayerCount, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkVideoEncodeH264FrameSizeKHR {
    name = frameISize, type = (uint32_t), offset = 0, size = 4
    name = framePSize, type = (uint32_t), offset = 4, size = 4
    name = frameBSize, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkVideoEncodeH264FrameSizeKHR = struct VkVideoEncodeH264FrameSizeKHR

struct VkVideoEncodeH264FrameSizeKHR {
    name = frameISize, type = (uint32_t), offset = 0, size = 4
    name = framePSize, type = (uint32_t), offset = 4, size = 4
    name = frameBSize, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkVideoEncodeH264RateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useMinQp, type = (VkBool32), offset = 16, size = 4
    name = minQp, type = (VkVideoEncodeH264QpKHR), offset = 20, size = 12
    name = useMaxQp, type = (VkBool32), offset = 32, size = 4
    name = maxQp, type = (VkVideoEncodeH264QpKHR), offset = 36, size = 12
    name = useMaxFrameSize, type = (VkBool32), offset = 48, size = 4
    name = maxFrameSize, type = (VkVideoEncodeH264FrameSizeKHR), offset = 52, size = 12
} ; size: 64

TYPEDEF VkVideoEncodeH264RateControlLayerInfoKHR = struct VkVideoEncodeH264RateControlLayerInfoKHR

struct VkVideoEncodeH264RateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useMinQp, type = (VkBool32), offset = 16, size = 4
    name = minQp, type = (VkVideoEncodeH264QpKHR), offset = 20, size = 12
    name = useMaxQp, type = (VkBool32), offset = 32, size = 4
    name = maxQp, type = (VkVideoEncodeH264QpKHR), offset = 36, size = 12
    name = useMaxFrameSize, type = (VkBool32), offset = 48, size = 4
    name = maxFrameSize, type = (VkVideoEncodeH264FrameSizeKHR), offset = 52, size = 12
} ; size: 64

struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useGopRemainingFrames, type = (VkBool32), offset = 16, size = 4
    name = gopRemainingI, type = (uint32_t), offset = 20, size = 4
    name = gopRemainingP, type = (uint32_t), offset = 24, size = 4
    name = gopRemainingB, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVideoEncodeH264GopRemainingFrameInfoKHR = struct VkVideoEncodeH264GopRemainingFrameInfoKHR

struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useGopRemainingFrames, type = (VkBool32), offset = 16, size = 4
    name = gopRemainingI, type = (uint32_t), offset = 20, size = 4
    name = gopRemainingP, type = (uint32_t), offset = 24, size = 4
    name = gopRemainingB, type = (uint32_t), offset = 28, size = 4
} ; size: 32

ENUM VkVideoEncodeH265CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512
    VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265CapabilityFlagBitsKHR = enum VkVideoEncodeH265CapabilityFlagBitsKHR

ENUM VkVideoEncodeH265CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512
    VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265CapabilityFlagsKHR = VkFlags

ENUM VkVideoEncodeH265StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128
    VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256
    VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048
    VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096
    VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192
    VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
    VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768
    VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144
    VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288
    VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
    VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265StdFlagBitsKHR = enum VkVideoEncodeH265StdFlagBitsKHR

ENUM VkVideoEncodeH265StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128
    VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256
    VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048
    VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096
    VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192
    VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
    VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768
    VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144
    VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288
    VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
    VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265StdFlagsKHR = VkFlags

ENUM VkVideoEncodeH265CtbSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265CtbSizeFlagBitsKHR = enum VkVideoEncodeH265CtbSizeFlagBitsKHR

ENUM VkVideoEncodeH265CtbSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags

ENUM VkVideoEncodeH265TransformBlockSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR

ENUM VkVideoEncodeH265TransformBlockSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags

ENUM VkVideoEncodeH265RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265RateControlFlagBitsKHR = enum VkVideoEncodeH265RateControlFlagBitsKHR

ENUM VkVideoEncodeH265RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeH265RateControlFlagsKHR = VkFlags

struct VkVideoEncodeH265CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = flags, type = (VkVideoEncodeH265CapabilityFlagsKHR), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = maxSliceSegmentCount, type = (uint32_t), offset = -1, size = 4
    name = maxTiles, type = (VkExtent2D), offset = -1, size = 8
    name = ctbSizes, type = (VkVideoEncodeH265CtbSizeFlagsKHR), offset = -1, size = 4
    name = transformBlockSizes, type = (VkVideoEncodeH265TransformBlockSizeFlagsKHR), offset = -1, size = 4
    name = maxPPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxBPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxL1ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxSubLayerCount, type = (uint32_t), offset = -1, size = 4
    name = expectDyadicTemporalSubLayerPattern, type = (VkBool32), offset = -1, size = 4
    name = minQp, type = (int32_t), offset = -1, size = 4
    name = maxQp, type = (int32_t), offset = -1, size = 4
    name = prefersGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = requiresGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = stdSyntaxFlags, type = (VkVideoEncodeH265StdFlagsKHR), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH265CapabilitiesKHR = struct VkVideoEncodeH265CapabilitiesKHR

struct VkVideoEncodeH265CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = flags, type = (VkVideoEncodeH265CapabilityFlagsKHR), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = maxSliceSegmentCount, type = (uint32_t), offset = -1, size = 4
    name = maxTiles, type = (VkExtent2D), offset = -1, size = 8
    name = ctbSizes, type = (VkVideoEncodeH265CtbSizeFlagsKHR), offset = -1, size = 4
    name = transformBlockSizes, type = (VkVideoEncodeH265TransformBlockSizeFlagsKHR), offset = -1, size = 4
    name = maxPPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxBPictureL0ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxL1ReferenceCount, type = (uint32_t), offset = -1, size = 4
    name = maxSubLayerCount, type = (uint32_t), offset = -1, size = 4
    name = expectDyadicTemporalSubLayerPattern, type = (VkBool32), offset = -1, size = 4
    name = minQp, type = (int32_t), offset = -1, size = 4
    name = maxQp, type = (int32_t), offset = -1, size = 4
    name = prefersGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = requiresGopRemainingFrames, type = (VkBool32), offset = -1, size = 4
    name = stdSyntaxFlags, type = (VkVideoEncodeH265StdFlagsKHR), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH265SessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = useMaxLevelIdc, type = (VkBool32), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH265SessionCreateInfoKHR = struct VkVideoEncodeH265SessionCreateInfoKHR

struct VkVideoEncodeH265SessionCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = useMaxLevelIdc, type = (VkBool32), offset = -1, size = 4
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH265QpKHR {
    name = qpI, type = (int32_t), offset = 0, size = 4
    name = qpP, type = (int32_t), offset = 4, size = 4
    name = qpB, type = (int32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkVideoEncodeH265QpKHR = struct VkVideoEncodeH265QpKHR

struct VkVideoEncodeH265QpKHR {
    name = qpI, type = (int32_t), offset = 0, size = 4
    name = qpP, type = (int32_t), offset = 4, size = 4
    name = qpB, type = (int32_t), offset = 8, size = 4
} ; size: 12

struct VkVideoEncodeH265QualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlFlags, type = (VkVideoEncodeH265RateControlFlagsKHR), offset = 16, size = 4
    name = preferredGopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = preferredIdrPeriod, type = (uint32_t), offset = 24, size = 4
    name = preferredConsecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = preferredSubLayerCount, type = (uint32_t), offset = 32, size = 4
    name = preferredConstantQp, type = (VkVideoEncodeH265QpKHR), offset = 36, size = 12
    name = preferredMaxL0ReferenceCount, type = (uint32_t), offset = 48, size = 4
    name = preferredMaxL1ReferenceCount, type = (uint32_t), offset = 52, size = 4
} ; size: 56

TYPEDEF VkVideoEncodeH265QualityLevelPropertiesKHR = struct VkVideoEncodeH265QualityLevelPropertiesKHR

struct VkVideoEncodeH265QualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlFlags, type = (VkVideoEncodeH265RateControlFlagsKHR), offset = 16, size = 4
    name = preferredGopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = preferredIdrPeriod, type = (uint32_t), offset = 24, size = 4
    name = preferredConsecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = preferredSubLayerCount, type = (uint32_t), offset = 32, size = 4
    name = preferredConstantQp, type = (VkVideoEncodeH265QpKHR), offset = 36, size = 12
    name = preferredMaxL0ReferenceCount, type = (uint32_t), offset = 48, size = 4
    name = preferredMaxL1ReferenceCount, type = (uint32_t), offset = 52, size = 4
} ; size: 56

struct VkVideoEncodeH265SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdVPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdVPSs, type = (const int *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH265SessionParametersAddInfoKHR = struct VkVideoEncodeH265SessionParametersAddInfoKHR

struct VkVideoEncodeH265SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdVPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdVPSs, type = (const int *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdVPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdSPSCount, type = (uint32_t), offset = 20, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pParametersAddInfo, type = (const VkVideoEncodeH265SessionParametersAddInfoKHR *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkVideoEncodeH265SessionParametersCreateInfoKHR = struct VkVideoEncodeH265SessionParametersCreateInfoKHR

struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdVPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdSPSCount, type = (uint32_t), offset = 20, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pParametersAddInfo, type = (const VkVideoEncodeH265SessionParametersAddInfoKHR *), offset = 32, size = 8
} ; size: 40

struct VkVideoEncodeH265SessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = writeStdVPS, type = (VkBool32), offset = 16, size = 4
    name = writeStdSPS, type = (VkBool32), offset = 20, size = 4
    name = writeStdPPS, type = (VkBool32), offset = 24, size = 4
    name = stdVPSId, type = (uint32_t), offset = 28, size = 4
    name = stdSPSId, type = (uint32_t), offset = 32, size = 4
    name = stdPPSId, type = (uint32_t), offset = 36, size = 4
} ; size: 40

TYPEDEF VkVideoEncodeH265SessionParametersGetInfoKHR = struct VkVideoEncodeH265SessionParametersGetInfoKHR

struct VkVideoEncodeH265SessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = writeStdVPS, type = (VkBool32), offset = 16, size = 4
    name = writeStdSPS, type = (VkBool32), offset = 20, size = 4
    name = writeStdPPS, type = (VkBool32), offset = 24, size = 4
    name = stdVPSId, type = (uint32_t), offset = 28, size = 4
    name = stdSPSId, type = (uint32_t), offset = 32, size = 4
    name = stdPPSId, type = (uint32_t), offset = 36, size = 4
} ; size: 40

struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasStdVPSOverrides, type = (VkBool32), offset = 16, size = 4
    name = hasStdSPSOverrides, type = (VkBool32), offset = 20, size = 4
    name = hasStdPPSOverrides, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkVideoEncodeH265SessionParametersFeedbackInfoKHR = struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR

struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasStdVPSOverrides, type = (VkBool32), offset = 16, size = 4
    name = hasStdSPSOverrides, type = (VkBool32), offset = 20, size = 4
    name = hasStdPPSOverrides, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = constantQp, type = (int32_t), offset = -1, size = 4
    name = pStdSliceSegmentHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH265NaluSliceSegmentInfoKHR = struct VkVideoEncodeH265NaluSliceSegmentInfoKHR

struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = constantQp, type = (int32_t), offset = -1, size = 4
    name = pStdSliceSegmentHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH265PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = naluSliceSegmentEntryCount, type = (uint32_t), offset = -1, size = 4
    name = pNaluSliceSegmentEntries, type = (const VkVideoEncodeH265NaluSliceSegmentInfoKHR *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH265PictureInfoKHR = struct VkVideoEncodeH265PictureInfoKHR

struct VkVideoEncodeH265PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = naluSliceSegmentEntryCount, type = (uint32_t), offset = -1, size = 4
    name = pNaluSliceSegmentEntries, type = (const VkVideoEncodeH265NaluSliceSegmentInfoKHR *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH265DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoEncodeH265DpbSlotInfoKHR = struct VkVideoEncodeH265DpbSlotInfoKHR

struct VkVideoEncodeH265DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoEncodeH265ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoEncodeH265ProfileInfoKHR = struct VkVideoEncodeH265ProfileInfoKHR

struct VkVideoEncodeH265ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoEncodeH265RateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeH265RateControlFlagsKHR), offset = 16, size = 4
    name = gopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = idrPeriod, type = (uint32_t), offset = 24, size = 4
    name = consecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = subLayerCount, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkVideoEncodeH265RateControlInfoKHR = struct VkVideoEncodeH265RateControlInfoKHR

struct VkVideoEncodeH265RateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeH265RateControlFlagsKHR), offset = 16, size = 4
    name = gopFrameCount, type = (uint32_t), offset = 20, size = 4
    name = idrPeriod, type = (uint32_t), offset = 24, size = 4
    name = consecutiveBFrameCount, type = (uint32_t), offset = 28, size = 4
    name = subLayerCount, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkVideoEncodeH265FrameSizeKHR {
    name = frameISize, type = (uint32_t), offset = 0, size = 4
    name = framePSize, type = (uint32_t), offset = 4, size = 4
    name = frameBSize, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkVideoEncodeH265FrameSizeKHR = struct VkVideoEncodeH265FrameSizeKHR

struct VkVideoEncodeH265FrameSizeKHR {
    name = frameISize, type = (uint32_t), offset = 0, size = 4
    name = framePSize, type = (uint32_t), offset = 4, size = 4
    name = frameBSize, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkVideoEncodeH265RateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useMinQp, type = (VkBool32), offset = 16, size = 4
    name = minQp, type = (VkVideoEncodeH265QpKHR), offset = 20, size = 12
    name = useMaxQp, type = (VkBool32), offset = 32, size = 4
    name = maxQp, type = (VkVideoEncodeH265QpKHR), offset = 36, size = 12
    name = useMaxFrameSize, type = (VkBool32), offset = 48, size = 4
    name = maxFrameSize, type = (VkVideoEncodeH265FrameSizeKHR), offset = 52, size = 12
} ; size: 64

TYPEDEF VkVideoEncodeH265RateControlLayerInfoKHR = struct VkVideoEncodeH265RateControlLayerInfoKHR

struct VkVideoEncodeH265RateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useMinQp, type = (VkBool32), offset = 16, size = 4
    name = minQp, type = (VkVideoEncodeH265QpKHR), offset = 20, size = 12
    name = useMaxQp, type = (VkBool32), offset = 32, size = 4
    name = maxQp, type = (VkVideoEncodeH265QpKHR), offset = 36, size = 12
    name = useMaxFrameSize, type = (VkBool32), offset = 48, size = 4
    name = maxFrameSize, type = (VkVideoEncodeH265FrameSizeKHR), offset = 52, size = 12
} ; size: 64

struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useGopRemainingFrames, type = (VkBool32), offset = 16, size = 4
    name = gopRemainingI, type = (uint32_t), offset = 20, size = 4
    name = gopRemainingP, type = (uint32_t), offset = 24, size = 4
    name = gopRemainingB, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVideoEncodeH265GopRemainingFrameInfoKHR = struct VkVideoEncodeH265GopRemainingFrameInfoKHR

struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = useGopRemainingFrames, type = (VkBool32), offset = 16, size = 4
    name = gopRemainingI, type = (uint32_t), offset = 20, size = 4
    name = gopRemainingP, type = (uint32_t), offset = 24, size = 4
    name = gopRemainingB, type = (uint32_t), offset = 28, size = 4
} ; size: 32

ENUM VkVideoDecodeH264PictureLayoutFlagBitsKHR {
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeH264PictureLayoutFlagBitsKHR = enum VkVideoDecodeH264PictureLayoutFlagBitsKHR

ENUM VkVideoDecodeH264PictureLayoutFlagBitsKHR {
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags

struct VkVideoDecodeH264ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
    name = pictureLayout, type = (VkVideoDecodeH264PictureLayoutFlagBitsKHR), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoDecodeH264ProfileInfoKHR = struct VkVideoDecodeH264ProfileInfoKHR

struct VkVideoDecodeH264ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
    name = pictureLayout, type = (VkVideoDecodeH264PictureLayoutFlagBitsKHR), offset = -1, size = 4
} ; size: 1

struct VkVideoDecodeH264CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = fieldOffsetGranularity, type = (VkOffset2D), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH264CapabilitiesKHR = struct VkVideoDecodeH264CapabilitiesKHR

struct VkVideoDecodeH264CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevelIdc, type = (int), offset = -1, size = 4
    name = fieldOffsetGranularity, type = (VkOffset2D), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH264SessionParametersAddInfoKHR = struct VkVideoDecodeH264SessionParametersAddInfoKHR

struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdSPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 20, size = 4
    name = pParametersAddInfo, type = (const VkVideoDecodeH264SessionParametersAddInfoKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkVideoDecodeH264SessionParametersCreateInfoKHR = struct VkVideoDecodeH264SessionParametersCreateInfoKHR

struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdSPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 20, size = 4
    name = pParametersAddInfo, type = (const VkVideoDecodeH264SessionParametersAddInfoKHR *), offset = 24, size = 8
} ; size: 32

struct VkVideoDecodeH264PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = sliceCount, type = (uint32_t), offset = -1, size = 4
    name = pSliceOffsets, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH264PictureInfoKHR = struct VkVideoDecodeH264PictureInfoKHR

struct VkVideoDecodeH264PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = sliceCount, type = (uint32_t), offset = -1, size = 4
    name = pSliceOffsets, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeH264DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH264DpbSlotInfoKHR = struct VkVideoDecodeH264DpbSlotInfoKHR

struct VkVideoDecodeH264DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkRenderingFlagsKHR = VkRenderingFlags

TYPEDEF VkRenderingFlagBitsKHR = VkRenderingFlagBits

TYPEDEF VkRenderingInfoKHR = VkRenderingInfo

TYPEDEF VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo

TYPEDEF VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo

TYPEDEF VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures

TYPEDEF VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo

struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
    name = shadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 28, size = 8
} ; size: 40

TYPEDEF VkRenderingFragmentShadingRateAttachmentInfoKHR = struct VkRenderingFragmentShadingRateAttachmentInfoKHR

struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
    name = shadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 28, size = 8
} ; size: 40

struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
} ; size: 32

TYPEDEF VkRenderingFragmentDensityMapAttachmentInfoEXT = struct VkRenderingFragmentDensityMapAttachmentInfoEXT

struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = imageLayout, type = (VkImageLayout), offset = 24, size = 4
} ; size: 32

struct VkAttachmentSampleCountInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentSamples, type = (const VkSampleCountFlagBits *), offset = 24, size = 8
    name = depthStencilAttachmentSamples, type = (VkSampleCountFlagBits), offset = 32, size = 4
} ; size: 40

TYPEDEF VkAttachmentSampleCountInfoAMD = struct VkAttachmentSampleCountInfoAMD

struct VkAttachmentSampleCountInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentSamples, type = (const VkSampleCountFlagBits *), offset = 24, size = 8
    name = depthStencilAttachmentSamples, type = (VkSampleCountFlagBits), offset = 32, size = 4
} ; size: 40

TYPEDEF VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD

struct VkMultiviewPerViewAttributesInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = perViewAttributes, type = (VkBool32), offset = 16, size = 4
    name = perViewAttributesPositionXOnly, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkMultiviewPerViewAttributesInfoNVX = struct VkMultiviewPerViewAttributesInfoNVX

struct VkMultiviewPerViewAttributesInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = perViewAttributes, type = (VkBool32), offset = 16, size = 4
    name = perViewAttributesPositionXOnly, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdBeginRenderingKHR = void (*)(VkCommandBuffer, const VkRenderingInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndRenderingKHR = void (*)(VkCommandBuffer) __attribute__((stdcall))

FUNC void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo)

FUNC void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)

TYPEDEF VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo

TYPEDEF VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures

TYPEDEF VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties

TYPEDEF VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2

TYPEDEF VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2

TYPEDEF VkFormatProperties2KHR = VkFormatProperties2

TYPEDEF VkImageFormatProperties2KHR = VkImageFormatProperties2

TYPEDEF VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2

TYPEDEF VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2

TYPEDEF VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2

TYPEDEF VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2

TYPEDEF VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2

TYPEDEF PFN_vkGetPhysicalDeviceFeatures2KHR = void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceProperties2KHR = void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceFormatProperties2KHR = void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceImageFormatInfo2 *, VkImageFormatProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceMemoryProperties2KHR = void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = void (*)(VkPhysicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *, uint32_t *, VkSparseImageFormatProperties2 *) __attribute__((stdcall))

FUNC void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures)

FUNC void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties)

FUNC void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties)

FUNC VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties)

FUNC void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties)

FUNC void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties)

FUNC void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties)

TYPEDEF VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags

TYPEDEF VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits

TYPEDEF VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags

TYPEDEF VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits

TYPEDEF VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo

TYPEDEF VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo

TYPEDEF VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo

TYPEDEF VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo

TYPEDEF VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo

TYPEDEF VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo

TYPEDEF VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo

TYPEDEF PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = void (*)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDeviceMaskKHR = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDispatchBaseKHR = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures)

FUNC void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)

FUNC void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)

TYPEDEF VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags

TYPEDEF PFN_vkTrimCommandPoolKHR = void (*)(VkDevice, VkCommandPool, VkCommandPoolTrimFlags) __attribute__((stdcall))

FUNC void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

TYPEDEF VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties

TYPEDEF VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo

TYPEDEF PFN_vkEnumeratePhysicalDeviceGroupsKHR = VkResult (*)(VkInstance, uint32_t *, VkPhysicalDeviceGroupProperties *) __attribute__((stdcall))

FUNC VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties)

TYPEDEF VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags

TYPEDEF VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits

TYPEDEF VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags

TYPEDEF VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits

TYPEDEF VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties

TYPEDEF VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo

TYPEDEF VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties

TYPEDEF VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo

TYPEDEF VkExternalBufferPropertiesKHR = VkExternalBufferProperties

TYPEDEF VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties

TYPEDEF PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalBufferInfo *, VkExternalBufferProperties *) __attribute__((stdcall))

FUNC void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties)

TYPEDEF VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo

TYPEDEF VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo

TYPEDEF VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo

struct VkImportMemoryFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
    name = fd, type = (int), offset = 20, size = 4
} ; size: 24

TYPEDEF VkImportMemoryFdInfoKHR = struct VkImportMemoryFdInfoKHR

struct VkImportMemoryFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
    name = fd, type = (int), offset = 20, size = 4
} ; size: 24

struct VkMemoryFdPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkMemoryFdPropertiesKHR = struct VkMemoryFdPropertiesKHR

struct VkMemoryFdPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkMemoryGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkMemoryGetFdInfoKHR = struct VkMemoryGetFdInfoKHR

struct VkMemoryGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkGetMemoryFdKHR = VkResult (*)(VkDevice, const VkMemoryGetFdInfoKHR *, int *) __attribute__((stdcall))

TYPEDEF PFN_vkGetMemoryFdPropertiesKHR = VkResult (*)(VkDevice, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR *) __attribute__((stdcall))

FUNC VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR * pGetFdInfo, int * pFd)

FUNC VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR * pMemoryFdProperties)

TYPEDEF VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags

TYPEDEF VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits

TYPEDEF VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags

TYPEDEF VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits

TYPEDEF VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo

TYPEDEF VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties

TYPEDEF PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *, VkExternalSemaphoreProperties *) __attribute__((stdcall))

FUNC void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties)

TYPEDEF VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags

TYPEDEF VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits

TYPEDEF VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo

struct VkImportSemaphoreFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = flags, type = (VkSemaphoreImportFlags), offset = 24, size = 4
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 28, size = 4
    name = fd, type = (int), offset = 32, size = 4
} ; size: 40

TYPEDEF VkImportSemaphoreFdInfoKHR = struct VkImportSemaphoreFdInfoKHR

struct VkImportSemaphoreFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = flags, type = (VkSemaphoreImportFlags), offset = 24, size = 4
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 28, size = 4
    name = fd, type = (int), offset = 32, size = 4
} ; size: 40

struct VkSemaphoreGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkSemaphoreGetFdInfoKHR = struct VkSemaphoreGetFdInfoKHR

struct VkSemaphoreGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = semaphore, type = (VkSemaphore), offset = 16, size = 8
    name = handleType, type = (VkExternalSemaphoreHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkImportSemaphoreFdKHR = VkResult (*)(VkDevice, const VkImportSemaphoreFdInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetSemaphoreFdKHR = VkResult (*)(VkDevice, const VkSemaphoreGetFdInfoKHR *, int *) __attribute__((stdcall))

FUNC VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR * pImportSemaphoreFdInfo)

FUNC VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR * pGetFdInfo, int * pFd)

struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxPushDescriptors, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePushDescriptorPropertiesKHR = struct VkPhysicalDevicePushDescriptorPropertiesKHR

struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxPushDescriptors, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdPushDescriptorSetKHR = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkWriteDescriptorSet *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPushDescriptorSetWithTemplateKHR = void (*)(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, const void *) __attribute__((stdcall))

FUNC void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites)

FUNC void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void * pData)

TYPEDEF VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features

TYPEDEF VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features

TYPEDEF VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures

struct VkRectLayerKHR {
    name = offset, type = (VkOffset2D), offset = 0, size = 8
    name = extent, type = (VkExtent2D), offset = 8, size = 8
    name = layer, type = (uint32_t), offset = 16, size = 4
} ; size: 20

TYPEDEF VkRectLayerKHR = struct VkRectLayerKHR

struct VkRectLayerKHR {
    name = offset, type = (VkOffset2D), offset = 0, size = 8
    name = extent, type = (VkExtent2D), offset = 8, size = 8
    name = layer, type = (uint32_t), offset = 16, size = 4
} ; size: 20

struct VkPresentRegionKHR {
    name = rectangleCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pRectangles, type = (const VkRectLayerKHR *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkPresentRegionKHR = struct VkPresentRegionKHR

struct VkPresentRegionKHR {
    name = rectangleCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pRectangles, type = (const VkRectLayerKHR *), offset = 8, size = 8
} ; size: 16

struct VkPresentRegionsKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkPresentRegionKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPresentRegionsKHR = struct VkPresentRegionsKHR

struct VkPresentRegionsKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pRegions, type = (const VkPresentRegionKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate

TYPEDEF VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType

TYPEDEF VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags

TYPEDEF VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry

TYPEDEF VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo

TYPEDEF PFN_vkCreateDescriptorUpdateTemplateKHR = VkResult (*)(VkDevice, const VkDescriptorUpdateTemplateCreateInfo *, const VkAllocationCallbacks *, VkDescriptorUpdateTemplate *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDescriptorUpdateTemplateKHR = void (*)(VkDevice, VkDescriptorUpdateTemplate, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkUpdateDescriptorSetWithTemplateKHR = void (*)(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, const void *) __attribute__((stdcall))

FUNC VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate)

FUNC void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator)

FUNC void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData)

TYPEDEF VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures

TYPEDEF VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo

TYPEDEF VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo

TYPEDEF VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo

TYPEDEF VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2

TYPEDEF VkAttachmentDescription2KHR = VkAttachmentDescription2

TYPEDEF VkAttachmentReference2KHR = VkAttachmentReference2

TYPEDEF VkSubpassDescription2KHR = VkSubpassDescription2

TYPEDEF VkSubpassDependency2KHR = VkSubpassDependency2

TYPEDEF VkSubpassBeginInfoKHR = VkSubpassBeginInfo

TYPEDEF VkSubpassEndInfoKHR = VkSubpassEndInfo

TYPEDEF PFN_vkCreateRenderPass2KHR = VkResult (*)(VkDevice, const VkRenderPassCreateInfo2 *, const VkAllocationCallbacks *, VkRenderPass *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginRenderPass2KHR = void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdNextSubpass2KHR = void (*)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndRenderPass2KHR = void (*)(VkCommandBuffer, const VkSubpassEndInfo *) __attribute__((stdcall))

FUNC VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass)

FUNC void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo)

FUNC void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo)

FUNC void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo)

struct VkSharedPresentSurfaceCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sharedPresentSupportedUsageFlags, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSharedPresentSurfaceCapabilitiesKHR = struct VkSharedPresentSurfaceCapabilitiesKHR

struct VkSharedPresentSurfaceCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sharedPresentSupportedUsageFlags, type = (VkImageUsageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetSwapchainStatusKHR = VkResult (*)(VkDevice, VkSwapchainKHR) __attribute__((stdcall))

FUNC VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)

TYPEDEF VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags

TYPEDEF VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits

TYPEDEF VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags

TYPEDEF VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits

TYPEDEF VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo

TYPEDEF VkExternalFencePropertiesKHR = VkExternalFenceProperties

TYPEDEF PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalFenceInfo *, VkExternalFenceProperties *) __attribute__((stdcall))

FUNC void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties)

TYPEDEF VkFenceImportFlagsKHR = VkFenceImportFlags

TYPEDEF VkFenceImportFlagBitsKHR = VkFenceImportFlagBits

TYPEDEF VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo

struct VkImportFenceFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fence, type = (VkFence), offset = 16, size = 8
    name = flags, type = (VkFenceImportFlags), offset = 24, size = 4
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 28, size = 4
    name = fd, type = (int), offset = 32, size = 4
} ; size: 40

TYPEDEF VkImportFenceFdInfoKHR = struct VkImportFenceFdInfoKHR

struct VkImportFenceFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fence, type = (VkFence), offset = 16, size = 8
    name = flags, type = (VkFenceImportFlags), offset = 24, size = 4
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 28, size = 4
    name = fd, type = (int), offset = 32, size = 4
} ; size: 40

struct VkFenceGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fence, type = (VkFence), offset = 16, size = 8
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkFenceGetFdInfoKHR = struct VkFenceGetFdInfoKHR

struct VkFenceGetFdInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fence, type = (VkFence), offset = 16, size = 8
    name = handleType, type = (VkExternalFenceHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkImportFenceFdKHR = VkResult (*)(VkDevice, const VkImportFenceFdInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetFenceFdKHR = VkResult (*)(VkDevice, const VkFenceGetFdInfoKHR *, int *) __attribute__((stdcall))

FUNC VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR * pImportFenceFdInfo)

FUNC VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR * pGetFdInfo, int * pFd)

ENUM VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPerformanceCounterUnitKHR = enum VkPerformanceCounterUnitKHR

ENUM VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
}

ENUM VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0
    VK_QUERY_SCOPE_RENDER_PASS_KHR = 1
    VK_QUERY_SCOPE_COMMAND_KHR = 2
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPerformanceCounterScopeKHR = enum VkPerformanceCounterScopeKHR

ENUM VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0
    VK_QUERY_SCOPE_RENDER_PASS_KHR = 1
    VK_QUERY_SCOPE_COMMAND_KHR = 2
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
}

ENUM VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPerformanceCounterStorageKHR = enum VkPerformanceCounterStorageKHR

ENUM VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
}

ENUM VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPerformanceCounterDescriptionFlagBitsKHR = enum VkPerformanceCounterDescriptionFlagBitsKHR

ENUM VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPerformanceCounterDescriptionFlagsKHR = VkFlags

ENUM VkAcquireProfilingLockFlagBitsKHR {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAcquireProfilingLockFlagBitsKHR = enum VkAcquireProfilingLockFlagBitsKHR

ENUM VkAcquireProfilingLockFlagBitsKHR {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAcquireProfilingLockFlagsKHR = VkFlags

struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = performanceCounterQueryPools, type = (VkBool32), offset = 16, size = 4
    name = performanceCounterMultipleQueryPools, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePerformanceQueryFeaturesKHR = struct VkPhysicalDevicePerformanceQueryFeaturesKHR

struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = performanceCounterQueryPools, type = (VkBool32), offset = 16, size = 4
    name = performanceCounterMultipleQueryPools, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = allowCommandBufferQueryCopies, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePerformanceQueryPropertiesKHR = struct VkPhysicalDevicePerformanceQueryPropertiesKHR

struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = allowCommandBufferQueryCopies, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPerformanceCounterKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = unit, type = (VkPerformanceCounterUnitKHR), offset = 16, size = 4
    name = scope, type = (VkPerformanceCounterScopeKHR), offset = 20, size = 4
    name = storage, type = (VkPerformanceCounterStorageKHR), offset = 24, size = 4
    name = uuid, type = (uint8_t[16]), offset = 28, size = 16
} ; size: 48

TYPEDEF VkPerformanceCounterKHR = struct VkPerformanceCounterKHR

struct VkPerformanceCounterKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = unit, type = (VkPerformanceCounterUnitKHR), offset = 16, size = 4
    name = scope, type = (VkPerformanceCounterScopeKHR), offset = 20, size = 4
    name = storage, type = (VkPerformanceCounterStorageKHR), offset = 24, size = 4
    name = uuid, type = (uint8_t[16]), offset = 28, size = 16
} ; size: 48

struct VkPerformanceCounterDescriptionKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkPerformanceCounterDescriptionFlagsKHR), offset = 16, size = 4
    name = name, type = (char[256]), offset = 20, size = 256
    name = category, type = (char[256]), offset = 276, size = 256
    name = description, type = (char[256]), offset = 532, size = 256
} ; size: 792

TYPEDEF VkPerformanceCounterDescriptionKHR = struct VkPerformanceCounterDescriptionKHR

struct VkPerformanceCounterDescriptionKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkPerformanceCounterDescriptionFlagsKHR), offset = 16, size = 4
    name = name, type = (char[256]), offset = 20, size = 256
    name = category, type = (char[256]), offset = 276, size = 256
    name = description, type = (char[256]), offset = 532, size = 256
} ; size: 792

struct VkQueryPoolPerformanceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueFamilyIndex, type = (uint32_t), offset = 16, size = 4
    name = counterIndexCount, type = (uint32_t), offset = 20, size = 4
    name = pCounterIndices, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkQueryPoolPerformanceCreateInfoKHR = struct VkQueryPoolPerformanceCreateInfoKHR

struct VkQueryPoolPerformanceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueFamilyIndex, type = (uint32_t), offset = 16, size = 4
    name = counterIndexCount, type = (uint32_t), offset = 20, size = 4
    name = pCounterIndices, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPerformanceCounterResultKHR = union VkPerformanceCounterResultKHR

struct VkAcquireProfilingLockInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkAcquireProfilingLockFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = timeout, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAcquireProfilingLockInfoKHR = struct VkAcquireProfilingLockInfoKHR

struct VkAcquireProfilingLockInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkAcquireProfilingLockFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = timeout, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkPerformanceQuerySubmitInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = counterPassIndex, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPerformanceQuerySubmitInfoKHR = struct VkPerformanceQuerySubmitInfoKHR

struct VkPerformanceQuerySubmitInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = counterPassIndex, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = VkResult (*)(VkPhysicalDevice, uint32_t, uint32_t *, VkPerformanceCounterKHR *, VkPerformanceCounterDescriptionKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = void (*)(VkPhysicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *, uint32_t *) __attribute__((stdcall))

TYPEDEF PFN_vkAcquireProfilingLockKHR = VkResult (*)(VkDevice, const VkAcquireProfilingLockInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkReleaseProfilingLockKHR = void (*)(VkDevice) __attribute__((stdcall))

FUNC VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t * pCounterCount, VkPerformanceCounterKHR * pCounters, VkPerformanceCounterDescriptionKHR * pCounterDescriptions)

FUNC void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR * pPerformanceQueryCreateInfo, uint32_t * pNumPasses)

FUNC VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR * pInfo)

FUNC void vkReleaseProfilingLockKHR(VkDevice device)

TYPEDEF VkPointClippingBehaviorKHR = VkPointClippingBehavior

TYPEDEF VkTessellationDomainOriginKHR = VkTessellationDomainOrigin

TYPEDEF VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties

TYPEDEF VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo

TYPEDEF VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference

TYPEDEF VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo

TYPEDEF VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo

struct VkPhysicalDeviceSurfaceInfo2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = surface, type = (VkSurfaceKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceSurfaceInfo2KHR = struct VkPhysicalDeviceSurfaceInfo2KHR

struct VkPhysicalDeviceSurfaceInfo2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = surface, type = (VkSurfaceKHR), offset = 16, size = 8
} ; size: 24

struct VkSurfaceCapabilities2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = surfaceCapabilities, type = (VkSurfaceCapabilitiesKHR), offset = 16, size = 52
} ; size: 72

TYPEDEF VkSurfaceCapabilities2KHR = struct VkSurfaceCapabilities2KHR

struct VkSurfaceCapabilities2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = surfaceCapabilities, type = (VkSurfaceCapabilitiesKHR), offset = 16, size = 52
} ; size: 72

struct VkSurfaceFormat2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = surfaceFormat, type = (VkSurfaceFormatKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSurfaceFormat2KHR = struct VkSurfaceFormat2KHR

struct VkSurfaceFormat2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = surfaceFormat, type = (VkSurfaceFormatKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *, VkSurfaceCapabilities2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *, uint32_t *, VkSurfaceFormat2KHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, VkSurfaceCapabilities2KHR * pSurfaceCapabilities)

FUNC VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, uint32_t * pSurfaceFormatCount, VkSurfaceFormat2KHR * pSurfaceFormats)

TYPEDEF VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

TYPEDEF VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

struct VkDisplayProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayProperties, type = (VkDisplayPropertiesKHR), offset = 16, size = 48
} ; size: 64

TYPEDEF VkDisplayProperties2KHR = struct VkDisplayProperties2KHR

struct VkDisplayProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayProperties, type = (VkDisplayPropertiesKHR), offset = 16, size = 48
} ; size: 64

struct VkDisplayPlaneProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayPlaneProperties, type = (VkDisplayPlanePropertiesKHR), offset = 16, size = 16
} ; size: 32

TYPEDEF VkDisplayPlaneProperties2KHR = struct VkDisplayPlaneProperties2KHR

struct VkDisplayPlaneProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayPlaneProperties, type = (VkDisplayPlanePropertiesKHR), offset = 16, size = 16
} ; size: 32

struct VkDisplayModeProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayModeProperties, type = (VkDisplayModePropertiesKHR), offset = 16, size = 24
} ; size: 40

TYPEDEF VkDisplayModeProperties2KHR = struct VkDisplayModeProperties2KHR

struct VkDisplayModeProperties2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = displayModeProperties, type = (VkDisplayModePropertiesKHR), offset = 16, size = 24
} ; size: 40

struct VkDisplayPlaneInfo2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mode, type = (VkDisplayModeKHR), offset = 16, size = 8
    name = planeIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDisplayPlaneInfo2KHR = struct VkDisplayPlaneInfo2KHR

struct VkDisplayPlaneInfo2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mode, type = (VkDisplayModeKHR), offset = 16, size = 8
    name = planeIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkDisplayPlaneCapabilities2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = capabilities, type = (VkDisplayPlaneCapabilitiesKHR), offset = 16, size = 68
} ; size: 88

TYPEDEF VkDisplayPlaneCapabilities2KHR = struct VkDisplayPlaneCapabilities2KHR

struct VkDisplayPlaneCapabilities2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = capabilities, type = (VkDisplayPlaneCapabilitiesKHR), offset = 16, size = 68
} ; size: 88

TYPEDEF PFN_vkGetPhysicalDeviceDisplayProperties2KHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayProperties2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPlaneProperties2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDisplayModeProperties2KHR = VkResult (*)(VkPhysicalDevice, VkDisplayKHR, uint32_t *, VkDisplayModeProperties2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDisplayPlaneCapabilities2KHR = VkResult (*)(VkPhysicalDevice, const VkDisplayPlaneInfo2KHR *, VkDisplayPlaneCapabilities2KHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayProperties2KHR * pProperties)

FUNC VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlaneProperties2KHR * pProperties)

FUNC VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModeProperties2KHR * pProperties)

FUNC VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR * pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR * pCapabilities)

TYPEDEF VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements

TYPEDEF VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo

TYPEDEF VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2

TYPEDEF VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2

TYPEDEF VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2

TYPEDEF VkMemoryRequirements2KHR = VkMemoryRequirements2

TYPEDEF VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2

TYPEDEF PFN_vkGetImageMemoryRequirements2KHR = void (*)(VkDevice, const VkImageMemoryRequirementsInfo2 *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferMemoryRequirements2KHR = void (*)(VkDevice, const VkBufferMemoryRequirementsInfo2 *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSparseMemoryRequirements2KHR = void (*)(VkDevice, const VkImageSparseMemoryRequirementsInfo2 *, uint32_t *, VkSparseImageMemoryRequirements2 *) __attribute__((stdcall))

FUNC void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements)

TYPEDEF VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo

TYPEDEF VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion

TYPEDEF VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion

TYPEDEF VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange

TYPEDEF VkChromaLocationKHR = VkChromaLocation

TYPEDEF VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo

TYPEDEF VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo

TYPEDEF VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo

TYPEDEF VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo

TYPEDEF VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures

TYPEDEF VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties

TYPEDEF PFN_vkCreateSamplerYcbcrConversionKHR = VkResult (*)(VkDevice, const VkSamplerYcbcrConversionCreateInfo *, const VkAllocationCallbacks *, VkSamplerYcbcrConversion *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroySamplerYcbcrConversionKHR = void (*)(VkDevice, VkSamplerYcbcrConversion, const VkAllocationCallbacks *) __attribute__((stdcall))

FUNC VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion)

FUNC void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator)

TYPEDEF VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo

TYPEDEF VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo

TYPEDEF PFN_vkBindBufferMemory2KHR = VkResult (*)(VkDevice, uint32_t, const VkBindBufferMemoryInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkBindImageMemory2KHR = VkResult (*)(VkDevice, uint32_t, const VkBindImageMemoryInfo *) __attribute__((stdcall))

FUNC VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos)

FUNC VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos)

TYPEDEF VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties

TYPEDEF VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport

TYPEDEF PFN_vkGetDescriptorSetLayoutSupportKHR = void (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *) __attribute__((stdcall))

FUNC void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport)

TYPEDEF PFN_vkCmdDrawIndirectCountKHR = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndexedIndirectCountKHR = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

FUNC void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

TYPEDEF VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures

TYPEDEF VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures

TYPEDEF VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features

struct VkPhysicalDeviceShaderClockFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupClock, type = (VkBool32), offset = 16, size = 4
    name = shaderDeviceClock, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderClockFeaturesKHR = struct VkPhysicalDeviceShaderClockFeaturesKHR

struct VkPhysicalDeviceShaderClockFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupClock, type = (VkBool32), offset = 16, size = 4
    name = shaderDeviceClock, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkVideoDecodeH265ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoDecodeH265ProfileInfoKHR = struct VkVideoDecodeH265ProfileInfoKHR

struct VkVideoDecodeH265ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfileIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoDecodeH265CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoDecodeH265CapabilitiesKHR = struct VkVideoDecodeH265CapabilitiesKHR

struct VkVideoDecodeH265CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevelIdc, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdVPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdVPSs, type = (const int *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH265SessionParametersAddInfoKHR = struct VkVideoDecodeH265SessionParametersAddInfoKHR

struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdVPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdVPSs, type = (const int *), offset = -1, size = 8
    name = stdSPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdSPSs, type = (const int *), offset = -1, size = 8
    name = stdPPSCount, type = (uint32_t), offset = -1, size = 4
    name = pStdPPSs, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdVPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdSPSCount, type = (uint32_t), offset = 20, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pParametersAddInfo, type = (const VkVideoDecodeH265SessionParametersAddInfoKHR *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkVideoDecodeH265SessionParametersCreateInfoKHR = struct VkVideoDecodeH265SessionParametersCreateInfoKHR

struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxStdVPSCount, type = (uint32_t), offset = 16, size = 4
    name = maxStdSPSCount, type = (uint32_t), offset = 20, size = 4
    name = maxStdPPSCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pParametersAddInfo, type = (const VkVideoDecodeH265SessionParametersAddInfoKHR *), offset = 32, size = 8
} ; size: 40

struct VkVideoDecodeH265PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = sliceSegmentCount, type = (uint32_t), offset = -1, size = 4
    name = pSliceSegmentOffsets, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH265PictureInfoKHR = struct VkVideoDecodeH265PictureInfoKHR

struct VkVideoDecodeH265PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = sliceSegmentCount, type = (uint32_t), offset = -1, size = 4
    name = pSliceSegmentOffsets, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeH265DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeH265DpbSlotInfoKHR = struct VkVideoDecodeH265DpbSlotInfoKHR

struct VkVideoDecodeH265DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

ENUM VkQueueGlobalPriorityKHR {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkQueueGlobalPriorityKHR = enum VkQueueGlobalPriorityKHR

ENUM VkQueueGlobalPriorityKHR {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647
}

struct VkDeviceQueueGlobalPriorityCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = globalPriority, type = (VkQueueGlobalPriorityKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceQueueGlobalPriorityCreateInfoKHR = struct VkDeviceQueueGlobalPriorityCreateInfoKHR

struct VkDeviceQueueGlobalPriorityCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = globalPriority, type = (VkQueueGlobalPriorityKHR), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = globalPriorityQuery, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR

struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = globalPriorityQuery, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkQueueFamilyGlobalPriorityPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = priorityCount, type = (uint32_t), offset = 16, size = 4
    name = priorities, type = (VkQueueGlobalPriorityKHR[16]), offset = 20, size = 64
} ; size: 88

TYPEDEF VkQueueFamilyGlobalPriorityPropertiesKHR = struct VkQueueFamilyGlobalPriorityPropertiesKHR

struct VkQueueFamilyGlobalPriorityPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = priorityCount, type = (uint32_t), offset = 16, size = 4
    name = priorities, type = (VkQueueGlobalPriorityKHR[16]), offset = 20, size = 64
} ; size: 88

TYPEDEF VkDriverIdKHR = VkDriverId

TYPEDEF VkConformanceVersionKHR = VkConformanceVersion

TYPEDEF VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties

TYPEDEF VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence

TYPEDEF VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties

TYPEDEF VkResolveModeFlagBitsKHR = VkResolveModeFlagBits

TYPEDEF VkResolveModeFlagsKHR = VkResolveModeFlags

TYPEDEF VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve

TYPEDEF VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties

TYPEDEF VkSemaphoreTypeKHR = VkSemaphoreType

TYPEDEF VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits

TYPEDEF VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags

TYPEDEF VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures

TYPEDEF VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties

TYPEDEF VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo

TYPEDEF VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo

TYPEDEF VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo

TYPEDEF VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo

TYPEDEF PFN_vkGetSemaphoreCounterValueKHR = VkResult (*)(VkDevice, VkSemaphore, uint64_t *) __attribute__((stdcall))

TYPEDEF PFN_vkWaitSemaphoresKHR = VkResult (*)(VkDevice, const VkSemaphoreWaitInfo *, uint64_t) __attribute__((stdcall))

TYPEDEF PFN_vkSignalSemaphoreKHR = VkResult (*)(VkDevice, const VkSemaphoreSignalInfo *) __attribute__((stdcall))

FUNC VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t * pValue)

FUNC VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout)

FUNC VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo)

TYPEDEF VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures

TYPEDEF VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures

ENUM VkFragmentShadingRateCombinerOpKHR {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkFragmentShadingRateCombinerOpKHR = enum VkFragmentShadingRateCombinerOpKHR

ENUM VkFragmentShadingRateCombinerOpKHR {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647
}

struct VkFragmentShadingRateAttachmentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pFragmentShadingRateAttachment, type = (const VkAttachmentReference2 *), offset = 16, size = 8
    name = shadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 24, size = 8
} ; size: 32

TYPEDEF VkFragmentShadingRateAttachmentInfoKHR = struct VkFragmentShadingRateAttachmentInfoKHR

struct VkFragmentShadingRateAttachmentInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pFragmentShadingRateAttachment, type = (const VkAttachmentReference2 *), offset = 16, size = 8
    name = shadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 24, size = 8
} ; size: 32

struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentSize, type = (VkExtent2D), offset = 16, size = 8
    name = combinerOps, type = (VkFragmentShadingRateCombinerOpKHR[2]), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineFragmentShadingRateStateCreateInfoKHR = struct VkPipelineFragmentShadingRateStateCreateInfoKHR

struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentSize, type = (VkExtent2D), offset = 16, size = 8
    name = combinerOps, type = (VkFragmentShadingRateCombinerOpKHR[2]), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineFragmentShadingRate, type = (VkBool32), offset = 16, size = 4
    name = primitiveFragmentShadingRate, type = (VkBool32), offset = 20, size = 4
    name = attachmentFragmentShadingRate, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR

struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineFragmentShadingRate, type = (VkBool32), offset = 16, size = 4
    name = primitiveFragmentShadingRate, type = (VkBool32), offset = 20, size = 4
    name = attachmentFragmentShadingRate, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minFragmentShadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = maxFragmentShadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 24, size = 8
    name = maxFragmentShadingRateAttachmentTexelSizeAspectRatio, type = (uint32_t), offset = 32, size = 4
    name = primitiveFragmentShadingRateWithMultipleViewports, type = (VkBool32), offset = 36, size = 4
    name = layeredShadingRateAttachments, type = (VkBool32), offset = 40, size = 4
    name = fragmentShadingRateNonTrivialCombinerOps, type = (VkBool32), offset = 44, size = 4
    name = maxFragmentSize, type = (VkExtent2D), offset = 48, size = 8
    name = maxFragmentSizeAspectRatio, type = (uint32_t), offset = 56, size = 4
    name = maxFragmentShadingRateCoverageSamples, type = (uint32_t), offset = 60, size = 4
    name = maxFragmentShadingRateRasterizationSamples, type = (VkSampleCountFlagBits), offset = 64, size = 4
    name = fragmentShadingRateWithShaderDepthStencilWrites, type = (VkBool32), offset = 68, size = 4
    name = fragmentShadingRateWithSampleMask, type = (VkBool32), offset = 72, size = 4
    name = fragmentShadingRateWithShaderSampleMask, type = (VkBool32), offset = 76, size = 4
    name = fragmentShadingRateWithConservativeRasterization, type = (VkBool32), offset = 80, size = 4
    name = fragmentShadingRateWithFragmentShaderInterlock, type = (VkBool32), offset = 84, size = 4
    name = fragmentShadingRateWithCustomSampleLocations, type = (VkBool32), offset = 88, size = 4
    name = fragmentShadingRateStrictMultiplyCombiner, type = (VkBool32), offset = 92, size = 4
} ; size: 96

TYPEDEF VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR

struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minFragmentShadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = maxFragmentShadingRateAttachmentTexelSize, type = (VkExtent2D), offset = 24, size = 8
    name = maxFragmentShadingRateAttachmentTexelSizeAspectRatio, type = (uint32_t), offset = 32, size = 4
    name = primitiveFragmentShadingRateWithMultipleViewports, type = (VkBool32), offset = 36, size = 4
    name = layeredShadingRateAttachments, type = (VkBool32), offset = 40, size = 4
    name = fragmentShadingRateNonTrivialCombinerOps, type = (VkBool32), offset = 44, size = 4
    name = maxFragmentSize, type = (VkExtent2D), offset = 48, size = 8
    name = maxFragmentSizeAspectRatio, type = (uint32_t), offset = 56, size = 4
    name = maxFragmentShadingRateCoverageSamples, type = (uint32_t), offset = 60, size = 4
    name = maxFragmentShadingRateRasterizationSamples, type = (VkSampleCountFlagBits), offset = 64, size = 4
    name = fragmentShadingRateWithShaderDepthStencilWrites, type = (VkBool32), offset = 68, size = 4
    name = fragmentShadingRateWithSampleMask, type = (VkBool32), offset = 72, size = 4
    name = fragmentShadingRateWithShaderSampleMask, type = (VkBool32), offset = 76, size = 4
    name = fragmentShadingRateWithConservativeRasterization, type = (VkBool32), offset = 80, size = 4
    name = fragmentShadingRateWithFragmentShaderInterlock, type = (VkBool32), offset = 84, size = 4
    name = fragmentShadingRateWithCustomSampleLocations, type = (VkBool32), offset = 88, size = 4
    name = fragmentShadingRateStrictMultiplyCombiner, type = (VkBool32), offset = 92, size = 4
} ; size: 96

struct VkPhysicalDeviceFragmentShadingRateKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sampleCounts, type = (VkSampleCountFlags), offset = 16, size = 4
    name = fragmentSize, type = (VkExtent2D), offset = 20, size = 8
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentShadingRateKHR = struct VkPhysicalDeviceFragmentShadingRateKHR

struct VkPhysicalDeviceFragmentShadingRateKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sampleCounts, type = (VkSampleCountFlags), offset = 16, size = 4
    name = fragmentSize, type = (VkExtent2D), offset = 20, size = 8
} ; size: 32

TYPEDEF PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceFragmentShadingRateKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetFragmentShadingRateKHR = void (*)(VkCommandBuffer, const VkExtent2D *, const VkFragmentShadingRateCombinerOpKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t * pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR * pFragmentShadingRates)

FUNC void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D * pFragmentSize, const VkFragmentShadingRateCombinerOpKHR[2] combinerOps)

struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRenderingLocalRead, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR

struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRenderingLocalRead, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkRenderingAttachmentLocationInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentLocations, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkRenderingAttachmentLocationInfoKHR = struct VkRenderingAttachmentLocationInfoKHR

struct VkRenderingAttachmentLocationInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentLocations, type = (const uint32_t *), offset = 24, size = 8
} ; size: 32

struct VkRenderingInputAttachmentIndexInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentInputIndices, type = (const uint32_t *), offset = 24, size = 8
    name = pDepthInputAttachmentIndex, type = (const uint32_t *), offset = 32, size = 8
    name = pStencilInputAttachmentIndex, type = (const uint32_t *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkRenderingInputAttachmentIndexInfoKHR = struct VkRenderingInputAttachmentIndexInfoKHR

struct VkRenderingInputAttachmentIndexInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = colorAttachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorAttachmentInputIndices, type = (const uint32_t *), offset = 24, size = 8
    name = pDepthInputAttachmentIndex, type = (const uint32_t *), offset = 32, size = 8
    name = pStencilInputAttachmentIndex, type = (const uint32_t *), offset = 40, size = 8
} ; size: 48

TYPEDEF PFN_vkCmdSetRenderingAttachmentLocationsKHR = void (*)(VkCommandBuffer, const VkRenderingAttachmentLocationInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = void (*)(VkCommandBuffer, const VkRenderingInputAttachmentIndexInfoKHR *) __attribute__((stdcall))

FUNC void vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfoKHR * pLocationInfo)

FUNC void vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR * pLocationInfo)

struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderQuadControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderQuadControlFeaturesKHR = struct VkPhysicalDeviceShaderQuadControlFeaturesKHR

struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderQuadControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSurfaceProtectedCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = supportsProtected, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSurfaceProtectedCapabilitiesKHR = struct VkSurfaceProtectedCapabilitiesKHR

struct VkSurfaceProtectedCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = supportsProtected, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures

TYPEDEF VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout

TYPEDEF VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout

struct VkPhysicalDevicePresentWaitFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentWait, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePresentWaitFeaturesKHR = struct VkPhysicalDevicePresentWaitFeaturesKHR

struct VkPhysicalDevicePresentWaitFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentWait, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkWaitForPresentKHR = VkResult (*)(VkDevice, VkSwapchainKHR, uint64_t, uint64_t) __attribute__((stdcall))

FUNC VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)

TYPEDEF VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures

TYPEDEF VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures

TYPEDEF VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo

TYPEDEF VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo

TYPEDEF VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo

TYPEDEF VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo

TYPEDEF PFN_vkGetBufferDeviceAddressKHR = VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferOpaqueCaptureAddressKHR = uint64_t (*)(VkDevice, const VkBufferDeviceAddressInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = uint64_t (*)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo *) __attribute__((stdcall))

FUNC VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo * pInfo)

FUNC uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo * pInfo)

FUNC uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo)

TYPEDEF VkDeferredOperationKHR = struct VkDeferredOperationKHR_T *

TYPEDEF PFN_vkCreateDeferredOperationKHR = VkResult (*)(VkDevice, const VkAllocationCallbacks *, VkDeferredOperationKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDeferredOperationKHR = void (*)(VkDevice, VkDeferredOperationKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeferredOperationMaxConcurrencyKHR = uint32_t (*)(VkDevice, VkDeferredOperationKHR) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeferredOperationResultKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR) __attribute__((stdcall))

TYPEDEF PFN_vkDeferredOperationJoinKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR) __attribute__((stdcall))

FUNC VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks * pAllocator, VkDeferredOperationKHR * pDeferredOperation)

FUNC void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks * pAllocator)

FUNC uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)

FUNC VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)

FUNC VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)

ENUM VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkPipelineExecutableStatisticFormatKHR = enum VkPipelineExecutableStatisticFormatKHR

ENUM VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
}

struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineExecutableInfo, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR

struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineExecutableInfo, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipeline, type = (VkPipeline), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPipelineInfoKHR = struct VkPipelineInfoKHR

struct VkPipelineInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipeline, type = (VkPipeline), offset = 16, size = 8
} ; size: 24

struct VkPipelineExecutablePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stages, type = (VkShaderStageFlags), offset = 16, size = 4
    name = name, type = (char[256]), offset = 20, size = 256
    name = description, type = (char[256]), offset = 276, size = 256
    name = subgroupSize, type = (uint32_t), offset = 532, size = 4
} ; size: 536

TYPEDEF VkPipelineExecutablePropertiesKHR = struct VkPipelineExecutablePropertiesKHR

struct VkPipelineExecutablePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stages, type = (VkShaderStageFlags), offset = 16, size = 4
    name = name, type = (char[256]), offset = 20, size = 256
    name = description, type = (char[256]), offset = 276, size = 256
    name = subgroupSize, type = (uint32_t), offset = 532, size = 4
} ; size: 536

struct VkPipelineExecutableInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipeline, type = (VkPipeline), offset = 16, size = 8
    name = executableIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineExecutableInfoKHR = struct VkPipelineExecutableInfoKHR

struct VkPipelineExecutableInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipeline, type = (VkPipeline), offset = 16, size = 8
    name = executableIndex, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineExecutableStatisticValueKHR = union VkPipelineExecutableStatisticValueKHR

struct VkPipelineExecutableStatisticKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = description, type = (char[256]), offset = 272, size = 256
    name = format, type = (VkPipelineExecutableStatisticFormatKHR), offset = 528, size = 4
    padding (4 bytes)
    name = value, type = (VkPipelineExecutableStatisticValueKHR), offset = 536, size = 8
} ; size: 544

TYPEDEF VkPipelineExecutableStatisticKHR = struct VkPipelineExecutableStatisticKHR

struct VkPipelineExecutableStatisticKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = description, type = (char[256]), offset = 272, size = 256
    name = format, type = (VkPipelineExecutableStatisticFormatKHR), offset = 528, size = 4
    padding (4 bytes)
    name = value, type = (VkPipelineExecutableStatisticValueKHR), offset = 536, size = 8
} ; size: 544

struct VkPipelineExecutableInternalRepresentationKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = description, type = (char[256]), offset = 272, size = 256
    name = isText, type = (VkBool32), offset = 528, size = 4
    padding (4 bytes)
    name = dataSize, type = (size_t), offset = 536, size = 8
    name = pData, type = (void *), offset = 544, size = 8
} ; size: 552

TYPEDEF VkPipelineExecutableInternalRepresentationKHR = struct VkPipelineExecutableInternalRepresentationKHR

struct VkPipelineExecutableInternalRepresentationKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = name, type = (char[256]), offset = 16, size = 256
    name = description, type = (char[256]), offset = 272, size = 256
    name = isText, type = (VkBool32), offset = 528, size = 4
    padding (4 bytes)
    name = dataSize, type = (size_t), offset = 536, size = 8
    name = pData, type = (void *), offset = 544, size = 8
} ; size: 552

TYPEDEF PFN_vkGetPipelineExecutablePropertiesKHR = VkResult (*)(VkDevice, const VkPipelineInfoKHR *, uint32_t *, VkPipelineExecutablePropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPipelineExecutableStatisticsKHR = VkResult (*)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableStatisticKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPipelineExecutableInternalRepresentationsKHR = VkResult (*)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableInternalRepresentationKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR * pPipelineInfo, uint32_t * pExecutableCount, VkPipelineExecutablePropertiesKHR * pProperties)

FUNC VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pStatisticCount, VkPipelineExecutableStatisticKHR * pStatistics)

FUNC VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR * pInternalRepresentations)

ENUM VkMemoryUnmapFlagBitsKHR {
    VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 1
    VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkMemoryUnmapFlagBitsKHR = enum VkMemoryUnmapFlagBitsKHR

ENUM VkMemoryUnmapFlagBitsKHR {
    VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 1
    VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkMemoryUnmapFlagsKHR = VkFlags

struct VkMemoryMapInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryMapFlags), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

TYPEDEF VkMemoryMapInfoKHR = struct VkMemoryMapInfoKHR

struct VkMemoryMapInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryMapFlags), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
} ; size: 48

struct VkMemoryUnmapInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryUnmapFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
} ; size: 32

TYPEDEF VkMemoryUnmapInfoKHR = struct VkMemoryUnmapInfoKHR

struct VkMemoryUnmapInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkMemoryUnmapFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkMapMemory2KHR = VkResult (*)(VkDevice, const VkMemoryMapInfoKHR *, void **) __attribute__((stdcall))

TYPEDEF PFN_vkUnmapMemory2KHR = VkResult (*)(VkDevice, const VkMemoryUnmapInfoKHR *) __attribute__((stdcall))

FUNC VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR * pMemoryMapInfo, void ** ppData)

FUNC VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR * pMemoryUnmapInfo)

TYPEDEF VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures

TYPEDEF VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties

struct VkPipelineLibraryCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = libraryCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pLibraries, type = (const VkPipeline *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineLibraryCreateInfoKHR = struct VkPipelineLibraryCreateInfoKHR

struct VkPipelineLibraryCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = libraryCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pLibraries, type = (const VkPipeline *), offset = 24, size = 8
} ; size: 32

struct VkPresentIdKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentIds, type = (const uint64_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPresentIdKHR = struct VkPresentIdKHR

struct VkPresentIdKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentIds, type = (const uint64_t *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDevicePresentIdFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentId, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePresentIdFeaturesKHR = struct VkPhysicalDevicePresentIdFeaturesKHR

struct VkPhysicalDevicePresentIdFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentId, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkVideoEncodeTuningModeKHR {
    VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1
    VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2
    VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3
    VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4
    VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeTuningModeKHR = enum VkVideoEncodeTuningModeKHR

ENUM VkVideoEncodeTuningModeKHR {
    VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1
    VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2
    VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3
    VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4
    VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 2147483647
}

ENUM VkVideoEncodeFlagBitsKHR {
    VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeFlagBitsKHR = enum VkVideoEncodeFlagBitsKHR

ENUM VkVideoEncodeFlagBitsKHR {
    VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeFlagsKHR = VkFlags

ENUM VkVideoEncodeCapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1
    VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2
    VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeCapabilityFlagBitsKHR = enum VkVideoEncodeCapabilityFlagBitsKHR

ENUM VkVideoEncodeCapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1
    VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2
    VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeCapabilityFlagsKHR = VkFlags

ENUM VkVideoEncodeRateControlModeFlagBitsKHR {
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeRateControlModeFlagBitsKHR = enum VkVideoEncodeRateControlModeFlagBitsKHR

ENUM VkVideoEncodeRateControlModeFlagBitsKHR {
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeRateControlModeFlagsKHR = VkFlags

ENUM VkVideoEncodeFeedbackFlagBitsKHR {
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4
    VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeFeedbackFlagBitsKHR = enum VkVideoEncodeFeedbackFlagBitsKHR

ENUM VkVideoEncodeFeedbackFlagBitsKHR {
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4
    VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeFeedbackFlagsKHR = VkFlags

ENUM VkVideoEncodeUsageFlagBitsKHR {
    VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1
    VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2
    VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4
    VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8
    VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeUsageFlagBitsKHR = enum VkVideoEncodeUsageFlagBitsKHR

ENUM VkVideoEncodeUsageFlagBitsKHR {
    VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1
    VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2
    VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4
    VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8
    VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeUsageFlagsKHR = VkFlags

ENUM VkVideoEncodeContentFlagBitsKHR {
    VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1
    VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4
    VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeContentFlagBitsKHR = enum VkVideoEncodeContentFlagBitsKHR

ENUM VkVideoEncodeContentFlagBitsKHR {
    VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0
    VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1
    VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2
    VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4
    VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkVideoEncodeContentFlagsKHR = VkFlags

TYPEDEF VkVideoEncodeRateControlFlagsKHR = VkFlags

struct VkVideoEncodeInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = dstBuffer, type = (VkBuffer), offset = 24, size = 8
    name = dstBufferOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = dstBufferRange, type = (VkDeviceSize), offset = 40, size = 8
    name = srcPictureResource, type = (VkVideoPictureResourceInfoKHR), offset = 48, size = 48
    name = pSetupReferenceSlot, type = (const VkVideoReferenceSlotInfoKHR *), offset = 96, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 104, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 112, size = 8
    name = precedingExternallyEncodedBytes, type = (uint32_t), offset = 120, size = 4
} ; size: 128

TYPEDEF VkVideoEncodeInfoKHR = struct VkVideoEncodeInfoKHR

struct VkVideoEncodeInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = dstBuffer, type = (VkBuffer), offset = 24, size = 8
    name = dstBufferOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = dstBufferRange, type = (VkDeviceSize), offset = 40, size = 8
    name = srcPictureResource, type = (VkVideoPictureResourceInfoKHR), offset = 48, size = 48
    name = pSetupReferenceSlot, type = (const VkVideoReferenceSlotInfoKHR *), offset = 96, size = 8
    name = referenceSlotCount, type = (uint32_t), offset = 104, size = 4
    padding (4 bytes)
    name = pReferenceSlots, type = (const VkVideoReferenceSlotInfoKHR *), offset = 112, size = 8
    name = precedingExternallyEncodedBytes, type = (uint32_t), offset = 120, size = 4
} ; size: 128

struct VkVideoEncodeCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeCapabilityFlagsKHR), offset = 16, size = 4
    name = rateControlModes, type = (VkVideoEncodeRateControlModeFlagsKHR), offset = 20, size = 4
    name = maxRateControlLayers, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = maxBitrate, type = (uint64_t), offset = 32, size = 8
    name = maxQualityLevels, type = (uint32_t), offset = 40, size = 4
    name = encodeInputPictureGranularity, type = (VkExtent2D), offset = 44, size = 8
    name = supportedEncodeFeedbackFlags, type = (VkVideoEncodeFeedbackFlagsKHR), offset = 52, size = 4
} ; size: 56

TYPEDEF VkVideoEncodeCapabilitiesKHR = struct VkVideoEncodeCapabilitiesKHR

struct VkVideoEncodeCapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeCapabilityFlagsKHR), offset = 16, size = 4
    name = rateControlModes, type = (VkVideoEncodeRateControlModeFlagsKHR), offset = 20, size = 4
    name = maxRateControlLayers, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = maxBitrate, type = (uint64_t), offset = 32, size = 8
    name = maxQualityLevels, type = (uint32_t), offset = 40, size = 4
    name = encodeInputPictureGranularity, type = (VkExtent2D), offset = 44, size = 8
    name = supportedEncodeFeedbackFlags, type = (VkVideoEncodeFeedbackFlagsKHR), offset = 52, size = 4
} ; size: 56

struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = encodeFeedbackFlags, type = (VkVideoEncodeFeedbackFlagsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR

struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = encodeFeedbackFlags, type = (VkVideoEncodeFeedbackFlagsKHR), offset = 16, size = 4
} ; size: 24

struct VkVideoEncodeUsageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoUsageHints, type = (VkVideoEncodeUsageFlagsKHR), offset = 16, size = 4
    name = videoContentHints, type = (VkVideoEncodeContentFlagsKHR), offset = 20, size = 4
    name = tuningMode, type = (VkVideoEncodeTuningModeKHR), offset = 24, size = 4
} ; size: 32

TYPEDEF VkVideoEncodeUsageInfoKHR = struct VkVideoEncodeUsageInfoKHR

struct VkVideoEncodeUsageInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoUsageHints, type = (VkVideoEncodeUsageFlagsKHR), offset = 16, size = 4
    name = videoContentHints, type = (VkVideoEncodeContentFlagsKHR), offset = 20, size = 4
    name = tuningMode, type = (VkVideoEncodeTuningModeKHR), offset = 24, size = 4
} ; size: 32

struct VkVideoEncodeRateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = averageBitrate, type = (uint64_t), offset = 16, size = 8
    name = maxBitrate, type = (uint64_t), offset = 24, size = 8
    name = frameRateNumerator, type = (uint32_t), offset = 32, size = 4
    name = frameRateDenominator, type = (uint32_t), offset = 36, size = 4
} ; size: 40

TYPEDEF VkVideoEncodeRateControlLayerInfoKHR = struct VkVideoEncodeRateControlLayerInfoKHR

struct VkVideoEncodeRateControlLayerInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = averageBitrate, type = (uint64_t), offset = 16, size = 8
    name = maxBitrate, type = (uint64_t), offset = 24, size = 8
    name = frameRateNumerator, type = (uint32_t), offset = 32, size = 4
    name = frameRateDenominator, type = (uint32_t), offset = 36, size = 4
} ; size: 40

struct VkVideoEncodeRateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeRateControlFlagsKHR), offset = 16, size = 4
    name = rateControlMode, type = (VkVideoEncodeRateControlModeFlagBitsKHR), offset = 20, size = 4
    name = layerCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pLayers, type = (const VkVideoEncodeRateControlLayerInfoKHR *), offset = 32, size = 8
    name = virtualBufferSizeInMs, type = (uint32_t), offset = 40, size = 4
    name = initialVirtualBufferSizeInMs, type = (uint32_t), offset = 44, size = 4
} ; size: 48

TYPEDEF VkVideoEncodeRateControlInfoKHR = struct VkVideoEncodeRateControlInfoKHR

struct VkVideoEncodeRateControlInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkVideoEncodeRateControlFlagsKHR), offset = 16, size = 4
    name = rateControlMode, type = (VkVideoEncodeRateControlModeFlagBitsKHR), offset = 20, size = 4
    name = layerCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pLayers, type = (const VkVideoEncodeRateControlLayerInfoKHR *), offset = 32, size = 8
    name = virtualBufferSizeInMs, type = (uint32_t), offset = 40, size = 4
    name = initialVirtualBufferSizeInMs, type = (uint32_t), offset = 44, size = 4
} ; size: 48

struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVideoProfile, type = (const VkVideoProfileInfoKHR *), offset = 16, size = 8
    name = qualityLevel, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR

struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVideoProfile, type = (const VkVideoProfileInfoKHR *), offset = 16, size = 8
    name = qualityLevel, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkVideoEncodeQualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlMode, type = (VkVideoEncodeRateControlModeFlagBitsKHR), offset = 16, size = 4
    name = preferredRateControlLayerCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkVideoEncodeQualityLevelPropertiesKHR = struct VkVideoEncodeQualityLevelPropertiesKHR

struct VkVideoEncodeQualityLevelPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = preferredRateControlMode, type = (VkVideoEncodeRateControlModeFlagBitsKHR), offset = 16, size = 4
    name = preferredRateControlLayerCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkVideoEncodeQualityLevelInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = qualityLevel, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoEncodeQualityLevelInfoKHR = struct VkVideoEncodeQualityLevelInfoKHR

struct VkVideoEncodeQualityLevelInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = qualityLevel, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkVideoEncodeSessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoSessionParameters, type = (VkVideoSessionParametersKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkVideoEncodeSessionParametersGetInfoKHR = struct VkVideoEncodeSessionParametersGetInfoKHR

struct VkVideoEncodeSessionParametersGetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = videoSessionParameters, type = (VkVideoSessionParametersKHR), offset = 16, size = 8
} ; size: 24

struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasOverrides, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVideoEncodeSessionParametersFeedbackInfoKHR = struct VkVideoEncodeSessionParametersFeedbackInfoKHR

struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasOverrides, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *, VkVideoEncodeQualityLevelPropertiesKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetEncodedVideoSessionParametersKHR = VkResult (*)(VkDevice, const VkVideoEncodeSessionParametersGetInfoKHR *, VkVideoEncodeSessionParametersFeedbackInfoKHR *, size_t *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEncodeVideoKHR = void (*)(VkCommandBuffer, const VkVideoEncodeInfoKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR * pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR * pQualityLevelProperties)

FUNC VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR * pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR * pFeedbackInfo, size_t * pDataSize, void * pData)

FUNC void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR * pEncodeInfo)

TYPEDEF VkPipelineStageFlags2KHR = VkPipelineStageFlags2

TYPEDEF VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2

TYPEDEF VkAccessFlags2KHR = VkAccessFlags2

TYPEDEF VkAccessFlagBits2KHR = VkAccessFlagBits2

TYPEDEF VkSubmitFlagBitsKHR = VkSubmitFlagBits

TYPEDEF VkSubmitFlagsKHR = VkSubmitFlags

TYPEDEF VkMemoryBarrier2KHR = VkMemoryBarrier2

TYPEDEF VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2

TYPEDEF VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2

TYPEDEF VkDependencyInfoKHR = VkDependencyInfo

TYPEDEF VkSubmitInfo2KHR = VkSubmitInfo2

TYPEDEF VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo

TYPEDEF VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo

TYPEDEF VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features

struct VkQueueFamilyCheckpointProperties2NV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = checkpointExecutionStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
} ; size: 24

TYPEDEF VkQueueFamilyCheckpointProperties2NV = struct VkQueueFamilyCheckpointProperties2NV

struct VkQueueFamilyCheckpointProperties2NV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = checkpointExecutionStageMask, type = (VkPipelineStageFlags2), offset = 16, size = 8
} ; size: 24

struct VkCheckpointData2NV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stage, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = pCheckpointMarker, type = (void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCheckpointData2NV = struct VkCheckpointData2NV

struct VkCheckpointData2NV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stage, type = (VkPipelineStageFlags2), offset = 16, size = 8
    name = pCheckpointMarker, type = (void *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdSetEvent2KHR = void (*)(VkCommandBuffer, VkEvent, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResetEvent2KHR = void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWaitEvents2KHR = void (*)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPipelineBarrier2KHR = void (*)(VkCommandBuffer, const VkDependencyInfo *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteTimestamp2KHR = void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkQueueSubmit2KHR = VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteBufferMarker2AMD = void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetQueueCheckpointData2NV = void (*)(VkQueue, uint32_t *, VkCheckpointData2NV *) __attribute__((stdcall))

FUNC void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo)

FUNC void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)

FUNC void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos)

FUNC void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo)

FUNC void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)

FUNC VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence)

FUNC void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)

FUNC void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointData2NV * pCheckpointData)

struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShaderBarycentric, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR

struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShaderBarycentric, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = triStripVertexOrderIndependentOfProvokingVertex, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR

struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = triStripVertexOrderIndependentOfProvokingVertex, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupUniformControlFlow, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR

struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupUniformControlFlow, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = workgroupMemoryExplicitLayout, type = (VkBool32), offset = 16, size = 4
    name = workgroupMemoryExplicitLayoutScalarBlockLayout, type = (VkBool32), offset = 20, size = 4
    name = workgroupMemoryExplicitLayout8BitAccess, type = (VkBool32), offset = 24, size = 4
    name = workgroupMemoryExplicitLayout16BitAccess, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR

struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = workgroupMemoryExplicitLayout, type = (VkBool32), offset = 16, size = 4
    name = workgroupMemoryExplicitLayoutScalarBlockLayout, type = (VkBool32), offset = 20, size = 4
    name = workgroupMemoryExplicitLayout8BitAccess, type = (VkBool32), offset = 24, size = 4
    name = workgroupMemoryExplicitLayout16BitAccess, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkCopyBufferInfo2KHR = VkCopyBufferInfo2

TYPEDEF VkCopyImageInfo2KHR = VkCopyImageInfo2

TYPEDEF VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2

TYPEDEF VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2

TYPEDEF VkBlitImageInfo2KHR = VkBlitImageInfo2

TYPEDEF VkResolveImageInfo2KHR = VkResolveImageInfo2

TYPEDEF VkBufferCopy2KHR = VkBufferCopy2

TYPEDEF VkImageCopy2KHR = VkImageCopy2

TYPEDEF VkImageBlit2KHR = VkImageBlit2

TYPEDEF VkBufferImageCopy2KHR = VkBufferImageCopy2

TYPEDEF VkImageResolve2KHR = VkImageResolve2

TYPEDEF PFN_vkCmdCopyBuffer2KHR = void (*)(VkCommandBuffer, const VkCopyBufferInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImage2KHR = void (*)(VkCommandBuffer, const VkCopyImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyBufferToImage2KHR = void (*)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyImageToBuffer2KHR = void (*)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBlitImage2KHR = void (*)(VkCommandBuffer, const VkBlitImageInfo2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdResolveImage2KHR = void (*)(VkCommandBuffer, const VkResolveImageInfo2 *) __attribute__((stdcall))

FUNC void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo)

FUNC void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo)

FUNC void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo)

FUNC void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo)

FUNC void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo)

FUNC void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo)

TYPEDEF VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2

TYPEDEF VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2

TYPEDEF VkFormatProperties3KHR = VkFormatProperties3

struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingMaintenance1, type = (VkBool32), offset = 16, size = 4
    name = rayTracingPipelineTraceRaysIndirect2, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR

struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingMaintenance1, type = (VkBool32), offset = 16, size = 4
    name = rayTracingPipelineTraceRaysIndirect2, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkTraceRaysIndirectCommand2KHR {
    name = raygenShaderRecordAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = raygenShaderRecordSize, type = (VkDeviceSize), offset = 8, size = 8
    name = missShaderBindingTableAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = missShaderBindingTableSize, type = (VkDeviceSize), offset = 24, size = 8
    name = missShaderBindingTableStride, type = (VkDeviceSize), offset = 32, size = 8
    name = hitShaderBindingTableAddress, type = (VkDeviceAddress), offset = 40, size = 8
    name = hitShaderBindingTableSize, type = (VkDeviceSize), offset = 48, size = 8
    name = hitShaderBindingTableStride, type = (VkDeviceSize), offset = 56, size = 8
    name = callableShaderBindingTableAddress, type = (VkDeviceAddress), offset = 64, size = 8
    name = callableShaderBindingTableSize, type = (VkDeviceSize), offset = 72, size = 8
    name = callableShaderBindingTableStride, type = (VkDeviceSize), offset = 80, size = 8
    name = width, type = (uint32_t), offset = 88, size = 4
    name = height, type = (uint32_t), offset = 92, size = 4
    name = depth, type = (uint32_t), offset = 96, size = 4
} ; size: 104

TYPEDEF VkTraceRaysIndirectCommand2KHR = struct VkTraceRaysIndirectCommand2KHR

struct VkTraceRaysIndirectCommand2KHR {
    name = raygenShaderRecordAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = raygenShaderRecordSize, type = (VkDeviceSize), offset = 8, size = 8
    name = missShaderBindingTableAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = missShaderBindingTableSize, type = (VkDeviceSize), offset = 24, size = 8
    name = missShaderBindingTableStride, type = (VkDeviceSize), offset = 32, size = 8
    name = hitShaderBindingTableAddress, type = (VkDeviceAddress), offset = 40, size = 8
    name = hitShaderBindingTableSize, type = (VkDeviceSize), offset = 48, size = 8
    name = hitShaderBindingTableStride, type = (VkDeviceSize), offset = 56, size = 8
    name = callableShaderBindingTableAddress, type = (VkDeviceAddress), offset = 64, size = 8
    name = callableShaderBindingTableSize, type = (VkDeviceSize), offset = 72, size = 8
    name = callableShaderBindingTableStride, type = (VkDeviceSize), offset = 80, size = 8
    name = width, type = (uint32_t), offset = 88, size = 4
    name = height, type = (uint32_t), offset = 92, size = 4
    name = depth, type = (uint32_t), offset = 96, size = 4
} ; size: 104

TYPEDEF PFN_vkCmdTraceRaysIndirect2KHR = void (*)(VkCommandBuffer, VkDeviceAddress) __attribute__((stdcall))

FUNC void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)

TYPEDEF VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features

TYPEDEF VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties

TYPEDEF VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements

TYPEDEF VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements

TYPEDEF PFN_vkGetDeviceBufferMemoryRequirementsKHR = void (*)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceImageMemoryRequirementsKHR = void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *) __attribute__((stdcall))

FUNC void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements)

struct VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupRotate, type = (VkBool32), offset = 16, size = 4
    name = shaderSubgroupRotateClustered, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = struct VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR

struct VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSubgroupRotate, type = (VkBool32), offset = 16, size = 4
    name = shaderSubgroupRotateClustered, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderMaximalReconvergence, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR

struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderMaximalReconvergence, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineCreateFlags2KHR = VkFlags64

TYPEDEF VkPipelineCreateFlagBits2KHR = VkFlags64

TYPEDEF VkBufferUsageFlags2KHR = VkFlags64

TYPEDEF VkBufferUsageFlagBits2KHR = VkFlags64

struct VkPhysicalDeviceMaintenance5FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance5, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMaintenance5FeaturesKHR = struct VkPhysicalDeviceMaintenance5FeaturesKHR

struct VkPhysicalDeviceMaintenance5FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance5, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMaintenance5PropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = earlyFragmentMultisampleCoverageAfterSampleCounting, type = (VkBool32), offset = 16, size = 4
    name = earlyFragmentSampleMaskTestBeforeSampleCounting, type = (VkBool32), offset = 20, size = 4
    name = depthStencilSwizzleOneSupport, type = (VkBool32), offset = 24, size = 4
    name = polygonModePointSize, type = (VkBool32), offset = 28, size = 4
    name = nonStrictSinglePixelWideLinesUseParallelogram, type = (VkBool32), offset = 32, size = 4
    name = nonStrictWideLinesUseParallelogram, type = (VkBool32), offset = 36, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceMaintenance5PropertiesKHR = struct VkPhysicalDeviceMaintenance5PropertiesKHR

struct VkPhysicalDeviceMaintenance5PropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = earlyFragmentMultisampleCoverageAfterSampleCounting, type = (VkBool32), offset = 16, size = 4
    name = earlyFragmentSampleMaskTestBeforeSampleCounting, type = (VkBool32), offset = 20, size = 4
    name = depthStencilSwizzleOneSupport, type = (VkBool32), offset = 24, size = 4
    name = polygonModePointSize, type = (VkBool32), offset = 28, size = 4
    name = nonStrictSinglePixelWideLinesUseParallelogram, type = (VkBool32), offset = 32, size = 4
    name = nonStrictWideLinesUseParallelogram, type = (VkBool32), offset = 36, size = 4
} ; size: 40

struct VkRenderingAreaInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewMask, type = (uint32_t), offset = 16, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 24, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 32, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 36, size = 4
} ; size: 40

TYPEDEF VkRenderingAreaInfoKHR = struct VkRenderingAreaInfoKHR

struct VkRenderingAreaInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewMask, type = (uint32_t), offset = 16, size = 4
    name = colorAttachmentCount, type = (uint32_t), offset = 20, size = 4
    name = pColorAttachmentFormats, type = (const VkFormat *), offset = 24, size = 8
    name = depthAttachmentFormat, type = (VkFormat), offset = 32, size = 4
    name = stencilAttachmentFormat, type = (VkFormat), offset = 36, size = 4
} ; size: 40

struct VkImageSubresource2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageSubresource, type = (VkImageSubresource), offset = 16, size = 12
} ; size: 32

TYPEDEF VkImageSubresource2KHR = struct VkImageSubresource2KHR

struct VkImageSubresource2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageSubresource, type = (VkImageSubresource), offset = 16, size = 12
} ; size: 32

struct VkDeviceImageSubresourceInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkImageCreateInfo *), offset = 16, size = 8
    name = pSubresource, type = (const VkImageSubresource2KHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDeviceImageSubresourceInfoKHR = struct VkDeviceImageSubresourceInfoKHR

struct VkDeviceImageSubresourceInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pCreateInfo, type = (const VkImageCreateInfo *), offset = 16, size = 8
    name = pSubresource, type = (const VkImageSubresource2KHR *), offset = 24, size = 8
} ; size: 32

struct VkSubresourceLayout2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subresourceLayout, type = (VkSubresourceLayout), offset = 16, size = 40
} ; size: 56

TYPEDEF VkSubresourceLayout2KHR = struct VkSubresourceLayout2KHR

struct VkSubresourceLayout2KHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subresourceLayout, type = (VkSubresourceLayout), offset = 16, size = 40
} ; size: 56

struct VkPipelineCreateFlags2CreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags2KHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPipelineCreateFlags2CreateInfoKHR = struct VkPipelineCreateFlags2CreateInfoKHR

struct VkPipelineCreateFlags2CreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags2KHR), offset = 16, size = 8
} ; size: 24

struct VkBufferUsageFlags2CreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkBufferUsageFlags2KHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferUsageFlags2CreateInfoKHR = struct VkBufferUsageFlags2CreateInfoKHR

struct VkBufferUsageFlags2CreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkBufferUsageFlags2KHR), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkCmdBindIndexBuffer2KHR = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType) __attribute__((stdcall))

TYPEDEF PFN_vkGetRenderingAreaGranularityKHR = void (*)(VkDevice, const VkRenderingAreaInfoKHR *, VkExtent2D *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceImageSubresourceLayoutKHR = void (*)(VkDevice, const VkDeviceImageSubresourceInfoKHR *, VkSubresourceLayout2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSubresourceLayout2KHR = void (*)(VkDevice, VkImage, const VkImageSubresource2KHR *, VkSubresourceLayout2KHR *) __attribute__((stdcall))

FUNC void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)

FUNC void vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR * pRenderingAreaInfo, VkExtent2D * pGranularity)

FUNC void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR * pInfo, VkSubresourceLayout2KHR * pLayout)

FUNC void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR * pSubresource, VkSubresourceLayout2KHR * pLayout)

struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingPositionFetch, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR

struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingPositionFetch, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkComponentTypeKHR {
    VK_COMPONENT_TYPE_FLOAT16_KHR = 0
    VK_COMPONENT_TYPE_FLOAT32_KHR = 1
    VK_COMPONENT_TYPE_FLOAT64_KHR = 2
    VK_COMPONENT_TYPE_SINT8_KHR = 3
    VK_COMPONENT_TYPE_SINT16_KHR = 4
    VK_COMPONENT_TYPE_SINT32_KHR = 5
    VK_COMPONENT_TYPE_SINT64_KHR = 6
    VK_COMPONENT_TYPE_UINT8_KHR = 7
    VK_COMPONENT_TYPE_UINT16_KHR = 8
    VK_COMPONENT_TYPE_UINT32_KHR = 9
    VK_COMPONENT_TYPE_UINT64_KHR = 10
    VK_COMPONENT_TYPE_FLOAT16_NV = 0
    VK_COMPONENT_TYPE_FLOAT32_NV = 1
    VK_COMPONENT_TYPE_FLOAT64_NV = 2
    VK_COMPONENT_TYPE_SINT8_NV = 3
    VK_COMPONENT_TYPE_SINT16_NV = 4
    VK_COMPONENT_TYPE_SINT32_NV = 5
    VK_COMPONENT_TYPE_SINT64_NV = 6
    VK_COMPONENT_TYPE_UINT8_NV = 7
    VK_COMPONENT_TYPE_UINT16_NV = 8
    VK_COMPONENT_TYPE_UINT32_NV = 9
    VK_COMPONENT_TYPE_UINT64_NV = 10
    VK_COMPONENT_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkComponentTypeKHR = enum VkComponentTypeKHR

ENUM VkComponentTypeKHR {
    VK_COMPONENT_TYPE_FLOAT16_KHR = 0
    VK_COMPONENT_TYPE_FLOAT32_KHR = 1
    VK_COMPONENT_TYPE_FLOAT64_KHR = 2
    VK_COMPONENT_TYPE_SINT8_KHR = 3
    VK_COMPONENT_TYPE_SINT16_KHR = 4
    VK_COMPONENT_TYPE_SINT32_KHR = 5
    VK_COMPONENT_TYPE_SINT64_KHR = 6
    VK_COMPONENT_TYPE_UINT8_KHR = 7
    VK_COMPONENT_TYPE_UINT16_KHR = 8
    VK_COMPONENT_TYPE_UINT32_KHR = 9
    VK_COMPONENT_TYPE_UINT64_KHR = 10
    VK_COMPONENT_TYPE_FLOAT16_NV = 0
    VK_COMPONENT_TYPE_FLOAT32_NV = 1
    VK_COMPONENT_TYPE_FLOAT64_NV = 2
    VK_COMPONENT_TYPE_SINT8_NV = 3
    VK_COMPONENT_TYPE_SINT16_NV = 4
    VK_COMPONENT_TYPE_SINT32_NV = 5
    VK_COMPONENT_TYPE_SINT64_NV = 6
    VK_COMPONENT_TYPE_UINT8_NV = 7
    VK_COMPONENT_TYPE_UINT16_NV = 8
    VK_COMPONENT_TYPE_UINT32_NV = 9
    VK_COMPONENT_TYPE_UINT64_NV = 10
    VK_COMPONENT_TYPE_MAX_ENUM_KHR = 2147483647
}

ENUM VkScopeKHR {
    VK_SCOPE_DEVICE_KHR = 1
    VK_SCOPE_WORKGROUP_KHR = 2
    VK_SCOPE_SUBGROUP_KHR = 3
    VK_SCOPE_QUEUE_FAMILY_KHR = 5
    VK_SCOPE_DEVICE_NV = 1
    VK_SCOPE_WORKGROUP_NV = 2
    VK_SCOPE_SUBGROUP_NV = 3
    VK_SCOPE_QUEUE_FAMILY_NV = 5
    VK_SCOPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkScopeKHR = enum VkScopeKHR

ENUM VkScopeKHR {
    VK_SCOPE_DEVICE_KHR = 1
    VK_SCOPE_WORKGROUP_KHR = 2
    VK_SCOPE_SUBGROUP_KHR = 3
    VK_SCOPE_QUEUE_FAMILY_KHR = 5
    VK_SCOPE_DEVICE_NV = 1
    VK_SCOPE_WORKGROUP_NV = 2
    VK_SCOPE_SUBGROUP_NV = 3
    VK_SCOPE_QUEUE_FAMILY_NV = 5
    VK_SCOPE_MAX_ENUM_KHR = 2147483647
}

struct VkCooperativeMatrixPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = MSize, type = (uint32_t), offset = 16, size = 4
    name = NSize, type = (uint32_t), offset = 20, size = 4
    name = KSize, type = (uint32_t), offset = 24, size = 4
    name = AType, type = (VkComponentTypeKHR), offset = 28, size = 4
    name = BType, type = (VkComponentTypeKHR), offset = 32, size = 4
    name = CType, type = (VkComponentTypeKHR), offset = 36, size = 4
    name = ResultType, type = (VkComponentTypeKHR), offset = 40, size = 4
    name = saturatingAccumulation, type = (VkBool32), offset = 44, size = 4
    name = scope, type = (VkScopeKHR), offset = 48, size = 4
} ; size: 56

TYPEDEF VkCooperativeMatrixPropertiesKHR = struct VkCooperativeMatrixPropertiesKHR

struct VkCooperativeMatrixPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = MSize, type = (uint32_t), offset = 16, size = 4
    name = NSize, type = (uint32_t), offset = 20, size = 4
    name = KSize, type = (uint32_t), offset = 24, size = 4
    name = AType, type = (VkComponentTypeKHR), offset = 28, size = 4
    name = BType, type = (VkComponentTypeKHR), offset = 32, size = 4
    name = CType, type = (VkComponentTypeKHR), offset = 36, size = 4
    name = ResultType, type = (VkComponentTypeKHR), offset = 40, size = 4
    name = saturatingAccumulation, type = (VkBool32), offset = 44, size = 4
    name = scope, type = (VkScopeKHR), offset = 48, size = 4
} ; size: 56

struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrix, type = (VkBool32), offset = 16, size = 4
    name = cooperativeMatrixRobustBufferAccess, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCooperativeMatrixFeaturesKHR = struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR

struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrix, type = (VkBool32), offset = 16, size = 4
    name = cooperativeMatrixRobustBufferAccess, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrixSupportedStages, type = (VkShaderStageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCooperativeMatrixPropertiesKHR = struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR

struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrixSupportedStages, type = (VkShaderStageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkCooperativeMatrixPropertiesKHR *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesKHR * pProperties)

struct VkVideoDecodeAV1ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfile, type = (int), offset = -1, size = 4
    name = filmGrainSupport, type = (VkBool32), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoDecodeAV1ProfileInfoKHR = struct VkVideoDecodeAV1ProfileInfoKHR

struct VkVideoDecodeAV1ProfileInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = stdProfile, type = (int), offset = -1, size = 4
    name = filmGrainSupport, type = (VkBool32), offset = -1, size = 4
} ; size: 1

struct VkVideoDecodeAV1CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevel, type = (int), offset = -1, size = 4
} ; size: 1

TYPEDEF VkVideoDecodeAV1CapabilitiesKHR = struct VkVideoDecodeAV1CapabilitiesKHR

struct VkVideoDecodeAV1CapabilitiesKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (void *), offset = -1, size = 8
    name = maxLevel, type = (int), offset = -1, size = 4
} ; size: 1

struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdSequenceHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeAV1SessionParametersCreateInfoKHR = struct VkVideoDecodeAV1SessionParametersCreateInfoKHR

struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdSequenceHeader, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeAV1PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = referenceNameSlotIndices, type = (int32_t[7]), offset = -1, size = 28
    name = frameHeaderOffset, type = (uint32_t), offset = -1, size = 4
    name = tileCount, type = (uint32_t), offset = -1, size = 4
    name = pTileOffsets, type = (const uint32_t *), offset = -1, size = 8
    name = pTileSizes, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeAV1PictureInfoKHR = struct VkVideoDecodeAV1PictureInfoKHR

struct VkVideoDecodeAV1PictureInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdPictureInfo, type = (const int *), offset = -1, size = 8
    name = referenceNameSlotIndices, type = (int32_t[7]), offset = -1, size = 28
    name = frameHeaderOffset, type = (uint32_t), offset = -1, size = 4
    name = tileCount, type = (uint32_t), offset = -1, size = 4
    name = pTileOffsets, type = (const uint32_t *), offset = -1, size = 8
    name = pTileSizes, type = (const uint32_t *), offset = -1, size = 8
} ; size: 1

struct VkVideoDecodeAV1DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

TYPEDEF VkVideoDecodeAV1DpbSlotInfoKHR = struct VkVideoDecodeAV1DpbSlotInfoKHR

struct VkVideoDecodeAV1DpbSlotInfoKHR {
    name = sType, type = (VkStructureType), offset = -1, size = 4
    name = pNext, type = (const void *), offset = -1, size = 8
    name = pStdReferenceInfo, type = (const int *), offset = -1, size = 8
} ; size: 1

struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = videoMaintenance1, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVideoMaintenance1FeaturesKHR = struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR

struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = videoMaintenance1, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkVideoInlineQueryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queryPool, type = (VkQueryPool), offset = 16, size = 8
    name = firstQuery, type = (uint32_t), offset = 24, size = 4
    name = queryCount, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVideoInlineQueryInfoKHR = struct VkVideoInlineQueryInfoKHR

struct VkVideoInlineQueryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queryPool, type = (VkQueryPool), offset = 16, size = 8
    name = firstQuery, type = (uint32_t), offset = 24, size = 4
    name = queryCount, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVertexAttribDivisor, type = (uint32_t), offset = 16, size = 4
    name = supportsNonZeroFirstInstance, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = struct VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVertexAttribDivisor, type = (uint32_t), offset = 16, size = 4
    name = supportsNonZeroFirstInstance, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkVertexInputBindingDivisorDescriptionKHR {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = divisor, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkVertexInputBindingDivisorDescriptionKHR = struct VkVertexInputBindingDivisorDescriptionKHR

struct VkVertexInputBindingDivisorDescriptionKHR {
    name = binding, type = (uint32_t), offset = 0, size = 4
    name = divisor, type = (uint32_t), offset = 4, size = 4
} ; size: 8

struct VkPipelineVertexInputDivisorStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexBindingDivisorCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pVertexBindingDivisors, type = (const VkVertexInputBindingDivisorDescriptionKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineVertexInputDivisorStateCreateInfoKHR = struct VkPipelineVertexInputDivisorStateCreateInfoKHR

struct VkPipelineVertexInputDivisorStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexBindingDivisorCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pVertexBindingDivisors, type = (const VkVertexInputBindingDivisorDescriptionKHR *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vertexAttributeInstanceRateDivisor, type = (VkBool32), offset = 16, size = 4
    name = vertexAttributeInstanceRateZeroDivisor, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = struct VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR

struct VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vertexAttributeInstanceRateDivisor, type = (VkBool32), offset = 16, size = 4
    name = vertexAttributeInstanceRateZeroDivisor, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderFloatControls2FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloatControls2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderFloatControls2FeaturesKHR = struct VkPhysicalDeviceShaderFloatControls2FeaturesKHR

struct VkPhysicalDeviceShaderFloatControls2FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloatControls2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceIndexTypeUint8FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indexTypeUint8, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceIndexTypeUint8FeaturesKHR = struct VkPhysicalDeviceIndexTypeUint8FeaturesKHR

struct VkPhysicalDeviceIndexTypeUint8FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indexTypeUint8, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkLineRasterizationModeKHR {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = 0
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = 1
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = 2
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = 3
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkLineRasterizationModeKHR = enum VkLineRasterizationModeKHR

ENUM VkLineRasterizationModeKHR {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = 0
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = 1
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = 2
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = 3
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_KHR = 2147483647
}

struct VkPhysicalDeviceLineRasterizationFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rectangularLines, type = (VkBool32), offset = 16, size = 4
    name = bresenhamLines, type = (VkBool32), offset = 20, size = 4
    name = smoothLines, type = (VkBool32), offset = 24, size = 4
    name = stippledRectangularLines, type = (VkBool32), offset = 28, size = 4
    name = stippledBresenhamLines, type = (VkBool32), offset = 32, size = 4
    name = stippledSmoothLines, type = (VkBool32), offset = 36, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceLineRasterizationFeaturesKHR = struct VkPhysicalDeviceLineRasterizationFeaturesKHR

struct VkPhysicalDeviceLineRasterizationFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rectangularLines, type = (VkBool32), offset = 16, size = 4
    name = bresenhamLines, type = (VkBool32), offset = 20, size = 4
    name = smoothLines, type = (VkBool32), offset = 24, size = 4
    name = stippledRectangularLines, type = (VkBool32), offset = 28, size = 4
    name = stippledBresenhamLines, type = (VkBool32), offset = 32, size = 4
    name = stippledSmoothLines, type = (VkBool32), offset = 36, size = 4
} ; size: 40

struct VkPhysicalDeviceLineRasterizationPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = lineSubPixelPrecisionBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceLineRasterizationPropertiesKHR = struct VkPhysicalDeviceLineRasterizationPropertiesKHR

struct VkPhysicalDeviceLineRasterizationPropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = lineSubPixelPrecisionBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPipelineRasterizationLineStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = lineRasterizationMode, type = (VkLineRasterizationModeKHR), offset = 16, size = 4
    name = stippledLineEnable, type = (VkBool32), offset = 20, size = 4
    name = lineStippleFactor, type = (uint32_t), offset = 24, size = 4
    name = lineStipplePattern, type = (uint16_t), offset = 28, size = 2
} ; size: 32

TYPEDEF VkPipelineRasterizationLineStateCreateInfoKHR = struct VkPipelineRasterizationLineStateCreateInfoKHR

struct VkPipelineRasterizationLineStateCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = lineRasterizationMode, type = (VkLineRasterizationModeKHR), offset = 16, size = 4
    name = stippledLineEnable, type = (VkBool32), offset = 20, size = 4
    name = lineStippleFactor, type = (uint32_t), offset = 24, size = 4
    name = lineStipplePattern, type = (uint16_t), offset = 28, size = 2
} ; size: 32

TYPEDEF PFN_vkCmdSetLineStippleKHR = void (*)(VkCommandBuffer, uint32_t, uint16_t) __attribute__((stdcall))

FUNC void vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)

ENUM VkTimeDomainKHR {
    VK_TIME_DOMAIN_DEVICE_KHR = 0
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3
    VK_TIME_DOMAIN_DEVICE_EXT = 0
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
    VK_TIME_DOMAIN_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkTimeDomainKHR = enum VkTimeDomainKHR

ENUM VkTimeDomainKHR {
    VK_TIME_DOMAIN_DEVICE_KHR = 0
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3
    VK_TIME_DOMAIN_DEVICE_EXT = 0
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
    VK_TIME_DOMAIN_MAX_ENUM_KHR = 2147483647
}

struct VkCalibratedTimestampInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = timeDomain, type = (VkTimeDomainKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkCalibratedTimestampInfoKHR = struct VkCalibratedTimestampInfoKHR

struct VkCalibratedTimestampInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = timeDomain, type = (VkTimeDomainKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = VkResult (*)(VkPhysicalDevice, uint32_t *, VkTimeDomainKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetCalibratedTimestampsKHR = VkResult (*)(VkDevice, uint32_t, const VkCalibratedTimestampInfoKHR *, uint64_t *, uint64_t *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains)

FUNC VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation)

struct VkPhysicalDeviceShaderExpectAssumeFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderExpectAssume, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = struct VkPhysicalDeviceShaderExpectAssumeFeaturesKHR

struct VkPhysicalDeviceShaderExpectAssumeFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderExpectAssume, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMaintenance6FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance6, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMaintenance6FeaturesKHR = struct VkPhysicalDeviceMaintenance6FeaturesKHR

struct VkPhysicalDeviceMaintenance6FeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maintenance6, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMaintenance6PropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = blockTexelViewCompatibleMultipleLayers, type = (VkBool32), offset = 16, size = 4
    name = maxCombinedImageSamplerDescriptorCount, type = (uint32_t), offset = 20, size = 4
    name = fragmentShadingRateClampCombinerInputs, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceMaintenance6PropertiesKHR = struct VkPhysicalDeviceMaintenance6PropertiesKHR

struct VkPhysicalDeviceMaintenance6PropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = blockTexelViewCompatibleMultipleLayers, type = (VkBool32), offset = 16, size = 4
    name = maxCombinedImageSamplerDescriptorCount, type = (uint32_t), offset = 20, size = 4
    name = fragmentShadingRateClampCombinerInputs, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkBindMemoryStatusKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pResult, type = (VkResult *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBindMemoryStatusKHR = struct VkBindMemoryStatusKHR

struct VkBindMemoryStatusKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pResult, type = (VkResult *), offset = 16, size = 8
} ; size: 24

struct VkBindDescriptorSetsInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = firstSet, type = (uint32_t), offset = 32, size = 4
    name = descriptorSetCount, type = (uint32_t), offset = 36, size = 4
    name = pDescriptorSets, type = (const VkDescriptorSet *), offset = 40, size = 8
    name = dynamicOffsetCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDynamicOffsets, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkBindDescriptorSetsInfoKHR = struct VkBindDescriptorSetsInfoKHR

struct VkBindDescriptorSetsInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = firstSet, type = (uint32_t), offset = 32, size = 4
    name = descriptorSetCount, type = (uint32_t), offset = 36, size = 4
    name = pDescriptorSets, type = (const VkDescriptorSet *), offset = 40, size = 8
    name = dynamicOffsetCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pDynamicOffsets, type = (const uint32_t *), offset = 56, size = 8
} ; size: 64

struct VkPushConstantsInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = layout, type = (VkPipelineLayout), offset = 16, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 24, size = 4
    name = offset, type = (uint32_t), offset = 28, size = 4
    name = size, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pValues, type = (const void *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPushConstantsInfoKHR = struct VkPushConstantsInfoKHR

struct VkPushConstantsInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = layout, type = (VkPipelineLayout), offset = 16, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 24, size = 4
    name = offset, type = (uint32_t), offset = 28, size = 4
    name = size, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pValues, type = (const void *), offset = 40, size = 8
} ; size: 48

struct VkPushDescriptorSetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
    name = descriptorWriteCount, type = (uint32_t), offset = 36, size = 4
    name = pDescriptorWrites, type = (const VkWriteDescriptorSet *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPushDescriptorSetInfoKHR = struct VkPushDescriptorSetInfoKHR

struct VkPushDescriptorSetInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
    name = descriptorWriteCount, type = (uint32_t), offset = 36, size = 4
    name = pDescriptorWrites, type = (const VkWriteDescriptorSet *), offset = 40, size = 8
} ; size: 48

struct VkPushDescriptorSetWithTemplateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorUpdateTemplate, type = (VkDescriptorUpdateTemplate), offset = 16, size = 8
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pData, type = (const void *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkPushDescriptorSetWithTemplateInfoKHR = struct VkPushDescriptorSetWithTemplateInfoKHR

struct VkPushDescriptorSetWithTemplateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorUpdateTemplate, type = (VkDescriptorUpdateTemplate), offset = 16, size = 8
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pData, type = (const void *), offset = 40, size = 8
} ; size: 48

struct VkSetDescriptorBufferOffsetsInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = firstSet, type = (uint32_t), offset = 32, size = 4
    name = setCount, type = (uint32_t), offset = 36, size = 4
    name = pBufferIndices, type = (const uint32_t *), offset = 40, size = 8
    name = pOffsets, type = (const VkDeviceSize *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkSetDescriptorBufferOffsetsInfoEXT = struct VkSetDescriptorBufferOffsetsInfoEXT

struct VkSetDescriptorBufferOffsetsInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = firstSet, type = (uint32_t), offset = 32, size = 4
    name = setCount, type = (uint32_t), offset = 36, size = 4
    name = pBufferIndices, type = (const uint32_t *), offset = 40, size = 8
    name = pOffsets, type = (const VkDeviceSize *), offset = 48, size = 8
} ; size: 56

struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkBindDescriptorBufferEmbeddedSamplersInfoEXT = struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT

struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageFlags, type = (VkShaderStageFlags), offset = 16, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 24, size = 8
    name = set, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF PFN_vkCmdBindDescriptorSets2KHR = void (*)(VkCommandBuffer, const VkBindDescriptorSetsInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPushConstants2KHR = void (*)(VkCommandBuffer, const VkPushConstantsInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPushDescriptorSet2KHR = void (*)(VkCommandBuffer, const VkPushDescriptorSetInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPushDescriptorSetWithTemplate2KHR = void (*)(VkCommandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDescriptorBufferOffsets2EXT = void (*)(VkCommandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = void (*)(VkCommandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *) __attribute__((stdcall))

FUNC void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR * pBindDescriptorSetsInfo)

FUNC void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR * pPushConstantsInfo)

FUNC void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR * pPushDescriptorSetInfo)

FUNC void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR * pPushDescriptorSetWithTemplateInfo)

FUNC void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT * pSetDescriptorBufferOffsetsInfo)

FUNC void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT * pBindDescriptorBufferEmbeddedSamplersInfo)

TYPEDEF VkDebugReportCallbackEXT = struct VkDebugReportCallbackEXT_T *

ENUM VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugReportObjectTypeEXT = enum VkDebugReportObjectTypeEXT

ENUM VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugReportFlagBitsEXT = enum VkDebugReportFlagBitsEXT

ENUM VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugReportFlagsEXT = VkFlags

TYPEDEF PFN_vkDebugReportCallbackEXT = VkBool32 (*)(VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64_t, size_t, int32_t, const char *, const char *, void *) __attribute__((stdcall))

struct VkDebugReportCallbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugReportFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pfnCallback, type = (PFN_vkDebugReportCallbackEXT), offset = 24, size = 8
    name = pUserData, type = (void *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDebugReportCallbackCreateInfoEXT = struct VkDebugReportCallbackCreateInfoEXT

struct VkDebugReportCallbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugReportFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pfnCallback, type = (PFN_vkDebugReportCallbackEXT), offset = 24, size = 8
    name = pUserData, type = (void *), offset = 32, size = 8
} ; size: 40

TYPEDEF PFN_vkCreateDebugReportCallbackEXT = VkResult (*)(VkInstance, const VkDebugReportCallbackCreateInfoEXT *, const VkAllocationCallbacks *, VkDebugReportCallbackEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDebugReportCallbackEXT = void (*)(VkInstance, VkDebugReportCallbackEXT, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkDebugReportMessageEXT = void (*)(VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64_t, size_t, int32_t, const char *, const char *) __attribute__((stdcall))

FUNC VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugReportCallbackEXT * pCallback)

FUNC void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks * pAllocator)

FUNC void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char * pLayerPrefix, const char * pMessage)

ENUM VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkRasterizationOrderAMD = enum VkRasterizationOrderAMD

ENUM VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
}

struct VkPipelineRasterizationStateRasterizationOrderAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = rasterizationOrder, type = (VkRasterizationOrderAMD), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineRasterizationStateRasterizationOrderAMD = struct VkPipelineRasterizationStateRasterizationOrderAMD

struct VkPipelineRasterizationStateRasterizationOrderAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = rasterizationOrder, type = (VkRasterizationOrderAMD), offset = 16, size = 4
} ; size: 24

struct VkDebugMarkerObjectNameInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkDebugReportObjectTypeEXT), offset = 16, size = 4
    padding (4 bytes)
    name = object, type = (uint64_t), offset = 24, size = 8
    name = pObjectName, type = (const char *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDebugMarkerObjectNameInfoEXT = struct VkDebugMarkerObjectNameInfoEXT

struct VkDebugMarkerObjectNameInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkDebugReportObjectTypeEXT), offset = 16, size = 4
    padding (4 bytes)
    name = object, type = (uint64_t), offset = 24, size = 8
    name = pObjectName, type = (const char *), offset = 32, size = 8
} ; size: 40

struct VkDebugMarkerObjectTagInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkDebugReportObjectTypeEXT), offset = 16, size = 4
    padding (4 bytes)
    name = object, type = (uint64_t), offset = 24, size = 8
    name = tagName, type = (uint64_t), offset = 32, size = 8
    name = tagSize, type = (size_t), offset = 40, size = 8
    name = pTag, type = (const void *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkDebugMarkerObjectTagInfoEXT = struct VkDebugMarkerObjectTagInfoEXT

struct VkDebugMarkerObjectTagInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkDebugReportObjectTypeEXT), offset = 16, size = 4
    padding (4 bytes)
    name = object, type = (uint64_t), offset = 24, size = 8
    name = tagName, type = (uint64_t), offset = 32, size = 8
    name = tagSize, type = (size_t), offset = 40, size = 8
    name = pTag, type = (const void *), offset = 48, size = 8
} ; size: 56

struct VkDebugMarkerMarkerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pMarkerName, type = (const char *), offset = 16, size = 8
    name = color, type = (float[4]), offset = 24, size = 16
} ; size: 40

TYPEDEF VkDebugMarkerMarkerInfoEXT = struct VkDebugMarkerMarkerInfoEXT

struct VkDebugMarkerMarkerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pMarkerName, type = (const char *), offset = 16, size = 8
    name = color, type = (float[4]), offset = 24, size = 16
} ; size: 40

TYPEDEF PFN_vkDebugMarkerSetObjectTagEXT = VkResult (*)(VkDevice, const VkDebugMarkerObjectTagInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDebugMarkerSetObjectNameEXT = VkResult (*)(VkDevice, const VkDebugMarkerObjectNameInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDebugMarkerBeginEXT = void (*)(VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDebugMarkerEndEXT = void (*)(VkCommandBuffer) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDebugMarkerInsertEXT = void (*)(VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT *) __attribute__((stdcall))

FUNC VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT * pTagInfo)

FUNC VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT * pNameInfo)

FUNC void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo)

FUNC void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)

FUNC void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo)

struct VkDedicatedAllocationImageCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dedicatedAllocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDedicatedAllocationImageCreateInfoNV = struct VkDedicatedAllocationImageCreateInfoNV

struct VkDedicatedAllocationImageCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dedicatedAllocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDedicatedAllocationBufferCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dedicatedAllocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDedicatedAllocationBufferCreateInfoNV = struct VkDedicatedAllocationBufferCreateInfoNV

struct VkDedicatedAllocationBufferCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dedicatedAllocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDedicatedAllocationMemoryAllocateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = buffer, type = (VkBuffer), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDedicatedAllocationMemoryAllocateInfoNV = struct VkDedicatedAllocationMemoryAllocateInfoNV

struct VkDedicatedAllocationMemoryAllocateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = buffer, type = (VkBuffer), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags

struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transformFeedback, type = (VkBool32), offset = 16, size = 4
    name = geometryStreams, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct VkPhysicalDeviceTransformFeedbackFeaturesEXT

struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transformFeedback, type = (VkBool32), offset = 16, size = 4
    name = geometryStreams, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTransformFeedbackStreams, type = (uint32_t), offset = 16, size = 4
    name = maxTransformFeedbackBuffers, type = (uint32_t), offset = 20, size = 4
    name = maxTransformFeedbackBufferSize, type = (VkDeviceSize), offset = 24, size = 8
    name = maxTransformFeedbackStreamDataSize, type = (uint32_t), offset = 32, size = 4
    name = maxTransformFeedbackBufferDataSize, type = (uint32_t), offset = 36, size = 4
    name = maxTransformFeedbackBufferDataStride, type = (uint32_t), offset = 40, size = 4
    name = transformFeedbackQueries, type = (VkBool32), offset = 44, size = 4
    name = transformFeedbackStreamsLinesTriangles, type = (VkBool32), offset = 48, size = 4
    name = transformFeedbackRasterizationStreamSelect, type = (VkBool32), offset = 52, size = 4
    name = transformFeedbackDraw, type = (VkBool32), offset = 56, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct VkPhysicalDeviceTransformFeedbackPropertiesEXT

struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTransformFeedbackStreams, type = (uint32_t), offset = 16, size = 4
    name = maxTransformFeedbackBuffers, type = (uint32_t), offset = 20, size = 4
    name = maxTransformFeedbackBufferSize, type = (VkDeviceSize), offset = 24, size = 8
    name = maxTransformFeedbackStreamDataSize, type = (uint32_t), offset = 32, size = 4
    name = maxTransformFeedbackBufferDataSize, type = (uint32_t), offset = 36, size = 4
    name = maxTransformFeedbackBufferDataStride, type = (uint32_t), offset = 40, size = 4
    name = transformFeedbackQueries, type = (VkBool32), offset = 44, size = 4
    name = transformFeedbackStreamsLinesTriangles, type = (VkBool32), offset = 48, size = 4
    name = transformFeedbackRasterizationStreamSelect, type = (VkBool32), offset = 52, size = 4
    name = transformFeedbackDraw, type = (VkBool32), offset = 56, size = 4
} ; size: 64

struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationStateStreamCreateFlagsEXT), offset = 16, size = 4
    name = rasterizationStream, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPipelineRasterizationStateStreamCreateInfoEXT = struct VkPipelineRasterizationStateStreamCreateInfoEXT

struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationStateStreamCreateFlagsEXT), offset = 16, size = 4
    name = rasterizationStream, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdBindTransformFeedbackBuffersEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginTransformFeedbackEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndTransformFeedbackEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginQueryIndexedEXT = void (*)(VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndQueryIndexedEXT = void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndirectByteCountEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes)

FUNC void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets)

FUNC void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets)

FUNC void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)

FUNC void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)

FUNC void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)

TYPEDEF VkCuModuleNVX = struct VkCuModuleNVX_T *

TYPEDEF VkCuFunctionNVX = struct VkCuFunctionNVX_T *

struct VkCuModuleCreateInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCuModuleCreateInfoNVX = struct VkCuModuleCreateInfoNVX

struct VkCuModuleCreateInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkCuFunctionCreateInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = module, type = (VkCuModuleNVX), offset = 16, size = 8
    name = pName, type = (const char *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCuFunctionCreateInfoNVX = struct VkCuFunctionCreateInfoNVX

struct VkCuFunctionCreateInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = module, type = (VkCuModuleNVX), offset = 16, size = 8
    name = pName, type = (const char *), offset = 24, size = 8
} ; size: 32

struct VkCuLaunchInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = function, type = (VkCuFunctionNVX), offset = 16, size = 8
    name = gridDimX, type = (uint32_t), offset = 24, size = 4
    name = gridDimY, type = (uint32_t), offset = 28, size = 4
    name = gridDimZ, type = (uint32_t), offset = 32, size = 4
    name = blockDimX, type = (uint32_t), offset = 36, size = 4
    name = blockDimY, type = (uint32_t), offset = 40, size = 4
    name = blockDimZ, type = (uint32_t), offset = 44, size = 4
    name = sharedMemBytes, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = paramCount, type = (size_t), offset = 56, size = 8
    name = pParams, type = (const void *const *), offset = 64, size = 8
    name = extraCount, type = (size_t), offset = 72, size = 8
    name = pExtras, type = (const void *const *), offset = 80, size = 8
} ; size: 88

TYPEDEF VkCuLaunchInfoNVX = struct VkCuLaunchInfoNVX

struct VkCuLaunchInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = function, type = (VkCuFunctionNVX), offset = 16, size = 8
    name = gridDimX, type = (uint32_t), offset = 24, size = 4
    name = gridDimY, type = (uint32_t), offset = 28, size = 4
    name = gridDimZ, type = (uint32_t), offset = 32, size = 4
    name = blockDimX, type = (uint32_t), offset = 36, size = 4
    name = blockDimY, type = (uint32_t), offset = 40, size = 4
    name = blockDimZ, type = (uint32_t), offset = 44, size = 4
    name = sharedMemBytes, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = paramCount, type = (size_t), offset = 56, size = 8
    name = pParams, type = (const void *const *), offset = 64, size = 8
    name = extraCount, type = (size_t), offset = 72, size = 8
    name = pExtras, type = (const void *const *), offset = 80, size = 8
} ; size: 88

TYPEDEF PFN_vkCreateCuModuleNVX = VkResult (*)(VkDevice, const VkCuModuleCreateInfoNVX *, const VkAllocationCallbacks *, VkCuModuleNVX *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateCuFunctionNVX = VkResult (*)(VkDevice, const VkCuFunctionCreateInfoNVX *, const VkAllocationCallbacks *, VkCuFunctionNVX *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyCuModuleNVX = void (*)(VkDevice, VkCuModuleNVX, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyCuFunctionNVX = void (*)(VkDevice, VkCuFunctionNVX, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCuLaunchKernelNVX = void (*)(VkCommandBuffer, const VkCuLaunchInfoNVX *) __attribute__((stdcall))

FUNC VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuModuleNVX * pModule)

FUNC VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuFunctionNVX * pFunction)

FUNC void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks * pAllocator)

FUNC void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks * pAllocator)

FUNC void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX * pLaunchInfo)

struct VkImageViewHandleInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = descriptorType, type = (VkDescriptorType), offset = 24, size = 4
    padding (4 bytes)
    name = sampler, type = (VkSampler), offset = 32, size = 8
} ; size: 40

TYPEDEF VkImageViewHandleInfoNVX = struct VkImageViewHandleInfoNVX

struct VkImageViewHandleInfoNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
    name = descriptorType, type = (VkDescriptorType), offset = 24, size = 4
    padding (4 bytes)
    name = sampler, type = (VkSampler), offset = 32, size = 8
} ; size: 40

struct VkImageViewAddressPropertiesNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = size, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImageViewAddressPropertiesNVX = struct VkImageViewAddressPropertiesNVX

struct VkImageViewAddressPropertiesNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = size, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkGetImageViewHandleNVX = uint32_t (*)(VkDevice, const VkImageViewHandleInfoNVX *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageViewAddressNVX = VkResult (*)(VkDevice, VkImageView, VkImageViewAddressPropertiesNVX *) __attribute__((stdcall))

FUNC uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX * pInfo)

FUNC VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX * pProperties)

TYPEDEF PFN_vkCmdDrawIndirectCountAMD = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawIndexedIndirectCountAMD = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

FUNC void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

struct VkTextureLODGatherFormatPropertiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportsTextureGatherLODBiasAMD, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkTextureLODGatherFormatPropertiesAMD = struct VkTextureLODGatherFormatPropertiesAMD

struct VkTextureLODGatherFormatPropertiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportsTextureGatherLODBiasAMD, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkShaderInfoTypeAMD = enum VkShaderInfoTypeAMD

ENUM VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
}

struct VkShaderResourceUsageAMD {
    name = numUsedVgprs, type = (uint32_t), offset = 0, size = 4
    name = numUsedSgprs, type = (uint32_t), offset = 4, size = 4
    name = ldsSizePerLocalWorkGroup, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = ldsUsageSizeInBytes, type = (size_t), offset = 16, size = 8
    name = scratchMemUsageInBytes, type = (size_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkShaderResourceUsageAMD = struct VkShaderResourceUsageAMD

struct VkShaderResourceUsageAMD {
    name = numUsedVgprs, type = (uint32_t), offset = 0, size = 4
    name = numUsedSgprs, type = (uint32_t), offset = 4, size = 4
    name = ldsSizePerLocalWorkGroup, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = ldsUsageSizeInBytes, type = (size_t), offset = 16, size = 8
    name = scratchMemUsageInBytes, type = (size_t), offset = 24, size = 8
} ; size: 32

struct VkShaderStatisticsInfoAMD {
    name = shaderStageMask, type = (VkShaderStageFlags), offset = 0, size = 4
    padding (4 bytes)
    name = resourceUsage, type = (VkShaderResourceUsageAMD), offset = 8, size = 32
    name = numPhysicalVgprs, type = (uint32_t), offset = 40, size = 4
    name = numPhysicalSgprs, type = (uint32_t), offset = 44, size = 4
    name = numAvailableVgprs, type = (uint32_t), offset = 48, size = 4
    name = numAvailableSgprs, type = (uint32_t), offset = 52, size = 4
    name = computeWorkGroupSize, type = (uint32_t[3]), offset = 56, size = 12
} ; size: 72

TYPEDEF VkShaderStatisticsInfoAMD = struct VkShaderStatisticsInfoAMD

struct VkShaderStatisticsInfoAMD {
    name = shaderStageMask, type = (VkShaderStageFlags), offset = 0, size = 4
    padding (4 bytes)
    name = resourceUsage, type = (VkShaderResourceUsageAMD), offset = 8, size = 32
    name = numPhysicalVgprs, type = (uint32_t), offset = 40, size = 4
    name = numPhysicalSgprs, type = (uint32_t), offset = 44, size = 4
    name = numAvailableVgprs, type = (uint32_t), offset = 48, size = 4
    name = numAvailableSgprs, type = (uint32_t), offset = 52, size = 4
    name = computeWorkGroupSize, type = (uint32_t[3]), offset = 56, size = 12
} ; size: 72

TYPEDEF PFN_vkGetShaderInfoAMD = VkResult (*)(VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, size_t *, void *) __attribute__((stdcall))

FUNC VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t * pInfoSize, void * pInfo)

struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cornerSampledImage, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCornerSampledImageFeaturesNV = struct VkPhysicalDeviceCornerSampledImageFeaturesNV

struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cornerSampledImage, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkExternalMemoryHandleTypeFlagBitsNV = enum VkExternalMemoryHandleTypeFlagBitsNV

ENUM VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkExternalMemoryHandleTypeFlagsNV = VkFlags

ENUM VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkExternalMemoryFeatureFlagBitsNV = enum VkExternalMemoryFeatureFlagBitsNV

ENUM VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkExternalMemoryFeatureFlagsNV = VkFlags

struct VkExternalImageFormatPropertiesNV {
    name = imageFormatProperties, type = (VkImageFormatProperties), offset = 0, size = 32
    name = externalMemoryFeatures, type = (VkExternalMemoryFeatureFlagsNV), offset = 32, size = 4
    name = exportFromImportedHandleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 36, size = 4
    name = compatibleHandleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 40, size = 4
} ; size: 48

TYPEDEF VkExternalImageFormatPropertiesNV = struct VkExternalImageFormatPropertiesNV

struct VkExternalImageFormatPropertiesNV {
    name = imageFormatProperties, type = (VkImageFormatProperties), offset = 0, size = 32
    name = externalMemoryFeatures, type = (VkExternalMemoryFeatureFlagsNV), offset = 32, size = 4
    name = exportFromImportedHandleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 36, size = 4
    name = compatibleHandleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 40, size = 4
} ; size: 48

TYPEDEF PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = VkResult (*)(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV * pExternalImageFormatProperties)

struct VkExternalMemoryImageCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExternalMemoryImageCreateInfoNV = struct VkExternalMemoryImageCreateInfoNV

struct VkExternalMemoryImageCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 16, size = 4
} ; size: 24

struct VkExportMemoryAllocateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExportMemoryAllocateInfoNV = struct VkExportMemoryAllocateInfoNV

struct VkExportMemoryAllocateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleTypes, type = (VkExternalMemoryHandleTypeFlagsNV), offset = 16, size = 4
} ; size: 24

ENUM VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0
    VK_VALIDATION_CHECK_SHADERS_EXT = 1
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkValidationCheckEXT = enum VkValidationCheckEXT

ENUM VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0
    VK_VALIDATION_CHECK_SHADERS_EXT = 1
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
}

struct VkValidationFlagsEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = disabledValidationCheckCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDisabledValidationChecks, type = (const VkValidationCheckEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkValidationFlagsEXT = struct VkValidationFlagsEXT

struct VkValidationFlagsEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = disabledValidationCheckCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDisabledValidationChecks, type = (const VkValidationCheckEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures

struct VkImageViewASTCDecodeModeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = decodeMode, type = (VkFormat), offset = 16, size = 4
} ; size: 24

TYPEDEF VkImageViewASTCDecodeModeEXT = struct VkImageViewASTCDecodeModeEXT

struct VkImageViewASTCDecodeModeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = decodeMode, type = (VkFormat), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = decodeModeSharedExponent, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceASTCDecodeFeaturesEXT = struct VkPhysicalDeviceASTCDecodeFeaturesEXT

struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = decodeModeSharedExponent, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkPipelineRobustnessBufferBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPipelineRobustnessBufferBehaviorEXT = enum VkPipelineRobustnessBufferBehaviorEXT

ENUM VkPipelineRobustnessBufferBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647
}

ENUM VkPipelineRobustnessImageBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPipelineRobustnessImageBehaviorEXT = enum VkPipelineRobustnessImageBehaviorEXT

ENUM VkPipelineRobustnessImageBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDevicePipelineRobustnessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineRobustness, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelineRobustnessFeaturesEXT = struct VkPhysicalDevicePipelineRobustnessFeaturesEXT

struct VkPhysicalDevicePipelineRobustnessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineRobustness, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevicePipelineRobustnessPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = defaultRobustnessStorageBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 16, size = 4
    name = defaultRobustnessUniformBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 20, size = 4
    name = defaultRobustnessVertexInputs, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 24, size = 4
    name = defaultRobustnessImages, type = (VkPipelineRobustnessImageBehaviorEXT), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDevicePipelineRobustnessPropertiesEXT = struct VkPhysicalDevicePipelineRobustnessPropertiesEXT

struct VkPhysicalDevicePipelineRobustnessPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = defaultRobustnessStorageBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 16, size = 4
    name = defaultRobustnessUniformBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 20, size = 4
    name = defaultRobustnessVertexInputs, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 24, size = 4
    name = defaultRobustnessImages, type = (VkPipelineRobustnessImageBehaviorEXT), offset = 28, size = 4
} ; size: 32

struct VkPipelineRobustnessCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = storageBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 16, size = 4
    name = uniformBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 20, size = 4
    name = vertexInputs, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 24, size = 4
    name = images, type = (VkPipelineRobustnessImageBehaviorEXT), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPipelineRobustnessCreateInfoEXT = struct VkPipelineRobustnessCreateInfoEXT

struct VkPipelineRobustnessCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = storageBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 16, size = 4
    name = uniformBuffers, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 20, size = 4
    name = vertexInputs, type = (VkPipelineRobustnessBufferBehaviorEXT), offset = 24, size = 4
    name = images, type = (VkPipelineRobustnessImageBehaviorEXT), offset = 28, size = 4
} ; size: 32

ENUM VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkConditionalRenderingFlagBitsEXT = enum VkConditionalRenderingFlagBitsEXT

ENUM VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkConditionalRenderingFlagsEXT = VkFlags

struct VkConditionalRenderingBeginInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
    name = offset, type = (VkDeviceSize), offset = 24, size = 8
    name = flags, type = (VkConditionalRenderingFlagsEXT), offset = 32, size = 4
} ; size: 40

TYPEDEF VkConditionalRenderingBeginInfoEXT = struct VkConditionalRenderingBeginInfoEXT

struct VkConditionalRenderingBeginInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
    name = offset, type = (VkDeviceSize), offset = 24, size = 8
    name = flags, type = (VkConditionalRenderingFlagsEXT), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = conditionalRendering, type = (VkBool32), offset = 16, size = 4
    name = inheritedConditionalRendering, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct VkPhysicalDeviceConditionalRenderingFeaturesEXT

struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = conditionalRendering, type = (VkBool32), offset = 16, size = 4
    name = inheritedConditionalRendering, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = conditionalRenderingEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct VkCommandBufferInheritanceConditionalRenderingInfoEXT

struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = conditionalRenderingEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdBeginConditionalRenderingEXT = void (*)(VkCommandBuffer, const VkConditionalRenderingBeginInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndConditionalRenderingEXT = void (*)(VkCommandBuffer) __attribute__((stdcall))

FUNC void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT * pConditionalRenderingBegin)

FUNC void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)

struct VkViewportWScalingNV {
    name = xcoeff, type = (float), offset = 0, size = 4
    name = ycoeff, type = (float), offset = 4, size = 4
} ; size: 8

TYPEDEF VkViewportWScalingNV = struct VkViewportWScalingNV

struct VkViewportWScalingNV {
    name = xcoeff, type = (float), offset = 0, size = 4
    name = ycoeff, type = (float), offset = 4, size = 4
} ; size: 8

struct VkPipelineViewportWScalingStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewportWScalingEnable, type = (VkBool32), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportWScalings, type = (const VkViewportWScalingNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineViewportWScalingStateCreateInfoNV = struct VkPipelineViewportWScalingStateCreateInfoNV

struct VkPipelineViewportWScalingStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewportWScalingEnable, type = (VkBool32), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportWScalings, type = (const VkViewportWScalingNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdSetViewportWScalingNV = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkViewportWScalingNV *) __attribute__((stdcall))

FUNC void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV * pViewportWScalings)

TYPEDEF PFN_vkReleaseDisplayEXT = VkResult (*)(VkPhysicalDevice, VkDisplayKHR) __attribute__((stdcall))

FUNC VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)

ENUM VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1
    VK_SURFACE_COUNTER_VBLANK_EXT = 1
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkSurfaceCounterFlagBitsEXT = enum VkSurfaceCounterFlagBitsEXT

ENUM VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1
    VK_SURFACE_COUNTER_VBLANK_EXT = 1
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkSurfaceCounterFlagsEXT = VkFlags

struct VkSurfaceCapabilities2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minImageCount, type = (uint32_t), offset = 16, size = 4
    name = maxImageCount, type = (uint32_t), offset = 20, size = 4
    name = currentExtent, type = (VkExtent2D), offset = 24, size = 8
    name = minImageExtent, type = (VkExtent2D), offset = 32, size = 8
    name = maxImageExtent, type = (VkExtent2D), offset = 40, size = 8
    name = maxImageArrayLayers, type = (uint32_t), offset = 48, size = 4
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 52, size = 4
    name = currentTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 56, size = 4
    name = supportedCompositeAlpha, type = (VkCompositeAlphaFlagsKHR), offset = 60, size = 4
    name = supportedUsageFlags, type = (VkImageUsageFlags), offset = 64, size = 4
    name = supportedSurfaceCounters, type = (VkSurfaceCounterFlagsEXT), offset = 68, size = 4
} ; size: 72

TYPEDEF VkSurfaceCapabilities2EXT = struct VkSurfaceCapabilities2EXT

struct VkSurfaceCapabilities2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minImageCount, type = (uint32_t), offset = 16, size = 4
    name = maxImageCount, type = (uint32_t), offset = 20, size = 4
    name = currentExtent, type = (VkExtent2D), offset = 24, size = 8
    name = minImageExtent, type = (VkExtent2D), offset = 32, size = 8
    name = maxImageExtent, type = (VkExtent2D), offset = 40, size = 8
    name = maxImageArrayLayers, type = (uint32_t), offset = 48, size = 4
    name = supportedTransforms, type = (VkSurfaceTransformFlagsKHR), offset = 52, size = 4
    name = currentTransform, type = (VkSurfaceTransformFlagBitsKHR), offset = 56, size = 4
    name = supportedCompositeAlpha, type = (VkCompositeAlphaFlagsKHR), offset = 60, size = 4
    name = supportedUsageFlags, type = (VkImageUsageFlags), offset = 64, size = 4
    name = supportedSurfaceCounters, type = (VkSurfaceCounterFlagsEXT), offset = 68, size = 4
} ; size: 72

TYPEDEF PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT * pSurfaceCapabilities)

ENUM VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
    VK_DISPLAY_POWER_STATE_ON_EXT = 2
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDisplayPowerStateEXT = enum VkDisplayPowerStateEXT

ENUM VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
    VK_DISPLAY_POWER_STATE_ON_EXT = 2
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
}

ENUM VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceEventTypeEXT = enum VkDeviceEventTypeEXT

ENUM VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDisplayEventTypeEXT = enum VkDisplayEventTypeEXT

ENUM VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

struct VkDisplayPowerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = powerState, type = (VkDisplayPowerStateEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDisplayPowerInfoEXT = struct VkDisplayPowerInfoEXT

struct VkDisplayPowerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = powerState, type = (VkDisplayPowerStateEXT), offset = 16, size = 4
} ; size: 24

struct VkDeviceEventInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceEvent, type = (VkDeviceEventTypeEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceEventInfoEXT = struct VkDeviceEventInfoEXT

struct VkDeviceEventInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceEvent, type = (VkDeviceEventTypeEXT), offset = 16, size = 4
} ; size: 24

struct VkDisplayEventInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = displayEvent, type = (VkDisplayEventTypeEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDisplayEventInfoEXT = struct VkDisplayEventInfoEXT

struct VkDisplayEventInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = displayEvent, type = (VkDisplayEventTypeEXT), offset = 16, size = 4
} ; size: 24

struct VkSwapchainCounterCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = surfaceCounters, type = (VkSurfaceCounterFlagsEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSwapchainCounterCreateInfoEXT = struct VkSwapchainCounterCreateInfoEXT

struct VkSwapchainCounterCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = surfaceCounters, type = (VkSurfaceCounterFlagsEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkDisplayPowerControlEXT = VkResult (*)(VkDevice, VkDisplayKHR, const VkDisplayPowerInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkRegisterDeviceEventEXT = VkResult (*)(VkDevice, const VkDeviceEventInfoEXT *, const VkAllocationCallbacks *, VkFence *) __attribute__((stdcall))

TYPEDEF PFN_vkRegisterDisplayEventEXT = VkResult (*)(VkDevice, VkDisplayKHR, const VkDisplayEventInfoEXT *, const VkAllocationCallbacks *, VkFence *) __attribute__((stdcall))

TYPEDEF PFN_vkGetSwapchainCounterEXT = VkResult (*)(VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, uint64_t *) __attribute__((stdcall))

FUNC VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT * pDisplayPowerInfo)

FUNC VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT * pDeviceEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence)

FUNC VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT * pDisplayEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence)

FUNC VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t * pCounterValue)

struct VkRefreshCycleDurationGOOGLE {
    name = refreshDuration, type = (uint64_t), offset = 0, size = 8
} ; size: 8

TYPEDEF VkRefreshCycleDurationGOOGLE = struct VkRefreshCycleDurationGOOGLE

struct VkRefreshCycleDurationGOOGLE {
    name = refreshDuration, type = (uint64_t), offset = 0, size = 8
} ; size: 8

struct VkPastPresentationTimingGOOGLE {
    name = presentID, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = desiredPresentTime, type = (uint64_t), offset = 8, size = 8
    name = actualPresentTime, type = (uint64_t), offset = 16, size = 8
    name = earliestPresentTime, type = (uint64_t), offset = 24, size = 8
    name = presentMargin, type = (uint64_t), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPastPresentationTimingGOOGLE = struct VkPastPresentationTimingGOOGLE

struct VkPastPresentationTimingGOOGLE {
    name = presentID, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = desiredPresentTime, type = (uint64_t), offset = 8, size = 8
    name = actualPresentTime, type = (uint64_t), offset = 16, size = 8
    name = earliestPresentTime, type = (uint64_t), offset = 24, size = 8
    name = presentMargin, type = (uint64_t), offset = 32, size = 8
} ; size: 40

struct VkPresentTimeGOOGLE {
    name = presentID, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = desiredPresentTime, type = (uint64_t), offset = 8, size = 8
} ; size: 16

TYPEDEF VkPresentTimeGOOGLE = struct VkPresentTimeGOOGLE

struct VkPresentTimeGOOGLE {
    name = presentID, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = desiredPresentTime, type = (uint64_t), offset = 8, size = 8
} ; size: 16

struct VkPresentTimesInfoGOOGLE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pTimes, type = (const VkPresentTimeGOOGLE *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPresentTimesInfoGOOGLE = struct VkPresentTimesInfoGOOGLE

struct VkPresentTimesInfoGOOGLE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pTimes, type = (const VkPresentTimeGOOGLE *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkGetRefreshCycleDurationGOOGLE = VkResult (*)(VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPastPresentationTimingGOOGLE = VkResult (*)(VkDevice, VkSwapchainKHR, uint32_t *, VkPastPresentationTimingGOOGLE *) __attribute__((stdcall))

FUNC VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE * pDisplayTimingProperties)

FUNC VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pPresentationTimingCount, VkPastPresentationTimingGOOGLE * pPresentationTimings)

struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = perViewPositionAllComponents, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX

struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = perViewPositionAllComponents, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkViewportCoordinateSwizzleNV = enum VkViewportCoordinateSwizzleNV

ENUM VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags

struct VkViewportSwizzleNV {
    name = x, type = (VkViewportCoordinateSwizzleNV), offset = 0, size = 4
    name = y, type = (VkViewportCoordinateSwizzleNV), offset = 4, size = 4
    name = z, type = (VkViewportCoordinateSwizzleNV), offset = 8, size = 4
    name = w, type = (VkViewportCoordinateSwizzleNV), offset = 12, size = 4
} ; size: 16

TYPEDEF VkViewportSwizzleNV = struct VkViewportSwizzleNV

struct VkViewportSwizzleNV {
    name = x, type = (VkViewportCoordinateSwizzleNV), offset = 0, size = 4
    name = y, type = (VkViewportCoordinateSwizzleNV), offset = 4, size = 4
    name = z, type = (VkViewportCoordinateSwizzleNV), offset = 8, size = 4
    name = w, type = (VkViewportCoordinateSwizzleNV), offset = 12, size = 4
} ; size: 16

struct VkPipelineViewportSwizzleStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineViewportSwizzleStateCreateFlagsNV), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportSwizzles, type = (const VkViewportSwizzleNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineViewportSwizzleStateCreateInfoNV = struct VkPipelineViewportSwizzleStateCreateInfoNV

struct VkPipelineViewportSwizzleStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineViewportSwizzleStateCreateFlagsNV), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportSwizzles, type = (const VkViewportSwizzleNV *), offset = 24, size = 8
} ; size: 32

ENUM VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDiscardRectangleModeEXT = enum VkDiscardRectangleModeEXT

ENUM VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags

struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxDiscardRectangles, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct VkPhysicalDeviceDiscardRectanglePropertiesEXT

struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxDiscardRectangles, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDiscardRectangleStateCreateFlagsEXT), offset = 16, size = 4
    name = discardRectangleMode, type = (VkDiscardRectangleModeEXT), offset = 20, size = 4
    name = discardRectangleCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pDiscardRectangles, type = (const VkRect2D *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPipelineDiscardRectangleStateCreateInfoEXT = struct VkPipelineDiscardRectangleStateCreateInfoEXT

struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineDiscardRectangleStateCreateFlagsEXT), offset = 16, size = 4
    name = discardRectangleMode, type = (VkDiscardRectangleModeEXT), offset = 20, size = 4
    name = discardRectangleCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pDiscardRectangles, type = (const VkRect2D *), offset = 32, size = 8
} ; size: 40

TYPEDEF PFN_vkCmdSetDiscardRectangleEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDiscardRectangleEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDiscardRectangleModeEXT = void (*)(VkCommandBuffer, VkDiscardRectangleModeEXT) __attribute__((stdcall))

FUNC void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D * pDiscardRectangles)

FUNC void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)

FUNC void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)

ENUM VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkConservativeRasterizationModeEXT = enum VkConservativeRasterizationModeEXT

ENUM VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags

struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitiveOverestimationSize, type = (float), offset = 16, size = 4
    name = maxExtraPrimitiveOverestimationSize, type = (float), offset = 20, size = 4
    name = extraPrimitiveOverestimationSizeGranularity, type = (float), offset = 24, size = 4
    name = primitiveUnderestimation, type = (VkBool32), offset = 28, size = 4
    name = conservativePointAndLineRasterization, type = (VkBool32), offset = 32, size = 4
    name = degenerateTrianglesRasterized, type = (VkBool32), offset = 36, size = 4
    name = degenerateLinesRasterized, type = (VkBool32), offset = 40, size = 4
    name = fullyCoveredFragmentShaderInputVariable, type = (VkBool32), offset = 44, size = 4
    name = conservativeRasterizationPostDepthCoverage, type = (VkBool32), offset = 48, size = 4
} ; size: 56

TYPEDEF VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT

struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitiveOverestimationSize, type = (float), offset = 16, size = 4
    name = maxExtraPrimitiveOverestimationSize, type = (float), offset = 20, size = 4
    name = extraPrimitiveOverestimationSizeGranularity, type = (float), offset = 24, size = 4
    name = primitiveUnderestimation, type = (VkBool32), offset = 28, size = 4
    name = conservativePointAndLineRasterization, type = (VkBool32), offset = 32, size = 4
    name = degenerateTrianglesRasterized, type = (VkBool32), offset = 36, size = 4
    name = degenerateLinesRasterized, type = (VkBool32), offset = 40, size = 4
    name = fullyCoveredFragmentShaderInputVariable, type = (VkBool32), offset = 44, size = 4
    name = conservativeRasterizationPostDepthCoverage, type = (VkBool32), offset = 48, size = 4
} ; size: 56

struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationConservativeStateCreateFlagsEXT), offset = 16, size = 4
    name = conservativeRasterizationMode, type = (VkConservativeRasterizationModeEXT), offset = 20, size = 4
    name = extraPrimitiveOverestimationSize, type = (float), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineRasterizationConservativeStateCreateInfoEXT = struct VkPipelineRasterizationConservativeStateCreateInfoEXT

struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationConservativeStateCreateFlagsEXT), offset = 16, size = 4
    name = conservativeRasterizationMode, type = (VkConservativeRasterizationModeEXT), offset = 20, size = 4
    name = extraPrimitiveOverestimationSize, type = (float), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags

struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClipEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct VkPhysicalDeviceDepthClipEnableFeaturesEXT

struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClipEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationDepthClipStateCreateFlagsEXT), offset = 16, size = 4
    name = depthClipEnable, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct VkPipelineRasterizationDepthClipStateCreateInfoEXT

struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineRasterizationDepthClipStateCreateFlagsEXT), offset = 16, size = 4
    name = depthClipEnable, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkXYColorEXT {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
} ; size: 8

TYPEDEF VkXYColorEXT = struct VkXYColorEXT

struct VkXYColorEXT {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
} ; size: 8

struct VkHdrMetadataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = displayPrimaryRed, type = (VkXYColorEXT), offset = 16, size = 8
    name = displayPrimaryGreen, type = (VkXYColorEXT), offset = 24, size = 8
    name = displayPrimaryBlue, type = (VkXYColorEXT), offset = 32, size = 8
    name = whitePoint, type = (VkXYColorEXT), offset = 40, size = 8
    name = maxLuminance, type = (float), offset = 48, size = 4
    name = minLuminance, type = (float), offset = 52, size = 4
    name = maxContentLightLevel, type = (float), offset = 56, size = 4
    name = maxFrameAverageLightLevel, type = (float), offset = 60, size = 4
} ; size: 64

TYPEDEF VkHdrMetadataEXT = struct VkHdrMetadataEXT

struct VkHdrMetadataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = displayPrimaryRed, type = (VkXYColorEXT), offset = 16, size = 8
    name = displayPrimaryGreen, type = (VkXYColorEXT), offset = 24, size = 8
    name = displayPrimaryBlue, type = (VkXYColorEXT), offset = 32, size = 8
    name = whitePoint, type = (VkXYColorEXT), offset = 40, size = 8
    name = maxLuminance, type = (float), offset = 48, size = 4
    name = minLuminance, type = (float), offset = 52, size = 4
    name = maxContentLightLevel, type = (float), offset = 56, size = 4
    name = maxFrameAverageLightLevel, type = (float), offset = 60, size = 4
} ; size: 64

TYPEDEF PFN_vkSetHdrMetadataEXT = void (*)(VkDevice, uint32_t, const VkSwapchainKHR *, const VkHdrMetadataEXT *) __attribute__((stdcall))

FUNC void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR * pSwapchains, const VkHdrMetadataEXT * pMetadata)

struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = relaxedLineRasterization, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG

struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = relaxedLineRasterization, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDebugUtilsMessengerEXT = struct VkDebugUtilsMessengerEXT_T *

TYPEDEF VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags

ENUM VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugUtilsMessageSeverityFlagBitsEXT = enum VkDebugUtilsMessageSeverityFlagBitsEXT

ENUM VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

ENUM VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
    VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugUtilsMessageTypeFlagBitsEXT = enum VkDebugUtilsMessageTypeFlagBitsEXT

ENUM VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
    VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDebugUtilsMessageTypeFlagsEXT = VkFlags

TYPEDEF VkDebugUtilsMessageSeverityFlagsEXT = VkFlags

TYPEDEF VkDebugUtilsMessengerCreateFlagsEXT = VkFlags

struct VkDebugUtilsLabelEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pLabelName, type = (const char *), offset = 16, size = 8
    name = color, type = (float[4]), offset = 24, size = 16
} ; size: 40

TYPEDEF VkDebugUtilsLabelEXT = struct VkDebugUtilsLabelEXT

struct VkDebugUtilsLabelEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pLabelName, type = (const char *), offset = 16, size = 8
    name = color, type = (float[4]), offset = 24, size = 16
} ; size: 40

struct VkDebugUtilsObjectNameInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkObjectType), offset = 16, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 24, size = 8
    name = pObjectName, type = (const char *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDebugUtilsObjectNameInfoEXT = struct VkDebugUtilsObjectNameInfoEXT

struct VkDebugUtilsObjectNameInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkObjectType), offset = 16, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 24, size = 8
    name = pObjectName, type = (const char *), offset = 32, size = 8
} ; size: 40

struct VkDebugUtilsMessengerCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugUtilsMessengerCallbackDataFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pMessageIdName, type = (const char *), offset = 24, size = 8
    name = messageIdNumber, type = (int32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pMessage, type = (const char *), offset = 40, size = 8
    name = queueLabelCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pQueueLabels, type = (const VkDebugUtilsLabelEXT *), offset = 56, size = 8
    name = cmdBufLabelCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pCmdBufLabels, type = (const VkDebugUtilsLabelEXT *), offset = 72, size = 8
    name = objectCount, type = (uint32_t), offset = 80, size = 4
    padding (4 bytes)
    name = pObjects, type = (const VkDebugUtilsObjectNameInfoEXT *), offset = 88, size = 8
} ; size: 96

TYPEDEF VkDebugUtilsMessengerCallbackDataEXT = struct VkDebugUtilsMessengerCallbackDataEXT

struct VkDebugUtilsMessengerCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugUtilsMessengerCallbackDataFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pMessageIdName, type = (const char *), offset = 24, size = 8
    name = messageIdNumber, type = (int32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pMessage, type = (const char *), offset = 40, size = 8
    name = queueLabelCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pQueueLabels, type = (const VkDebugUtilsLabelEXT *), offset = 56, size = 8
    name = cmdBufLabelCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pCmdBufLabels, type = (const VkDebugUtilsLabelEXT *), offset = 72, size = 8
    name = objectCount, type = (uint32_t), offset = 80, size = 4
    padding (4 bytes)
    name = pObjects, type = (const VkDebugUtilsObjectNameInfoEXT *), offset = 88, size = 8
} ; size: 96

TYPEDEF PFN_vkDebugUtilsMessengerCallbackEXT = VkBool32 (*)(VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, const VkDebugUtilsMessengerCallbackDataEXT *, void *) __attribute__((stdcall))

struct VkDebugUtilsMessengerCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugUtilsMessengerCreateFlagsEXT), offset = 16, size = 4
    name = messageSeverity, type = (VkDebugUtilsMessageSeverityFlagsEXT), offset = 20, size = 4
    name = messageType, type = (VkDebugUtilsMessageTypeFlagsEXT), offset = 24, size = 4
    padding (4 bytes)
    name = pfnUserCallback, type = (PFN_vkDebugUtilsMessengerCallbackEXT), offset = 32, size = 8
    name = pUserData, type = (void *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkDebugUtilsMessengerCreateInfoEXT = struct VkDebugUtilsMessengerCreateInfoEXT

struct VkDebugUtilsMessengerCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDebugUtilsMessengerCreateFlagsEXT), offset = 16, size = 4
    name = messageSeverity, type = (VkDebugUtilsMessageSeverityFlagsEXT), offset = 20, size = 4
    name = messageType, type = (VkDebugUtilsMessageTypeFlagsEXT), offset = 24, size = 4
    padding (4 bytes)
    name = pfnUserCallback, type = (PFN_vkDebugUtilsMessengerCallbackEXT), offset = 32, size = 8
    name = pUserData, type = (void *), offset = 40, size = 8
} ; size: 48

struct VkDebugUtilsObjectTagInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkObjectType), offset = 16, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 24, size = 8
    name = tagName, type = (uint64_t), offset = 32, size = 8
    name = tagSize, type = (size_t), offset = 40, size = 8
    name = pTag, type = (const void *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkDebugUtilsObjectTagInfoEXT = struct VkDebugUtilsObjectTagInfoEXT

struct VkDebugUtilsObjectTagInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = objectType, type = (VkObjectType), offset = 16, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 24, size = 8
    name = tagName, type = (uint64_t), offset = 32, size = 8
    name = tagSize, type = (size_t), offset = 40, size = 8
    name = pTag, type = (const void *), offset = 48, size = 8
} ; size: 56

TYPEDEF PFN_vkSetDebugUtilsObjectNameEXT = VkResult (*)(VkDevice, const VkDebugUtilsObjectNameInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkSetDebugUtilsObjectTagEXT = VkResult (*)(VkDevice, const VkDebugUtilsObjectTagInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkQueueBeginDebugUtilsLabelEXT = void (*)(VkQueue, const VkDebugUtilsLabelEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkQueueEndDebugUtilsLabelEXT = void (*)(VkQueue) __attribute__((stdcall))

TYPEDEF PFN_vkQueueInsertDebugUtilsLabelEXT = void (*)(VkQueue, const VkDebugUtilsLabelEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBeginDebugUtilsLabelEXT = void (*)(VkCommandBuffer, const VkDebugUtilsLabelEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdEndDebugUtilsLabelEXT = void (*)(VkCommandBuffer) __attribute__((stdcall))

TYPEDEF PFN_vkCmdInsertDebugUtilsLabelEXT = void (*)(VkCommandBuffer, const VkDebugUtilsLabelEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateDebugUtilsMessengerEXT = VkResult (*)(VkInstance, const VkDebugUtilsMessengerCreateInfoEXT *, const VkAllocationCallbacks *, VkDebugUtilsMessengerEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyDebugUtilsMessengerEXT = void (*)(VkInstance, VkDebugUtilsMessengerEXT, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkSubmitDebugUtilsMessageEXT = void (*)(VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, const VkDebugUtilsMessengerCallbackDataEXT *) __attribute__((stdcall))

FUNC VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT * pNameInfo)

FUNC VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT * pTagInfo)

FUNC void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo)

FUNC void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)

FUNC void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo)

FUNC void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo)

FUNC void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)

FUNC void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo)

FUNC VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugUtilsMessengerEXT * pMessenger)

FUNC void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks * pAllocator)

FUNC void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT * pCallbackData)

TYPEDEF VkSamplerReductionModeEXT = VkSamplerReductionMode

TYPEDEF VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo

TYPEDEF VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties

TYPEDEF VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures

TYPEDEF VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties

TYPEDEF VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock

TYPEDEF VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo

struct VkSampleLocationEXT {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
} ; size: 8

TYPEDEF VkSampleLocationEXT = struct VkSampleLocationEXT

struct VkSampleLocationEXT {
    name = x, type = (float), offset = 0, size = 4
    name = y, type = (float), offset = 4, size = 4
} ; size: 8

struct VkSampleLocationsInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleLocationsPerPixel, type = (VkSampleCountFlagBits), offset = 16, size = 4
    name = sampleLocationGridSize, type = (VkExtent2D), offset = 20, size = 8
    name = sampleLocationsCount, type = (uint32_t), offset = 28, size = 4
    name = pSampleLocations, type = (const VkSampleLocationEXT *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkSampleLocationsInfoEXT = struct VkSampleLocationsInfoEXT

struct VkSampleLocationsInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleLocationsPerPixel, type = (VkSampleCountFlagBits), offset = 16, size = 4
    name = sampleLocationGridSize, type = (VkExtent2D), offset = 20, size = 8
    name = sampleLocationsCount, type = (uint32_t), offset = 28, size = 4
    name = pSampleLocations, type = (const VkSampleLocationEXT *), offset = 32, size = 8
} ; size: 40

struct VkAttachmentSampleLocationsEXT {
    name = attachmentIndex, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 8, size = 40
} ; size: 48

TYPEDEF VkAttachmentSampleLocationsEXT = struct VkAttachmentSampleLocationsEXT

struct VkAttachmentSampleLocationsEXT {
    name = attachmentIndex, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 8, size = 40
} ; size: 48

struct VkSubpassSampleLocationsEXT {
    name = subpassIndex, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 8, size = 40
} ; size: 48

TYPEDEF VkSubpassSampleLocationsEXT = struct VkSubpassSampleLocationsEXT

struct VkSubpassSampleLocationsEXT {
    name = subpassIndex, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 8, size = 40
} ; size: 48

struct VkRenderPassSampleLocationsBeginInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentInitialSampleLocationsCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachmentInitialSampleLocations, type = (const VkAttachmentSampleLocationsEXT *), offset = 24, size = 8
    name = postSubpassSampleLocationsCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPostSubpassSampleLocations, type = (const VkSubpassSampleLocationsEXT *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkRenderPassSampleLocationsBeginInfoEXT = struct VkRenderPassSampleLocationsBeginInfoEXT

struct VkRenderPassSampleLocationsBeginInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentInitialSampleLocationsCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAttachmentInitialSampleLocations, type = (const VkAttachmentSampleLocationsEXT *), offset = 24, size = 8
    name = postSubpassSampleLocationsCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPostSubpassSampleLocations, type = (const VkSubpassSampleLocationsEXT *), offset = 40, size = 8
} ; size: 48

struct VkPipelineSampleLocationsStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleLocationsEnable, type = (VkBool32), offset = 16, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 24, size = 40
} ; size: 64

TYPEDEF VkPipelineSampleLocationsStateCreateInfoEXT = struct VkPipelineSampleLocationsStateCreateInfoEXT

struct VkPipelineSampleLocationsStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleLocationsEnable, type = (VkBool32), offset = 16, size = 4
    padding (4 bytes)
    name = sampleLocationsInfo, type = (VkSampleLocationsInfoEXT), offset = 24, size = 40
} ; size: 64

struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sampleLocationSampleCounts, type = (VkSampleCountFlags), offset = 16, size = 4
    name = maxSampleLocationGridSize, type = (VkExtent2D), offset = 20, size = 8
    name = sampleLocationCoordinateRange, type = (float[2]), offset = 28, size = 8
    name = sampleLocationSubPixelBits, type = (uint32_t), offset = 36, size = 4
    name = variableSampleLocations, type = (VkBool32), offset = 40, size = 4
} ; size: 48

TYPEDEF VkPhysicalDeviceSampleLocationsPropertiesEXT = struct VkPhysicalDeviceSampleLocationsPropertiesEXT

struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = sampleLocationSampleCounts, type = (VkSampleCountFlags), offset = 16, size = 4
    name = maxSampleLocationGridSize, type = (VkExtent2D), offset = 20, size = 8
    name = sampleLocationCoordinateRange, type = (float[2]), offset = 28, size = 8
    name = sampleLocationSubPixelBits, type = (uint32_t), offset = 36, size = 4
    name = variableSampleLocations, type = (VkBool32), offset = 40, size = 4
} ; size: 48

struct VkMultisamplePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxSampleLocationGridSize, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

TYPEDEF VkMultisamplePropertiesEXT = struct VkMultisamplePropertiesEXT

struct VkMultisamplePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxSampleLocationGridSize, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkCmdSetSampleLocationsEXT = void (*)(VkCommandBuffer, const VkSampleLocationsInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = void (*)(VkPhysicalDevice, VkSampleCountFlagBits, VkMultisamplePropertiesEXT *) __attribute__((stdcall))

FUNC void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT * pSampleLocationsInfo)

FUNC void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT * pMultisampleProperties)

ENUM VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkBlendOverlapEXT = enum VkBlendOverlapEXT

ENUM VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = advancedBlendCoherentOperations, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT

struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = advancedBlendCoherentOperations, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = advancedBlendMaxColorAttachments, type = (uint32_t), offset = 16, size = 4
    name = advancedBlendIndependentBlend, type = (VkBool32), offset = 20, size = 4
    name = advancedBlendNonPremultipliedSrcColor, type = (VkBool32), offset = 24, size = 4
    name = advancedBlendNonPremultipliedDstColor, type = (VkBool32), offset = 28, size = 4
    name = advancedBlendCorrelatedOverlap, type = (VkBool32), offset = 32, size = 4
    name = advancedBlendAllOperations, type = (VkBool32), offset = 36, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT

struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = advancedBlendMaxColorAttachments, type = (uint32_t), offset = 16, size = 4
    name = advancedBlendIndependentBlend, type = (VkBool32), offset = 20, size = 4
    name = advancedBlendNonPremultipliedSrcColor, type = (VkBool32), offset = 24, size = 4
    name = advancedBlendNonPremultipliedDstColor, type = (VkBool32), offset = 28, size = 4
    name = advancedBlendCorrelatedOverlap, type = (VkBool32), offset = 32, size = 4
    name = advancedBlendAllOperations, type = (VkBool32), offset = 36, size = 4
} ; size: 40

struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcPremultiplied, type = (VkBool32), offset = 16, size = 4
    name = dstPremultiplied, type = (VkBool32), offset = 20, size = 4
    name = blendOverlap, type = (VkBlendOverlapEXT), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct VkPipelineColorBlendAdvancedStateCreateInfoEXT

struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = srcPremultiplied, type = (VkBool32), offset = 16, size = 4
    name = dstPremultiplied, type = (VkBool32), offset = 20, size = 4
    name = blendOverlap, type = (VkBlendOverlapEXT), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags

struct VkPipelineCoverageToColorStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageToColorStateCreateFlagsNV), offset = 16, size = 4
    name = coverageToColorEnable, type = (VkBool32), offset = 20, size = 4
    name = coverageToColorLocation, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPipelineCoverageToColorStateCreateInfoNV = struct VkPipelineCoverageToColorStateCreateInfoNV

struct VkPipelineCoverageToColorStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageToColorStateCreateFlagsNV), offset = 16, size = 4
    name = coverageToColorEnable, type = (VkBool32), offset = 20, size = 4
    name = coverageToColorLocation, type = (uint32_t), offset = 24, size = 4
} ; size: 32

ENUM VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkCoverageModulationModeNV = enum VkCoverageModulationModeNV

ENUM VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags

struct VkPipelineCoverageModulationStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageModulationStateCreateFlagsNV), offset = 16, size = 4
    name = coverageModulationMode, type = (VkCoverageModulationModeNV), offset = 20, size = 4
    name = coverageModulationTableEnable, type = (VkBool32), offset = 24, size = 4
    name = coverageModulationTableCount, type = (uint32_t), offset = 28, size = 4
    name = pCoverageModulationTable, type = (const float *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPipelineCoverageModulationStateCreateInfoNV = struct VkPipelineCoverageModulationStateCreateInfoNV

struct VkPipelineCoverageModulationStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageModulationStateCreateFlagsNV), offset = 16, size = 4
    name = coverageModulationMode, type = (VkCoverageModulationModeNV), offset = 20, size = 4
    name = coverageModulationTableEnable, type = (VkBool32), offset = 24, size = 4
    name = coverageModulationTableCount, type = (uint32_t), offset = 28, size = 4
    name = pCoverageModulationTable, type = (const float *), offset = 32, size = 8
} ; size: 40

struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSMCount, type = (uint32_t), offset = 16, size = 4
    name = shaderWarpsPerSM, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV

struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSMCount, type = (uint32_t), offset = 16, size = 4
    name = shaderWarpsPerSM, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSMBuiltins, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV

struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderSMBuiltins, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDrmFormatModifierPropertiesEXT {
    name = drmFormatModifier, type = (uint64_t), offset = 0, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 8, size = 4
    name = drmFormatModifierTilingFeatures, type = (VkFormatFeatureFlags), offset = 12, size = 4
} ; size: 16

TYPEDEF VkDrmFormatModifierPropertiesEXT = struct VkDrmFormatModifierPropertiesEXT

struct VkDrmFormatModifierPropertiesEXT {
    name = drmFormatModifier, type = (uint64_t), offset = 0, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 8, size = 4
    name = drmFormatModifierTilingFeatures, type = (VkFormatFeatureFlags), offset = 12, size = 4
} ; size: 16

struct VkDrmFormatModifierPropertiesListEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifierProperties, type = (VkDrmFormatModifierPropertiesEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDrmFormatModifierPropertiesListEXT = struct VkDrmFormatModifierPropertiesListEXT

struct VkDrmFormatModifierPropertiesListEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifierProperties, type = (VkDrmFormatModifierPropertiesEXT *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
    name = sharingMode, type = (VkSharingMode), offset = 24, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 28, size = 4
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT

struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
    name = sharingMode, type = (VkSharingMode), offset = 24, size = 4
    name = queueFamilyIndexCount, type = (uint32_t), offset = 28, size = 4
    name = pQueueFamilyIndices, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

struct VkImageDrmFormatModifierListCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifiers, type = (const uint64_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImageDrmFormatModifierListCreateInfoEXT = struct VkImageDrmFormatModifierListCreateInfoEXT

struct VkImageDrmFormatModifierListCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifiers, type = (const uint64_t *), offset = 24, size = 8
} ; size: 32

struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPlaneLayouts, type = (const VkSubresourceLayout *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkImageDrmFormatModifierExplicitCreateInfoEXT = struct VkImageDrmFormatModifierExplicitCreateInfoEXT

struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pPlaneLayouts, type = (const VkSubresourceLayout *), offset = 32, size = 8
} ; size: 40

struct VkImageDrmFormatModifierPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageDrmFormatModifierPropertiesEXT = struct VkImageDrmFormatModifierPropertiesEXT

struct VkImageDrmFormatModifierPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifier, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkDrmFormatModifierProperties2EXT {
    name = drmFormatModifier, type = (uint64_t), offset = 0, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = drmFormatModifierTilingFeatures, type = (VkFormatFeatureFlags2), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDrmFormatModifierProperties2EXT = struct VkDrmFormatModifierProperties2EXT

struct VkDrmFormatModifierProperties2EXT {
    name = drmFormatModifier, type = (uint64_t), offset = 0, size = 8
    name = drmFormatModifierPlaneCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = drmFormatModifierTilingFeatures, type = (VkFormatFeatureFlags2), offset = 16, size = 8
} ; size: 24

struct VkDrmFormatModifierPropertiesList2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifierProperties, type = (VkDrmFormatModifierProperties2EXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDrmFormatModifierPropertiesList2EXT = struct VkDrmFormatModifierPropertiesList2EXT

struct VkDrmFormatModifierPropertiesList2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = drmFormatModifierCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pDrmFormatModifierProperties, type = (VkDrmFormatModifierProperties2EXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkGetImageDrmFormatModifierPropertiesEXT = VkResult (*)(VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT *) __attribute__((stdcall))

FUNC VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT * pProperties)

TYPEDEF VkValidationCacheEXT = struct VkValidationCacheEXT_T *

ENUM VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkValidationCacheHeaderVersionEXT = enum VkValidationCacheHeaderVersionEXT

ENUM VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkValidationCacheCreateFlagsEXT = VkFlags

struct VkValidationCacheCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkValidationCacheCreateFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = initialDataSize, type = (size_t), offset = 24, size = 8
    name = pInitialData, type = (const void *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkValidationCacheCreateInfoEXT = struct VkValidationCacheCreateInfoEXT

struct VkValidationCacheCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkValidationCacheCreateFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = initialDataSize, type = (size_t), offset = 24, size = 8
    name = pInitialData, type = (const void *), offset = 32, size = 8
} ; size: 40

struct VkShaderModuleValidationCacheCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = validationCache, type = (VkValidationCacheEXT), offset = 16, size = 8
} ; size: 24

TYPEDEF VkShaderModuleValidationCacheCreateInfoEXT = struct VkShaderModuleValidationCacheCreateInfoEXT

struct VkShaderModuleValidationCacheCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = validationCache, type = (VkValidationCacheEXT), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkCreateValidationCacheEXT = VkResult (*)(VkDevice, const VkValidationCacheCreateInfoEXT *, const VkAllocationCallbacks *, VkValidationCacheEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyValidationCacheEXT = void (*)(VkDevice, VkValidationCacheEXT, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkMergeValidationCachesEXT = VkResult (*)(VkDevice, VkValidationCacheEXT, uint32_t, const VkValidationCacheEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkGetValidationCacheDataEXT = VkResult (*)(VkDevice, VkValidationCacheEXT, size_t *, void *) __attribute__((stdcall))

FUNC VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkValidationCacheEXT * pValidationCache)

FUNC void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT * pSrcCaches)

FUNC VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t * pDataSize, void * pData)

TYPEDEF VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits

TYPEDEF VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags

TYPEDEF VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo

TYPEDEF VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures

TYPEDEF VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties

TYPEDEF VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo

TYPEDEF VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport

ENUM VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkShadingRatePaletteEntryNV = enum VkShadingRatePaletteEntryNV

ENUM VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
}

ENUM VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkCoarseSampleOrderTypeNV = enum VkCoarseSampleOrderTypeNV

ENUM VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
}

struct VkShadingRatePaletteNV {
    name = shadingRatePaletteEntryCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pShadingRatePaletteEntries, type = (const VkShadingRatePaletteEntryNV *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkShadingRatePaletteNV = struct VkShadingRatePaletteNV

struct VkShadingRatePaletteNV {
    name = shadingRatePaletteEntryCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pShadingRatePaletteEntries, type = (const VkShadingRatePaletteEntryNV *), offset = 8, size = 8
} ; size: 16

struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = shadingRateImageEnable, type = (VkBool32), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pShadingRatePalettes, type = (const VkShadingRatePaletteNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineViewportShadingRateImageStateCreateInfoNV = struct VkPipelineViewportShadingRateImageStateCreateInfoNV

struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = shadingRateImageEnable, type = (VkBool32), offset = 16, size = 4
    name = viewportCount, type = (uint32_t), offset = 20, size = 4
    name = pShadingRatePalettes, type = (const VkShadingRatePaletteNV *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shadingRateImage, type = (VkBool32), offset = 16, size = 4
    name = shadingRateCoarseSampleOrder, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShadingRateImageFeaturesNV = struct VkPhysicalDeviceShadingRateImageFeaturesNV

struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shadingRateImage, type = (VkBool32), offset = 16, size = 4
    name = shadingRateCoarseSampleOrder, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shadingRateTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = shadingRatePaletteSize, type = (uint32_t), offset = 24, size = 4
    name = shadingRateMaxCoarseSamples, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceShadingRateImagePropertiesNV = struct VkPhysicalDeviceShadingRateImagePropertiesNV

struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shadingRateTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = shadingRatePaletteSize, type = (uint32_t), offset = 24, size = 4
    name = shadingRateMaxCoarseSamples, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkCoarseSampleLocationNV {
    name = pixelX, type = (uint32_t), offset = 0, size = 4
    name = pixelY, type = (uint32_t), offset = 4, size = 4
    name = sample, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkCoarseSampleLocationNV = struct VkCoarseSampleLocationNV

struct VkCoarseSampleLocationNV {
    name = pixelX, type = (uint32_t), offset = 0, size = 4
    name = pixelY, type = (uint32_t), offset = 4, size = 4
    name = sample, type = (uint32_t), offset = 8, size = 4
} ; size: 12

struct VkCoarseSampleOrderCustomNV {
    name = shadingRate, type = (VkShadingRatePaletteEntryNV), offset = 0, size = 4
    name = sampleCount, type = (uint32_t), offset = 4, size = 4
    name = sampleLocationCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pSampleLocations, type = (const VkCoarseSampleLocationNV *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkCoarseSampleOrderCustomNV = struct VkCoarseSampleOrderCustomNV

struct VkCoarseSampleOrderCustomNV {
    name = shadingRate, type = (VkShadingRatePaletteEntryNV), offset = 0, size = 4
    name = sampleCount, type = (uint32_t), offset = 4, size = 4
    name = sampleLocationCount, type = (uint32_t), offset = 8, size = 4
    padding (4 bytes)
    name = pSampleLocations, type = (const VkCoarseSampleLocationNV *), offset = 16, size = 8
} ; size: 24

struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleOrderType, type = (VkCoarseSampleOrderTypeNV), offset = 16, size = 4
    name = customSampleOrderCount, type = (uint32_t), offset = 20, size = 4
    name = pCustomSampleOrders, type = (const VkCoarseSampleOrderCustomNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV

struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampleOrderType, type = (VkCoarseSampleOrderTypeNV), offset = 16, size = 4
    name = customSampleOrderCount, type = (uint32_t), offset = 20, size = 4
    name = pCustomSampleOrders, type = (const VkCoarseSampleOrderCustomNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdBindShadingRateImageNV = void (*)(VkCommandBuffer, VkImageView, VkImageLayout) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewportShadingRatePaletteNV = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkShadingRatePaletteNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoarseSampleOrderNV = void (*)(VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, const VkCoarseSampleOrderCustomNV *) __attribute__((stdcall))

FUNC void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)

FUNC void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV * pShadingRatePalettes)

FUNC void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV * pCustomSampleOrders)

TYPEDEF VkAccelerationStructureNV = struct VkAccelerationStructureNV_T *

ENUM VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkRayTracingShaderGroupTypeKHR = enum VkRayTracingShaderGroupTypeKHR

ENUM VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR

ENUM VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
    VK_GEOMETRY_TYPE_AABBS_KHR = 1
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
    VK_GEOMETRY_TYPE_TRIANGLES_NV = 0
    VK_GEOMETRY_TYPE_AABBS_NV = 1
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryTypeKHR = enum VkGeometryTypeKHR

ENUM VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
    VK_GEOMETRY_TYPE_AABBS_KHR = 1
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
    VK_GEOMETRY_TYPE_TRIANGLES_NV = 0
    VK_GEOMETRY_TYPE_AABBS_NV = 1
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryTypeNV = VkGeometryTypeKHR

ENUM VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureTypeKHR = enum VkAccelerationStructureTypeKHR

ENUM VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR

ENUM VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkCopyAccelerationStructureModeKHR = enum VkCopyAccelerationStructureModeKHR

ENUM VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR

ENUM VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkAccelerationStructureMemoryRequirementsTypeNV = enum VkAccelerationStructureMemoryRequirementsTypeNV

ENUM VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647
}

ENUM VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
    VK_GEOMETRY_OPAQUE_BIT_NV = 1
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryFlagBitsKHR = enum VkGeometryFlagBitsKHR

ENUM VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
    VK_GEOMETRY_OPAQUE_BIT_NV = 1
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryFlagsKHR = VkFlags

TYPEDEF VkGeometryFlagsNV = VkGeometryFlagsKHR

TYPEDEF VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR

ENUM VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryInstanceFlagBitsKHR = enum VkGeometryInstanceFlagBitsKHR

ENUM VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkGeometryInstanceFlagsKHR = VkFlags

TYPEDEF VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR

TYPEDEF VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR

ENUM VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkBuildAccelerationStructureFlagBitsKHR = enum VkBuildAccelerationStructureFlagBitsKHR

ENUM VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkBuildAccelerationStructureFlagsKHR = VkFlags

TYPEDEF VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR

TYPEDEF VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR

struct VkRayTracingShaderGroupCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkRayTracingShaderGroupTypeKHR), offset = 16, size = 4
    name = generalShader, type = (uint32_t), offset = 20, size = 4
    name = closestHitShader, type = (uint32_t), offset = 24, size = 4
    name = anyHitShader, type = (uint32_t), offset = 28, size = 4
    name = intersectionShader, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkRayTracingShaderGroupCreateInfoNV = struct VkRayTracingShaderGroupCreateInfoNV

struct VkRayTracingShaderGroupCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkRayTracingShaderGroupTypeKHR), offset = 16, size = 4
    name = generalShader, type = (uint32_t), offset = 20, size = 4
    name = closestHitShader, type = (uint32_t), offset = 24, size = 4
    name = anyHitShader, type = (uint32_t), offset = 28, size = 4
    name = intersectionShader, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkRayTracingPipelineCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = groupCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkRayTracingShaderGroupCreateInfoNV *), offset = 40, size = 8
    name = maxRecursionDepth, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 56, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 64, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 72, size = 4
} ; size: 80

TYPEDEF VkRayTracingPipelineCreateInfoNV = struct VkRayTracingPipelineCreateInfoNV

struct VkRayTracingPipelineCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = groupCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkRayTracingShaderGroupCreateInfoNV *), offset = 40, size = 8
    name = maxRecursionDepth, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = layout, type = (VkPipelineLayout), offset = 56, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 64, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 72, size = 4
} ; size: 80

struct VkGeometryTrianglesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexData, type = (VkBuffer), offset = 16, size = 8
    name = vertexOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = vertexCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = vertexStride, type = (VkDeviceSize), offset = 40, size = 8
    name = vertexFormat, type = (VkFormat), offset = 48, size = 4
    padding (4 bytes)
    name = indexData, type = (VkBuffer), offset = 56, size = 8
    name = indexOffset, type = (VkDeviceSize), offset = 64, size = 8
    name = indexCount, type = (uint32_t), offset = 72, size = 4
    name = indexType, type = (VkIndexType), offset = 76, size = 4
    name = transformData, type = (VkBuffer), offset = 80, size = 8
    name = transformOffset, type = (VkDeviceSize), offset = 88, size = 8
} ; size: 96

TYPEDEF VkGeometryTrianglesNV = struct VkGeometryTrianglesNV

struct VkGeometryTrianglesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexData, type = (VkBuffer), offset = 16, size = 8
    name = vertexOffset, type = (VkDeviceSize), offset = 24, size = 8
    name = vertexCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = vertexStride, type = (VkDeviceSize), offset = 40, size = 8
    name = vertexFormat, type = (VkFormat), offset = 48, size = 4
    padding (4 bytes)
    name = indexData, type = (VkBuffer), offset = 56, size = 8
    name = indexOffset, type = (VkDeviceSize), offset = 64, size = 8
    name = indexCount, type = (uint32_t), offset = 72, size = 4
    name = indexType, type = (VkIndexType), offset = 76, size = 4
    name = transformData, type = (VkBuffer), offset = 80, size = 8
    name = transformOffset, type = (VkDeviceSize), offset = 88, size = 8
} ; size: 96

struct VkGeometryAABBNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = aabbData, type = (VkBuffer), offset = 16, size = 8
    name = numAABBs, type = (uint32_t), offset = 24, size = 4
    name = stride, type = (uint32_t), offset = 28, size = 4
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkGeometryAABBNV = struct VkGeometryAABBNV

struct VkGeometryAABBNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = aabbData, type = (VkBuffer), offset = 16, size = 8
    name = numAABBs, type = (uint32_t), offset = 24, size = 4
    name = stride, type = (uint32_t), offset = 28, size = 4
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

struct VkGeometryDataNV {
    name = triangles, type = (VkGeometryTrianglesNV), offset = 0, size = 96
    name = aabbs, type = (VkGeometryAABBNV), offset = 96, size = 40
} ; size: 136

TYPEDEF VkGeometryDataNV = struct VkGeometryDataNV

struct VkGeometryDataNV {
    name = triangles, type = (VkGeometryTrianglesNV), offset = 0, size = 96
    name = aabbs, type = (VkGeometryAABBNV), offset = 96, size = 40
} ; size: 136

struct VkGeometryNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = geometryType, type = (VkGeometryTypeKHR), offset = 16, size = 4
    padding (4 bytes)
    name = geometry, type = (VkGeometryDataNV), offset = 24, size = 136
    name = flags, type = (VkGeometryFlagsKHR), offset = 160, size = 4
} ; size: 168

TYPEDEF VkGeometryNV = struct VkGeometryNV

struct VkGeometryNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = geometryType, type = (VkGeometryTypeKHR), offset = 16, size = 4
    padding (4 bytes)
    name = geometry, type = (VkGeometryDataNV), offset = 24, size = 136
    name = flags, type = (VkGeometryFlagsKHR), offset = 160, size = 4
} ; size: 168

struct VkAccelerationStructureInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureTypeNV), offset = 16, size = 4
    name = flags, type = (VkBuildAccelerationStructureFlagsNV), offset = 20, size = 4
    name = instanceCount, type = (uint32_t), offset = 24, size = 4
    name = geometryCount, type = (uint32_t), offset = 28, size = 4
    name = pGeometries, type = (const VkGeometryNV *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkAccelerationStructureInfoNV = struct VkAccelerationStructureInfoNV

struct VkAccelerationStructureInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureTypeNV), offset = 16, size = 4
    name = flags, type = (VkBuildAccelerationStructureFlagsNV), offset = 20, size = 4
    name = instanceCount, type = (uint32_t), offset = 24, size = 4
    name = geometryCount, type = (uint32_t), offset = 28, size = 4
    name = pGeometries, type = (const VkGeometryNV *), offset = 32, size = 8
} ; size: 40

struct VkAccelerationStructureCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = compactedSize, type = (VkDeviceSize), offset = 16, size = 8
    name = info, type = (VkAccelerationStructureInfoNV), offset = 24, size = 40
} ; size: 64

TYPEDEF VkAccelerationStructureCreateInfoNV = struct VkAccelerationStructureCreateInfoNV

struct VkAccelerationStructureCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = compactedSize, type = (VkDeviceSize), offset = 16, size = 8
    name = info, type = (VkAccelerationStructureInfoNV), offset = 24, size = 40
} ; size: 64

struct VkBindAccelerationStructureMemoryInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureNV), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkBindAccelerationStructureMemoryInfoNV = struct VkBindAccelerationStructureMemoryInfoNV

struct VkBindAccelerationStructureMemoryInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureNV), offset = 16, size = 8
    name = memory, type = (VkDeviceMemory), offset = 24, size = 8
    name = memoryOffset, type = (VkDeviceSize), offset = 32, size = 8
    name = deviceIndexCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pDeviceIndices, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

struct VkWriteDescriptorSetAccelerationStructureNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAccelerationStructures, type = (const VkAccelerationStructureNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkWriteDescriptorSetAccelerationStructureNV = struct VkWriteDescriptorSetAccelerationStructureNV

struct VkWriteDescriptorSetAccelerationStructureNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAccelerationStructures, type = (const VkAccelerationStructureNV *), offset = 24, size = 8
} ; size: 32

struct VkAccelerationStructureMemoryRequirementsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureMemoryRequirementsTypeNV), offset = 16, size = 4
    padding (4 bytes)
    name = accelerationStructure, type = (VkAccelerationStructureNV), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAccelerationStructureMemoryRequirementsInfoNV = struct VkAccelerationStructureMemoryRequirementsInfoNV

struct VkAccelerationStructureMemoryRequirementsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureMemoryRequirementsTypeNV), offset = 16, size = 4
    padding (4 bytes)
    name = accelerationStructure, type = (VkAccelerationStructureNV), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceRayTracingPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderGroupHandleSize, type = (uint32_t), offset = 16, size = 4
    name = maxRecursionDepth, type = (uint32_t), offset = 20, size = 4
    name = maxShaderGroupStride, type = (uint32_t), offset = 24, size = 4
    name = shaderGroupBaseAlignment, type = (uint32_t), offset = 28, size = 4
    name = maxGeometryCount, type = (uint64_t), offset = 32, size = 8
    name = maxInstanceCount, type = (uint64_t), offset = 40, size = 8
    name = maxTriangleCount, type = (uint64_t), offset = 48, size = 8
    name = maxDescriptorSetAccelerationStructures, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceRayTracingPropertiesNV = struct VkPhysicalDeviceRayTracingPropertiesNV

struct VkPhysicalDeviceRayTracingPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderGroupHandleSize, type = (uint32_t), offset = 16, size = 4
    name = maxRecursionDepth, type = (uint32_t), offset = 20, size = 4
    name = maxShaderGroupStride, type = (uint32_t), offset = 24, size = 4
    name = shaderGroupBaseAlignment, type = (uint32_t), offset = 28, size = 4
    name = maxGeometryCount, type = (uint64_t), offset = 32, size = 8
    name = maxInstanceCount, type = (uint64_t), offset = 40, size = 8
    name = maxTriangleCount, type = (uint64_t), offset = 48, size = 8
    name = maxDescriptorSetAccelerationStructures, type = (uint32_t), offset = 56, size = 4
} ; size: 64

struct VkTransformMatrixKHR {
    name = matrix, type = (float[3][4]), offset = 0, size = 48
} ; size: 48

TYPEDEF VkTransformMatrixKHR = struct VkTransformMatrixKHR

struct VkTransformMatrixKHR {
    name = matrix, type = (float[3][4]), offset = 0, size = 48
} ; size: 48

TYPEDEF VkTransformMatrixNV = VkTransformMatrixKHR

struct VkAabbPositionsKHR {
    name = minX, type = (float), offset = 0, size = 4
    name = minY, type = (float), offset = 4, size = 4
    name = minZ, type = (float), offset = 8, size = 4
    name = maxX, type = (float), offset = 12, size = 4
    name = maxY, type = (float), offset = 16, size = 4
    name = maxZ, type = (float), offset = 20, size = 4
} ; size: 24

TYPEDEF VkAabbPositionsKHR = struct VkAabbPositionsKHR

struct VkAabbPositionsKHR {
    name = minX, type = (float), offset = 0, size = 4
    name = minY, type = (float), offset = 4, size = 4
    name = minZ, type = (float), offset = 8, size = 4
    name = maxX, type = (float), offset = 12, size = 4
    name = maxY, type = (float), offset = 16, size = 4
    name = maxZ, type = (float), offset = 20, size = 4
} ; size: 24

TYPEDEF VkAabbPositionsNV = VkAabbPositionsKHR

struct VkAccelerationStructureInstanceKHR {
    name = transform, type = (VkTransformMatrixKHR), offset = 0, size = 48
    name = instanceCustomIndex, type = (uint32_t), offset = 48, size = 4
    name = mask, type = (uint32_t), offset = 51, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 52, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 55, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 56, size = 8
} ; size: 64

TYPEDEF VkAccelerationStructureInstanceKHR = struct VkAccelerationStructureInstanceKHR

struct VkAccelerationStructureInstanceKHR {
    name = transform, type = (VkTransformMatrixKHR), offset = 0, size = 48
    name = instanceCustomIndex, type = (uint32_t), offset = 48, size = 4
    name = mask, type = (uint32_t), offset = 51, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 52, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 55, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 56, size = 8
} ; size: 64

TYPEDEF VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR

TYPEDEF PFN_vkCreateAccelerationStructureNV = VkResult (*)(VkDevice, const VkAccelerationStructureCreateInfoNV *, const VkAllocationCallbacks *, VkAccelerationStructureNV *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyAccelerationStructureNV = void (*)(VkDevice, VkAccelerationStructureNV, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetAccelerationStructureMemoryRequirementsNV = void (*)(VkDevice, const VkAccelerationStructureMemoryRequirementsInfoNV *, VkMemoryRequirements2KHR *) __attribute__((stdcall))

TYPEDEF PFN_vkBindAccelerationStructureMemoryNV = VkResult (*)(VkDevice, uint32_t, const VkBindAccelerationStructureMemoryInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBuildAccelerationStructureNV = void (*)(VkCommandBuffer, const VkAccelerationStructureInfoNV *, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyAccelerationStructureNV = void (*)(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR) __attribute__((stdcall))

TYPEDEF PFN_vkCmdTraceRaysNV = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCreateRayTracingPipelinesNV = VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoNV *, const VkAllocationCallbacks *, VkPipeline *) __attribute__((stdcall))

TYPEDEF PFN_vkGetRayTracingShaderGroupHandlesKHR = VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetRayTracingShaderGroupHandlesNV = VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetAccelerationStructureHandleNV = VkResult (*)(VkDevice, VkAccelerationStructureNV, size_t, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteAccelerationStructuresPropertiesNV = void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureNV *, VkQueryType, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCompileDeferredNV = VkResult (*)(VkDevice, VkPipeline, uint32_t) __attribute__((stdcall))

FUNC VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureNV * pAccelerationStructure)

FUNC void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks * pAllocator)

FUNC void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2KHR * pMemoryRequirements)

FUNC VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV * pBindInfos)

FUNC void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV * pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)

FUNC void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)

FUNC void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)

FUNC VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines)

FUNC VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData)

FUNC VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData)

FUNC VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void * pData)

FUNC void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)

FUNC VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)

struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = representativeFragmentTest, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV

struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = representativeFragmentTest, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = representativeFragmentTestEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV

struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = representativeFragmentTestEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageViewType, type = (VkImageViewType), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageViewImageFormatInfoEXT = struct VkPhysicalDeviceImageViewImageFormatInfoEXT

struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageViewType, type = (VkImageViewType), offset = 16, size = 4
} ; size: 24

struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = filterCubic, type = (VkBool32), offset = 16, size = 4
    name = filterCubicMinmax, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkFilterCubicImageViewImageFormatPropertiesEXT = struct VkFilterCubicImageViewImageFormatPropertiesEXT

struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = filterCubic, type = (VkBool32), offset = 16, size = 4
    name = filterCubicMinmax, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR

TYPEDEF VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR

struct VkImportMemoryHostPointerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
    padding (4 bytes)
    name = pHostPointer, type = (void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImportMemoryHostPointerInfoEXT = struct VkImportMemoryHostPointerInfoEXT

struct VkImportMemoryHostPointerInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 16, size = 4
    padding (4 bytes)
    name = pHostPointer, type = (void *), offset = 24, size = 8
} ; size: 32

struct VkMemoryHostPointerPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkMemoryHostPointerPropertiesEXT = struct VkMemoryHostPointerPropertiesEXT

struct VkMemoryHostPointerPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryTypeBits, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minImportedHostPointerAlignment, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT

struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minImportedHostPointerAlignment, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkGetMemoryHostPointerPropertiesEXT = VkResult (*)(VkDevice, VkExternalMemoryHandleTypeFlagBits, const void *, VkMemoryHostPointerPropertiesEXT *) __attribute__((stdcall))

FUNC VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void * pHostPointer, VkMemoryHostPointerPropertiesEXT * pMemoryHostPointerProperties)

TYPEDEF PFN_vkCmdWriteBufferMarkerAMD = void (*)(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t) __attribute__((stdcall))

FUNC void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)

ENUM VkPipelineCompilerControlFlagBitsAMD {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkPipelineCompilerControlFlagBitsAMD = enum VkPipelineCompilerControlFlagBitsAMD

ENUM VkPipelineCompilerControlFlagBitsAMD {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkPipelineCompilerControlFlagsAMD = VkFlags

struct VkPipelineCompilerControlCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = compilerControlFlags, type = (VkPipelineCompilerControlFlagsAMD), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineCompilerControlCreateInfoAMD = struct VkPipelineCompilerControlCreateInfoAMD

struct VkPipelineCompilerControlCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = compilerControlFlags, type = (VkPipelineCompilerControlFlagsAMD), offset = 16, size = 4
} ; size: 24

TYPEDEF VkTimeDomainEXT = VkTimeDomainKHR

TYPEDEF VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR

TYPEDEF PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = VkResult (*)(VkPhysicalDevice, uint32_t *, VkTimeDomainKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetCalibratedTimestampsEXT = VkResult (*)(VkDevice, uint32_t, const VkCalibratedTimestampInfoKHR *, uint64_t *, uint64_t *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains)

FUNC VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation)

struct VkPhysicalDeviceShaderCorePropertiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderEngineCount, type = (uint32_t), offset = 16, size = 4
    name = shaderArraysPerEngineCount, type = (uint32_t), offset = 20, size = 4
    name = computeUnitsPerShaderArray, type = (uint32_t), offset = 24, size = 4
    name = simdPerComputeUnit, type = (uint32_t), offset = 28, size = 4
    name = wavefrontsPerSimd, type = (uint32_t), offset = 32, size = 4
    name = wavefrontSize, type = (uint32_t), offset = 36, size = 4
    name = sgprsPerSimd, type = (uint32_t), offset = 40, size = 4
    name = minSgprAllocation, type = (uint32_t), offset = 44, size = 4
    name = maxSgprAllocation, type = (uint32_t), offset = 48, size = 4
    name = sgprAllocationGranularity, type = (uint32_t), offset = 52, size = 4
    name = vgprsPerSimd, type = (uint32_t), offset = 56, size = 4
    name = minVgprAllocation, type = (uint32_t), offset = 60, size = 4
    name = maxVgprAllocation, type = (uint32_t), offset = 64, size = 4
    name = vgprAllocationGranularity, type = (uint32_t), offset = 68, size = 4
} ; size: 72

TYPEDEF VkPhysicalDeviceShaderCorePropertiesAMD = struct VkPhysicalDeviceShaderCorePropertiesAMD

struct VkPhysicalDeviceShaderCorePropertiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderEngineCount, type = (uint32_t), offset = 16, size = 4
    name = shaderArraysPerEngineCount, type = (uint32_t), offset = 20, size = 4
    name = computeUnitsPerShaderArray, type = (uint32_t), offset = 24, size = 4
    name = simdPerComputeUnit, type = (uint32_t), offset = 28, size = 4
    name = wavefrontsPerSimd, type = (uint32_t), offset = 32, size = 4
    name = wavefrontSize, type = (uint32_t), offset = 36, size = 4
    name = sgprsPerSimd, type = (uint32_t), offset = 40, size = 4
    name = minSgprAllocation, type = (uint32_t), offset = 44, size = 4
    name = maxSgprAllocation, type = (uint32_t), offset = 48, size = 4
    name = sgprAllocationGranularity, type = (uint32_t), offset = 52, size = 4
    name = vgprsPerSimd, type = (uint32_t), offset = 56, size = 4
    name = minVgprAllocation, type = (uint32_t), offset = 60, size = 4
    name = maxVgprAllocation, type = (uint32_t), offset = 64, size = 4
    name = vgprAllocationGranularity, type = (uint32_t), offset = 68, size = 4
} ; size: 72

ENUM VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkMemoryOverallocationBehaviorAMD = enum VkMemoryOverallocationBehaviorAMD

ENUM VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
}

struct VkDeviceMemoryOverallocationCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = overallocationBehavior, type = (VkMemoryOverallocationBehaviorAMD), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceMemoryOverallocationCreateInfoAMD = struct VkDeviceMemoryOverallocationCreateInfoAMD

struct VkDeviceMemoryOverallocationCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = overallocationBehavior, type = (VkMemoryOverallocationBehaviorAMD), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVertexAttribDivisor, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxVertexAttribDivisor, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescriptionKHR

TYPEDEF VkPipelineVertexInputDivisorStateCreateInfoEXT = VkPipelineVertexInputDivisorStateCreateInfoKHR

TYPEDEF VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR

TYPEDEF VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits

TYPEDEF VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags

TYPEDEF VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo

TYPEDEF VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback

struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = computeDerivativeGroupQuads, type = (VkBool32), offset = 16, size = 4
    name = computeDerivativeGroupLinear, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV

struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = computeDerivativeGroupQuads, type = (VkBool32), offset = 16, size = 4
    name = computeDerivativeGroupLinear, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceMeshShaderFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = taskShader, type = (VkBool32), offset = 16, size = 4
    name = meshShader, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMeshShaderFeaturesNV = struct VkPhysicalDeviceMeshShaderFeaturesNV

struct VkPhysicalDeviceMeshShaderFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = taskShader, type = (VkBool32), offset = 16, size = 4
    name = meshShader, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceMeshShaderPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxDrawMeshTasksCount, type = (uint32_t), offset = 16, size = 4
    name = maxTaskWorkGroupInvocations, type = (uint32_t), offset = 20, size = 4
    name = maxTaskWorkGroupSize, type = (uint32_t[3]), offset = 24, size = 12
    name = maxTaskTotalMemorySize, type = (uint32_t), offset = 36, size = 4
    name = maxTaskOutputCount, type = (uint32_t), offset = 40, size = 4
    name = maxMeshWorkGroupInvocations, type = (uint32_t), offset = 44, size = 4
    name = maxMeshWorkGroupSize, type = (uint32_t[3]), offset = 48, size = 12
    name = maxMeshTotalMemorySize, type = (uint32_t), offset = 60, size = 4
    name = maxMeshOutputVertices, type = (uint32_t), offset = 64, size = 4
    name = maxMeshOutputPrimitives, type = (uint32_t), offset = 68, size = 4
    name = maxMeshMultiviewViewCount, type = (uint32_t), offset = 72, size = 4
    name = meshOutputPerVertexGranularity, type = (uint32_t), offset = 76, size = 4
    name = meshOutputPerPrimitiveGranularity, type = (uint32_t), offset = 80, size = 4
} ; size: 88

TYPEDEF VkPhysicalDeviceMeshShaderPropertiesNV = struct VkPhysicalDeviceMeshShaderPropertiesNV

struct VkPhysicalDeviceMeshShaderPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxDrawMeshTasksCount, type = (uint32_t), offset = 16, size = 4
    name = maxTaskWorkGroupInvocations, type = (uint32_t), offset = 20, size = 4
    name = maxTaskWorkGroupSize, type = (uint32_t[3]), offset = 24, size = 12
    name = maxTaskTotalMemorySize, type = (uint32_t), offset = 36, size = 4
    name = maxTaskOutputCount, type = (uint32_t), offset = 40, size = 4
    name = maxMeshWorkGroupInvocations, type = (uint32_t), offset = 44, size = 4
    name = maxMeshWorkGroupSize, type = (uint32_t[3]), offset = 48, size = 12
    name = maxMeshTotalMemorySize, type = (uint32_t), offset = 60, size = 4
    name = maxMeshOutputVertices, type = (uint32_t), offset = 64, size = 4
    name = maxMeshOutputPrimitives, type = (uint32_t), offset = 68, size = 4
    name = maxMeshMultiviewViewCount, type = (uint32_t), offset = 72, size = 4
    name = meshOutputPerVertexGranularity, type = (uint32_t), offset = 76, size = 4
    name = meshOutputPerPrimitiveGranularity, type = (uint32_t), offset = 80, size = 4
} ; size: 88

struct VkDrawMeshTasksIndirectCommandNV {
    name = taskCount, type = (uint32_t), offset = 0, size = 4
    name = firstTask, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkDrawMeshTasksIndirectCommandNV = struct VkDrawMeshTasksIndirectCommandNV

struct VkDrawMeshTasksIndirectCommandNV {
    name = taskCount, type = (uint32_t), offset = 0, size = 4
    name = firstTask, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF PFN_vkCmdDrawMeshTasksNV = void (*)(VkCommandBuffer, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawMeshTasksIndirectNV = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawMeshTasksIndirectCountNV = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)

FUNC void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)

FUNC void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)

TYPEDEF VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR

struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageFootprint, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct VkPhysicalDeviceShaderImageFootprintFeaturesNV

struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageFootprint, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = exclusiveScissorCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pExclusiveScissors, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct VkPipelineViewportExclusiveScissorStateCreateInfoNV

struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = exclusiveScissorCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pExclusiveScissors, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exclusiveScissor, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExclusiveScissorFeaturesNV = struct VkPhysicalDeviceExclusiveScissorFeaturesNV

struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = exclusiveScissor, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdSetExclusiveScissorEnableNV = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBool32 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetExclusiveScissorNV = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *) __attribute__((stdcall))

FUNC void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 * pExclusiveScissorEnables)

FUNC void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D * pExclusiveScissors)

struct VkQueueFamilyCheckpointPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = checkpointExecutionStageMask, type = (VkPipelineStageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueueFamilyCheckpointPropertiesNV = struct VkQueueFamilyCheckpointPropertiesNV

struct VkQueueFamilyCheckpointPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = checkpointExecutionStageMask, type = (VkPipelineStageFlags), offset = 16, size = 4
} ; size: 24

struct VkCheckpointDataNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stage, type = (VkPipelineStageFlagBits), offset = 16, size = 4
    padding (4 bytes)
    name = pCheckpointMarker, type = (void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCheckpointDataNV = struct VkCheckpointDataNV

struct VkCheckpointDataNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = stage, type = (VkPipelineStageFlagBits), offset = 16, size = 4
    padding (4 bytes)
    name = pCheckpointMarker, type = (void *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdSetCheckpointNV = void (*)(VkCommandBuffer, const void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetQueueCheckpointDataNV = void (*)(VkQueue, uint32_t *, VkCheckpointDataNV *) __attribute__((stdcall))

FUNC void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void * pCheckpointMarker)

FUNC void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointDataNV * pCheckpointData)

struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderIntegerFunctions2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL

struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderIntegerFunctions2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPerformanceConfigurationINTEL = struct VkPerformanceConfigurationINTEL_T *

ENUM VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkPerformanceConfigurationTypeINTEL = enum VkPerformanceConfigurationTypeINTEL

ENUM VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
}

ENUM VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkQueryPoolSamplingModeINTEL = enum VkQueryPoolSamplingModeINTEL

ENUM VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
}

ENUM VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkPerformanceOverrideTypeINTEL = enum VkPerformanceOverrideTypeINTEL

ENUM VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
}

ENUM VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkPerformanceParameterTypeINTEL = enum VkPerformanceParameterTypeINTEL

ENUM VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
}

ENUM VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkPerformanceValueTypeINTEL = enum VkPerformanceValueTypeINTEL

ENUM VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
}

TYPEDEF VkPerformanceValueDataINTEL = union VkPerformanceValueDataINTEL

struct VkPerformanceValueINTEL {
    name = type, type = (VkPerformanceValueTypeINTEL), offset = 0, size = 4
    padding (4 bytes)
    name = data, type = (VkPerformanceValueDataINTEL), offset = 8, size = 8
} ; size: 16

TYPEDEF VkPerformanceValueINTEL = struct VkPerformanceValueINTEL

struct VkPerformanceValueINTEL {
    name = type, type = (VkPerformanceValueTypeINTEL), offset = 0, size = 4
    padding (4 bytes)
    name = data, type = (VkPerformanceValueDataINTEL), offset = 8, size = 8
} ; size: 16

struct VkInitializePerformanceApiInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pUserData, type = (void *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkInitializePerformanceApiInfoINTEL = struct VkInitializePerformanceApiInfoINTEL

struct VkInitializePerformanceApiInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pUserData, type = (void *), offset = 16, size = 8
} ; size: 24

struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = performanceCountersSampling, type = (VkQueryPoolSamplingModeINTEL), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueryPoolPerformanceQueryCreateInfoINTEL = struct VkQueryPoolPerformanceQueryCreateInfoINTEL

struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = performanceCountersSampling, type = (VkQueryPoolSamplingModeINTEL), offset = 16, size = 4
} ; size: 24

TYPEDEF VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL

struct VkPerformanceMarkerInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = marker, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPerformanceMarkerInfoINTEL = struct VkPerformanceMarkerInfoINTEL

struct VkPerformanceMarkerInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = marker, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkPerformanceStreamMarkerInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = marker, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPerformanceStreamMarkerInfoINTEL = struct VkPerformanceStreamMarkerInfoINTEL

struct VkPerformanceStreamMarkerInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = marker, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPerformanceOverrideInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkPerformanceOverrideTypeINTEL), offset = 16, size = 4
    name = enable, type = (VkBool32), offset = 20, size = 4
    name = parameter, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPerformanceOverrideInfoINTEL = struct VkPerformanceOverrideInfoINTEL

struct VkPerformanceOverrideInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkPerformanceOverrideTypeINTEL), offset = 16, size = 4
    name = enable, type = (VkBool32), offset = 20, size = 4
    name = parameter, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkPerformanceConfigurationAcquireInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkPerformanceConfigurationTypeINTEL), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPerformanceConfigurationAcquireInfoINTEL = struct VkPerformanceConfigurationAcquireInfoINTEL

struct VkPerformanceConfigurationAcquireInfoINTEL {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkPerformanceConfigurationTypeINTEL), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkInitializePerformanceApiINTEL = VkResult (*)(VkDevice, const VkInitializePerformanceApiInfoINTEL *) __attribute__((stdcall))

TYPEDEF PFN_vkUninitializePerformanceApiINTEL = void (*)(VkDevice) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPerformanceMarkerINTEL = VkResult (*)(VkCommandBuffer, const VkPerformanceMarkerInfoINTEL *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPerformanceStreamMarkerINTEL = VkResult (*)(VkCommandBuffer, const VkPerformanceStreamMarkerInfoINTEL *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPerformanceOverrideINTEL = VkResult (*)(VkCommandBuffer, const VkPerformanceOverrideInfoINTEL *) __attribute__((stdcall))

TYPEDEF PFN_vkAcquirePerformanceConfigurationINTEL = VkResult (*)(VkDevice, const VkPerformanceConfigurationAcquireInfoINTEL *, VkPerformanceConfigurationINTEL *) __attribute__((stdcall))

TYPEDEF PFN_vkReleasePerformanceConfigurationINTEL = VkResult (*)(VkDevice, VkPerformanceConfigurationINTEL) __attribute__((stdcall))

TYPEDEF PFN_vkQueueSetPerformanceConfigurationINTEL = VkResult (*)(VkQueue, VkPerformanceConfigurationINTEL) __attribute__((stdcall))

TYPEDEF PFN_vkGetPerformanceParameterINTEL = VkResult (*)(VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL *) __attribute__((stdcall))

FUNC VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL * pInitializeInfo)

FUNC void vkUninitializePerformanceApiINTEL(VkDevice device)

FUNC VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL * pMarkerInfo)

FUNC VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL * pMarkerInfo)

FUNC VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL * pOverrideInfo)

FUNC VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL * pAcquireInfo, VkPerformanceConfigurationINTEL * pConfiguration)

FUNC VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)

FUNC VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)

FUNC VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL * pValue)

struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pciDomain, type = (uint32_t), offset = 16, size = 4
    name = pciBus, type = (uint32_t), offset = 20, size = 4
    name = pciDevice, type = (uint32_t), offset = 24, size = 4
    name = pciFunction, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDevicePCIBusInfoPropertiesEXT = struct VkPhysicalDevicePCIBusInfoPropertiesEXT

struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pciDomain, type = (uint32_t), offset = 16, size = 4
    name = pciBus, type = (uint32_t), offset = 20, size = 4
    name = pciDevice, type = (uint32_t), offset = 24, size = 4
    name = pciFunction, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = localDimmingSupport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct VkDisplayNativeHdrSurfaceCapabilitiesAMD

struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = localDimmingSupport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = localDimmingEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSwapchainDisplayNativeHdrCreateInfoAMD = struct VkSwapchainDisplayNativeHdrCreateInfoAMD

struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = localDimmingEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkSetLocalDimmingAMD = void (*)(VkDevice, VkSwapchainKHR, VkBool32) __attribute__((stdcall))

FUNC void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)

struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMap, type = (VkBool32), offset = 16, size = 4
    name = fragmentDensityMapDynamic, type = (VkBool32), offset = 20, size = 4
    name = fragmentDensityMapNonSubsampledImages, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT

struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMap, type = (VkBool32), offset = 16, size = 4
    name = fragmentDensityMapDynamic, type = (VkBool32), offset = 20, size = 4
    name = fragmentDensityMapNonSubsampledImages, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minFragmentDensityTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = maxFragmentDensityTexelSize, type = (VkExtent2D), offset = 24, size = 8
    name = fragmentDensityInvocations, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT

struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minFragmentDensityTexelSize, type = (VkExtent2D), offset = 16, size = 8
    name = maxFragmentDensityTexelSize, type = (VkExtent2D), offset = 24, size = 8
    name = fragmentDensityInvocations, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentDensityMapAttachment, type = (VkAttachmentReference), offset = 16, size = 8
} ; size: 24

TYPEDEF VkRenderPassFragmentDensityMapCreateInfoEXT = struct VkRenderPassFragmentDensityMapCreateInfoEXT

struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentDensityMapAttachment, type = (VkAttachmentReference), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures

TYPEDEF VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures

TYPEDEF VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties

TYPEDEF VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

ENUM VkShaderCorePropertiesFlagBitsAMD {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkShaderCorePropertiesFlagBitsAMD = enum VkShaderCorePropertiesFlagBitsAMD

ENUM VkShaderCorePropertiesFlagBitsAMD {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647
}

TYPEDEF VkShaderCorePropertiesFlagsAMD = VkFlags

struct VkPhysicalDeviceShaderCoreProperties2AMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreFeatures, type = (VkShaderCorePropertiesFlagsAMD), offset = 16, size = 4
    name = activeComputeUnitCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderCoreProperties2AMD = struct VkPhysicalDeviceShaderCoreProperties2AMD

struct VkPhysicalDeviceShaderCoreProperties2AMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreFeatures, type = (VkShaderCorePropertiesFlagsAMD), offset = 16, size = 4
    name = activeComputeUnitCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceCoherentMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct VkPhysicalDeviceCoherentMemoryFeaturesAMD

struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceCoherentMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderImageInt64Atomics, type = (VkBool32), offset = 16, size = 4
    name = sparseImageInt64Atomics, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT

struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderImageInt64Atomics, type = (VkBool32), offset = 16, size = 4
    name = sparseImageInt64Atomics, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = heapBudget, type = (VkDeviceSize[16]), offset = 16, size = 128
    name = heapUsage, type = (VkDeviceSize[16]), offset = 144, size = 128
} ; size: 272

TYPEDEF VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct VkPhysicalDeviceMemoryBudgetPropertiesEXT

struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = heapBudget, type = (VkDeviceSize[16]), offset = 16, size = 128
    name = heapUsage, type = (VkDeviceSize[16]), offset = 144, size = 128
} ; size: 272

struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryPriority, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct VkPhysicalDeviceMemoryPriorityFeaturesEXT

struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryPriority, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkMemoryPriorityAllocateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = priority, type = (float), offset = 16, size = 4
} ; size: 24

TYPEDEF VkMemoryPriorityAllocateInfoEXT = struct VkMemoryPriorityAllocateInfoEXT

struct VkMemoryPriorityAllocateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = priority, type = (float), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dedicatedAllocationImageAliasing, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV

struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dedicatedAllocationImageAliasing, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = bufferDeviceAddress, type = (VkBool32), offset = 16, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = bufferDeviceAddress, type = (VkBool32), offset = 16, size = 4
    name = bufferDeviceAddressCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = bufferDeviceAddressMultiDevice, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

TYPEDEF VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo

struct VkBufferDeviceAddressCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferDeviceAddressCreateInfoEXT = struct VkBufferDeviceAddressCreateInfoEXT

struct VkBufferDeviceAddressCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
} ; size: 24

TYPEDEF PFN_vkGetBufferDeviceAddressEXT = VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *) __attribute__((stdcall))

FUNC VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo * pInfo)

TYPEDEF VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits

TYPEDEF VkToolPurposeFlagsEXT = VkToolPurposeFlags

TYPEDEF VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties

TYPEDEF PFN_vkGetPhysicalDeviceToolPropertiesEXT = VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties)

TYPEDEF VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo

ENUM VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkValidationFeatureEnableEXT = enum VkValidationFeatureEnableEXT

ENUM VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
}

ENUM VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkValidationFeatureDisableEXT = enum VkValidationFeatureDisableEXT

ENUM VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
}

struct VkValidationFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = enabledValidationFeatureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pEnabledValidationFeatures, type = (const VkValidationFeatureEnableEXT *), offset = 24, size = 8
    name = disabledValidationFeatureCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pDisabledValidationFeatures, type = (const VkValidationFeatureDisableEXT *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkValidationFeaturesEXT = struct VkValidationFeaturesEXT

struct VkValidationFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = enabledValidationFeatureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pEnabledValidationFeatures, type = (const VkValidationFeatureEnableEXT *), offset = 24, size = 8
    name = disabledValidationFeatureCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pDisabledValidationFeatures, type = (const VkValidationFeatureDisableEXT *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkComponentTypeNV = VkComponentTypeKHR

TYPEDEF VkScopeNV = VkScopeKHR

struct VkCooperativeMatrixPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = MSize, type = (uint32_t), offset = 16, size = 4
    name = NSize, type = (uint32_t), offset = 20, size = 4
    name = KSize, type = (uint32_t), offset = 24, size = 4
    name = AType, type = (VkComponentTypeNV), offset = 28, size = 4
    name = BType, type = (VkComponentTypeNV), offset = 32, size = 4
    name = CType, type = (VkComponentTypeNV), offset = 36, size = 4
    name = DType, type = (VkComponentTypeNV), offset = 40, size = 4
    name = scope, type = (VkScopeNV), offset = 44, size = 4
} ; size: 48

TYPEDEF VkCooperativeMatrixPropertiesNV = struct VkCooperativeMatrixPropertiesNV

struct VkCooperativeMatrixPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = MSize, type = (uint32_t), offset = 16, size = 4
    name = NSize, type = (uint32_t), offset = 20, size = 4
    name = KSize, type = (uint32_t), offset = 24, size = 4
    name = AType, type = (VkComponentTypeNV), offset = 28, size = 4
    name = BType, type = (VkComponentTypeNV), offset = 32, size = 4
    name = CType, type = (VkComponentTypeNV), offset = 36, size = 4
    name = DType, type = (VkComponentTypeNV), offset = 40, size = 4
    name = scope, type = (VkScopeNV), offset = 44, size = 4
} ; size: 48

struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrix, type = (VkBool32), offset = 16, size = 4
    name = cooperativeMatrixRobustBufferAccess, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct VkPhysicalDeviceCooperativeMatrixFeaturesNV

struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrix, type = (VkBool32), offset = 16, size = 4
    name = cooperativeMatrixRobustBufferAccess, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrixSupportedStages, type = (VkShaderStageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct VkPhysicalDeviceCooperativeMatrixPropertiesNV

struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cooperativeMatrixSupportedStages, type = (VkShaderStageFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = VkResult (*)(VkPhysicalDevice, uint32_t *, VkCooperativeMatrixPropertiesNV *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesNV * pProperties)

ENUM VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkCoverageReductionModeNV = enum VkCoverageReductionModeNV

ENUM VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags

struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = coverageReductionMode, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct VkPhysicalDeviceCoverageReductionModeFeaturesNV

struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = coverageReductionMode, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineCoverageReductionStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageReductionStateCreateFlagsNV), offset = 16, size = 4
    name = coverageReductionMode, type = (VkCoverageReductionModeNV), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPipelineCoverageReductionStateCreateInfoNV = struct VkPipelineCoverageReductionStateCreateInfoNV

struct VkPipelineCoverageReductionStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCoverageReductionStateCreateFlagsNV), offset = 16, size = 4
    name = coverageReductionMode, type = (VkCoverageReductionModeNV), offset = 20, size = 4
} ; size: 24

struct VkFramebufferMixedSamplesCombinationNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = coverageReductionMode, type = (VkCoverageReductionModeNV), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
    name = depthStencilSamples, type = (VkSampleCountFlags), offset = 24, size = 4
    name = colorSamples, type = (VkSampleCountFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF VkFramebufferMixedSamplesCombinationNV = struct VkFramebufferMixedSamplesCombinationNV

struct VkFramebufferMixedSamplesCombinationNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = coverageReductionMode, type = (VkCoverageReductionModeNV), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
    name = depthStencilSamples, type = (VkSampleCountFlags), offset = 24, size = 4
    name = colorSamples, type = (VkSampleCountFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = VkResult (*)(VkPhysicalDevice, uint32_t *, VkFramebufferMixedSamplesCombinationNV *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t * pCombinationCount, VkFramebufferMixedSamplesCombinationNV * pCombinations)

struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShaderSampleInterlock, type = (VkBool32), offset = 16, size = 4
    name = fragmentShaderPixelInterlock, type = (VkBool32), offset = 20, size = 4
    name = fragmentShaderShadingRateInterlock, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT

struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShaderSampleInterlock, type = (VkBool32), offset = 16, size = 4
    name = fragmentShaderPixelInterlock, type = (VkBool32), offset = 20, size = 4
    name = fragmentShaderShadingRateInterlock, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcrImageArrays, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT

struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcrImageArrays, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkProvokingVertexModeEXT {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkProvokingVertexModeEXT = enum VkProvokingVertexModeEXT

ENUM VkProvokingVertexModeEXT {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = provokingVertexLast, type = (VkBool32), offset = 16, size = 4
    name = transformFeedbackPreservesProvokingVertex, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceProvokingVertexFeaturesEXT = struct VkPhysicalDeviceProvokingVertexFeaturesEXT

struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = provokingVertexLast, type = (VkBool32), offset = 16, size = 4
    name = transformFeedbackPreservesProvokingVertex, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = provokingVertexModePerPipeline, type = (VkBool32), offset = 16, size = 4
    name = transformFeedbackPreservesTriangleFanProvokingVertex, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceProvokingVertexPropertiesEXT = struct VkPhysicalDeviceProvokingVertexPropertiesEXT

struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = provokingVertexModePerPipeline, type = (VkBool32), offset = 16, size = 4
    name = transformFeedbackPreservesTriangleFanProvokingVertex, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = provokingVertexMode, type = (VkProvokingVertexModeEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT

struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = provokingVertexMode, type = (VkProvokingVertexModeEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkHeadlessSurfaceCreateFlagsEXT = VkFlags

struct VkHeadlessSurfaceCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHeadlessSurfaceCreateFlagsEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkHeadlessSurfaceCreateInfoEXT = struct VkHeadlessSurfaceCreateInfoEXT

struct VkHeadlessSurfaceCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHeadlessSurfaceCreateFlagsEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCreateHeadlessSurfaceEXT = VkResult (*)(VkInstance, const VkHeadlessSurfaceCreateInfoEXT *, const VkAllocationCallbacks *, VkSurfaceKHR *) __attribute__((stdcall))

FUNC VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface)

TYPEDEF VkLineRasterizationModeEXT = VkLineRasterizationModeKHR

TYPEDEF VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeaturesKHR

TYPEDEF VkPhysicalDeviceLineRasterizationPropertiesEXT = VkPhysicalDeviceLineRasterizationPropertiesKHR

TYPEDEF VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfoKHR

TYPEDEF PFN_vkCmdSetLineStippleEXT = void (*)(VkCommandBuffer, uint32_t, uint16_t) __attribute__((stdcall))

FUNC void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)

struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferFloat32Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderBufferFloat32AtomicAdd, type = (VkBool32), offset = 20, size = 4
    name = shaderBufferFloat64Atomics, type = (VkBool32), offset = 24, size = 4
    name = shaderBufferFloat64AtomicAdd, type = (VkBool32), offset = 28, size = 4
    name = shaderSharedFloat32Atomics, type = (VkBool32), offset = 32, size = 4
    name = shaderSharedFloat32AtomicAdd, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedFloat64Atomics, type = (VkBool32), offset = 40, size = 4
    name = shaderSharedFloat64AtomicAdd, type = (VkBool32), offset = 44, size = 4
    name = shaderImageFloat32Atomics, type = (VkBool32), offset = 48, size = 4
    name = shaderImageFloat32AtomicAdd, type = (VkBool32), offset = 52, size = 4
    name = sparseImageFloat32Atomics, type = (VkBool32), offset = 56, size = 4
    name = sparseImageFloat32AtomicAdd, type = (VkBool32), offset = 60, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT

struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferFloat32Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderBufferFloat32AtomicAdd, type = (VkBool32), offset = 20, size = 4
    name = shaderBufferFloat64Atomics, type = (VkBool32), offset = 24, size = 4
    name = shaderBufferFloat64AtomicAdd, type = (VkBool32), offset = 28, size = 4
    name = shaderSharedFloat32Atomics, type = (VkBool32), offset = 32, size = 4
    name = shaderSharedFloat32AtomicAdd, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedFloat64Atomics, type = (VkBool32), offset = 40, size = 4
    name = shaderSharedFloat64AtomicAdd, type = (VkBool32), offset = 44, size = 4
    name = shaderImageFloat32Atomics, type = (VkBool32), offset = 48, size = 4
    name = shaderImageFloat32AtomicAdd, type = (VkBool32), offset = 52, size = 4
    name = sparseImageFloat32Atomics, type = (VkBool32), offset = 56, size = 4
    name = sparseImageFloat32AtomicAdd, type = (VkBool32), offset = 60, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures

TYPEDEF PFN_vkResetQueryPoolEXT = void (*)(VkDevice, VkQueryPool, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)

TYPEDEF VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8FeaturesKHR

struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT

struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdSetCullModeEXT = void (*)(VkCommandBuffer, VkCullModeFlags) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetFrontFaceEXT = void (*)(VkCommandBuffer, VkFrontFace) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPrimitiveTopologyEXT = void (*)(VkCommandBuffer, VkPrimitiveTopology) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewportWithCountEXT = void (*)(VkCommandBuffer, uint32_t, const VkViewport *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetScissorWithCountEXT = void (*)(VkCommandBuffer, uint32_t, const VkRect2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindVertexBuffers2EXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthTestEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthWriteEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthCompareOpEXT = void (*)(VkCommandBuffer, VkCompareOp) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBoundsTestEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilTestEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetStencilOpEXT = void (*)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) __attribute__((stdcall))

FUNC void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)

FUNC void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)

FUNC void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)

FUNC void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports)

FUNC void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors)

FUNC void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides)

FUNC void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)

FUNC void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)

FUNC void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)

FUNC void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)

FUNC void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)

FUNC void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)

ENUM VkHostImageCopyFlagBitsEXT {
    VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1
    VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkHostImageCopyFlagBitsEXT = enum VkHostImageCopyFlagBitsEXT

ENUM VkHostImageCopyFlagBitsEXT {
    VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1
    VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkHostImageCopyFlagsEXT = VkFlags

struct VkPhysicalDeviceHostImageCopyFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hostImageCopy, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceHostImageCopyFeaturesEXT = struct VkPhysicalDeviceHostImageCopyFeaturesEXT

struct VkPhysicalDeviceHostImageCopyFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hostImageCopy, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceHostImageCopyPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = copySrcLayoutCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pCopySrcLayouts, type = (VkImageLayout *), offset = 24, size = 8
    name = copyDstLayoutCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCopyDstLayouts, type = (VkImageLayout *), offset = 40, size = 8
    name = optimalTilingLayoutUUID, type = (uint8_t[16]), offset = 48, size = 16
    name = identicalMemoryTypeRequirements, type = (VkBool32), offset = 64, size = 4
} ; size: 72

TYPEDEF VkPhysicalDeviceHostImageCopyPropertiesEXT = struct VkPhysicalDeviceHostImageCopyPropertiesEXT

struct VkPhysicalDeviceHostImageCopyPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = copySrcLayoutCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pCopySrcLayouts, type = (VkImageLayout *), offset = 24, size = 8
    name = copyDstLayoutCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pCopyDstLayouts, type = (VkImageLayout *), offset = 40, size = 8
    name = optimalTilingLayoutUUID, type = (uint8_t[16]), offset = 48, size = 16
    name = identicalMemoryTypeRequirements, type = (VkBool32), offset = 64, size = 4
} ; size: 72

struct VkMemoryToImageCopyEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pHostPointer, type = (const void *), offset = 16, size = 8
    name = memoryRowLength, type = (uint32_t), offset = 24, size = 4
    name = memoryImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

TYPEDEF VkMemoryToImageCopyEXT = struct VkMemoryToImageCopyEXT

struct VkMemoryToImageCopyEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pHostPointer, type = (const void *), offset = 16, size = 8
    name = memoryRowLength, type = (uint32_t), offset = 24, size = 4
    name = memoryImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

struct VkImageToMemoryCopyEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pHostPointer, type = (void *), offset = 16, size = 8
    name = memoryRowLength, type = (uint32_t), offset = 24, size = 4
    name = memoryImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

TYPEDEF VkImageToMemoryCopyEXT = struct VkImageToMemoryCopyEXT

struct VkImageToMemoryCopyEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pHostPointer, type = (void *), offset = 16, size = 8
    name = memoryRowLength, type = (uint32_t), offset = 24, size = 4
    name = memoryImageHeight, type = (uint32_t), offset = 28, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 32, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 48, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 60, size = 12
} ; size: 72

struct VkCopyMemoryToImageInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 24, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkMemoryToImageCopyEXT *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkCopyMemoryToImageInfoEXT = struct VkCopyMemoryToImageInfoEXT

struct VkCopyMemoryToImageInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 24, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkMemoryToImageCopyEXT *), offset = 40, size = 8
} ; size: 48

struct VkCopyImageToMemoryInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = srcImage, type = (VkImage), offset = 24, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkImageToMemoryCopyEXT *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkCopyImageToMemoryInfoEXT = struct VkCopyImageToMemoryInfoEXT

struct VkCopyImageToMemoryInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = srcImage, type = (VkImage), offset = 24, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 32, size = 4
    name = regionCount, type = (uint32_t), offset = 36, size = 4
    name = pRegions, type = (const VkImageToMemoryCopyEXT *), offset = 40, size = 8
} ; size: 48

struct VkCopyImageToImageInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = srcImage, type = (VkImage), offset = 24, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 32, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 40, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 48, size = 4
    name = regionCount, type = (uint32_t), offset = 52, size = 4
    name = pRegions, type = (const VkImageCopy2 *), offset = 56, size = 8
} ; size: 64

TYPEDEF VkCopyImageToImageInfoEXT = struct VkCopyImageToImageInfoEXT

struct VkCopyImageToImageInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkHostImageCopyFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = srcImage, type = (VkImage), offset = 24, size = 8
    name = srcImageLayout, type = (VkImageLayout), offset = 32, size = 4
    padding (4 bytes)
    name = dstImage, type = (VkImage), offset = 40, size = 8
    name = dstImageLayout, type = (VkImageLayout), offset = 48, size = 4
    name = regionCount, type = (uint32_t), offset = 52, size = 4
    name = pRegions, type = (const VkImageCopy2 *), offset = 56, size = 8
} ; size: 64

struct VkHostImageLayoutTransitionInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = oldLayout, type = (VkImageLayout), offset = 24, size = 4
    name = newLayout, type = (VkImageLayout), offset = 28, size = 4
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 32, size = 20
} ; size: 56

TYPEDEF VkHostImageLayoutTransitionInfoEXT = struct VkHostImageLayoutTransitionInfoEXT

struct VkHostImageLayoutTransitionInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
    name = oldLayout, type = (VkImageLayout), offset = 24, size = 4
    name = newLayout, type = (VkImageLayout), offset = 28, size = 4
    name = subresourceRange, type = (VkImageSubresourceRange), offset = 32, size = 20
} ; size: 56

struct VkSubresourceHostMemcpySizeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSubresourceHostMemcpySizeEXT = struct VkSubresourceHostMemcpySizeEXT

struct VkSubresourceHostMemcpySizeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkHostImageCopyDevicePerformanceQueryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = optimalDeviceAccess, type = (VkBool32), offset = 16, size = 4
    name = identicalMemoryLayout, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkHostImageCopyDevicePerformanceQueryEXT = struct VkHostImageCopyDevicePerformanceQueryEXT

struct VkHostImageCopyDevicePerformanceQueryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = optimalDeviceAccess, type = (VkBool32), offset = 16, size = 4
    name = identicalMemoryLayout, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkSubresourceLayout2EXT = VkSubresourceLayout2KHR

TYPEDEF VkImageSubresource2EXT = VkImageSubresource2KHR

TYPEDEF PFN_vkCopyMemoryToImageEXT = VkResult (*)(VkDevice, const VkCopyMemoryToImageInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyImageToMemoryEXT = VkResult (*)(VkDevice, const VkCopyImageToMemoryInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyImageToImageEXT = VkResult (*)(VkDevice, const VkCopyImageToImageInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkTransitionImageLayoutEXT = VkResult (*)(VkDevice, uint32_t, const VkHostImageLayoutTransitionInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageSubresourceLayout2EXT = void (*)(VkDevice, VkImage, const VkImageSubresource2KHR *, VkSubresourceLayout2KHR *) __attribute__((stdcall))

FUNC VkResult vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT * pCopyMemoryToImageInfo)

FUNC VkResult vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT * pCopyImageToMemoryInfo)

FUNC VkResult vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT * pCopyImageToImageInfo)

FUNC VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT * pTransitions)

FUNC void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2KHR * pSubresource, VkSubresourceLayout2KHR * pLayout)

struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryMapPlaced, type = (VkBool32), offset = 16, size = 4
    name = memoryMapRangePlaced, type = (VkBool32), offset = 20, size = 4
    name = memoryUnmapReserve, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT

struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryMapPlaced, type = (VkBool32), offset = 16, size = 4
    name = memoryMapRangePlaced, type = (VkBool32), offset = 20, size = 4
    name = memoryUnmapReserve, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minPlacedMemoryMapAlignment, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT

struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minPlacedMemoryMapAlignment, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkMemoryMapPlacedInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pPlacedAddress, type = (void *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkMemoryMapPlacedInfoEXT = struct VkMemoryMapPlacedInfoEXT

struct VkMemoryMapPlacedInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pPlacedAddress, type = (void *), offset = 16, size = 8
} ; size: 24

struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferFloat16Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderBufferFloat16AtomicAdd, type = (VkBool32), offset = 20, size = 4
    name = shaderBufferFloat16AtomicMinMax, type = (VkBool32), offset = 24, size = 4
    name = shaderBufferFloat32AtomicMinMax, type = (VkBool32), offset = 28, size = 4
    name = shaderBufferFloat64AtomicMinMax, type = (VkBool32), offset = 32, size = 4
    name = shaderSharedFloat16Atomics, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedFloat16AtomicAdd, type = (VkBool32), offset = 40, size = 4
    name = shaderSharedFloat16AtomicMinMax, type = (VkBool32), offset = 44, size = 4
    name = shaderSharedFloat32AtomicMinMax, type = (VkBool32), offset = 48, size = 4
    name = shaderSharedFloat64AtomicMinMax, type = (VkBool32), offset = 52, size = 4
    name = shaderImageFloat32AtomicMinMax, type = (VkBool32), offset = 56, size = 4
    name = sparseImageFloat32AtomicMinMax, type = (VkBool32), offset = 60, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT

struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBufferFloat16Atomics, type = (VkBool32), offset = 16, size = 4
    name = shaderBufferFloat16AtomicAdd, type = (VkBool32), offset = 20, size = 4
    name = shaderBufferFloat16AtomicMinMax, type = (VkBool32), offset = 24, size = 4
    name = shaderBufferFloat32AtomicMinMax, type = (VkBool32), offset = 28, size = 4
    name = shaderBufferFloat64AtomicMinMax, type = (VkBool32), offset = 32, size = 4
    name = shaderSharedFloat16Atomics, type = (VkBool32), offset = 36, size = 4
    name = shaderSharedFloat16AtomicAdd, type = (VkBool32), offset = 40, size = 4
    name = shaderSharedFloat16AtomicMinMax, type = (VkBool32), offset = 44, size = 4
    name = shaderSharedFloat32AtomicMinMax, type = (VkBool32), offset = 48, size = 4
    name = shaderSharedFloat64AtomicMinMax, type = (VkBool32), offset = 52, size = 4
    name = shaderImageFloat32AtomicMinMax, type = (VkBool32), offset = 56, size = 4
    name = sparseImageFloat32AtomicMinMax, type = (VkBool32), offset = 60, size = 4
} ; size: 64

ENUM VkPresentScalingFlagBitsEXT {
    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2
    VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4
    VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPresentScalingFlagBitsEXT = enum VkPresentScalingFlagBitsEXT

ENUM VkPresentScalingFlagBitsEXT {
    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2
    VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4
    VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPresentScalingFlagsEXT = VkFlags

ENUM VkPresentGravityFlagBitsEXT {
    VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1
    VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2
    VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4
    VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPresentGravityFlagBitsEXT = enum VkPresentGravityFlagBitsEXT

ENUM VkPresentGravityFlagBitsEXT {
    VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1
    VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2
    VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4
    VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkPresentGravityFlagsEXT = VkFlags

struct VkSurfacePresentModeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentMode, type = (VkPresentModeKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSurfacePresentModeEXT = struct VkSurfacePresentModeEXT

struct VkSurfacePresentModeEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentMode, type = (VkPresentModeKHR), offset = 16, size = 4
} ; size: 24

struct VkSurfacePresentScalingCapabilitiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedPresentScaling, type = (VkPresentScalingFlagsEXT), offset = 16, size = 4
    name = supportedPresentGravityX, type = (VkPresentGravityFlagsEXT), offset = 20, size = 4
    name = supportedPresentGravityY, type = (VkPresentGravityFlagsEXT), offset = 24, size = 4
    name = minScaledImageExtent, type = (VkExtent2D), offset = 28, size = 8
    name = maxScaledImageExtent, type = (VkExtent2D), offset = 36, size = 8
} ; size: 48

TYPEDEF VkSurfacePresentScalingCapabilitiesEXT = struct VkSurfacePresentScalingCapabilitiesEXT

struct VkSurfacePresentScalingCapabilitiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedPresentScaling, type = (VkPresentScalingFlagsEXT), offset = 16, size = 4
    name = supportedPresentGravityX, type = (VkPresentGravityFlagsEXT), offset = 20, size = 4
    name = supportedPresentGravityY, type = (VkPresentGravityFlagsEXT), offset = 24, size = 4
    name = minScaledImageExtent, type = (VkExtent2D), offset = 28, size = 8
    name = maxScaledImageExtent, type = (VkExtent2D), offset = 36, size = 8
} ; size: 48

struct VkSurfacePresentModeCompatibilityEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSurfacePresentModeCompatibilityEXT = struct VkSurfacePresentModeCompatibilityEXT

struct VkSurfacePresentModeCompatibilityEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = swapchainMaintenance1, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT

struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = swapchainMaintenance1, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSwapchainPresentFenceInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pFences, type = (const VkFence *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSwapchainPresentFenceInfoEXT = struct VkSwapchainPresentFenceInfoEXT

struct VkSwapchainPresentFenceInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pFences, type = (const VkFence *), offset = 24, size = 8
} ; size: 32

struct VkSwapchainPresentModesCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (const VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSwapchainPresentModesCreateInfoEXT = struct VkSwapchainPresentModesCreateInfoEXT

struct VkSwapchainPresentModesCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (const VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

struct VkSwapchainPresentModeInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (const VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSwapchainPresentModeInfoEXT = struct VkSwapchainPresentModeInfoEXT

struct VkSwapchainPresentModeInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchainCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (const VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

struct VkSwapchainPresentScalingCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = scalingBehavior, type = (VkPresentScalingFlagsEXT), offset = 16, size = 4
    name = presentGravityX, type = (VkPresentGravityFlagsEXT), offset = 20, size = 4
    name = presentGravityY, type = (VkPresentGravityFlagsEXT), offset = 24, size = 4
} ; size: 32

TYPEDEF VkSwapchainPresentScalingCreateInfoEXT = struct VkSwapchainPresentScalingCreateInfoEXT

struct VkSwapchainPresentScalingCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = scalingBehavior, type = (VkPresentScalingFlagsEXT), offset = 16, size = 4
    name = presentGravityX, type = (VkPresentGravityFlagsEXT), offset = 20, size = 4
    name = presentGravityY, type = (VkPresentGravityFlagsEXT), offset = 24, size = 4
} ; size: 32

struct VkReleaseSwapchainImagesInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = imageIndexCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pImageIndices, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkReleaseSwapchainImagesInfoEXT = struct VkReleaseSwapchainImagesInfoEXT

struct VkReleaseSwapchainImagesInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = swapchain, type = (VkSwapchainKHR), offset = 16, size = 8
    name = imageIndexCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pImageIndices, type = (const uint32_t *), offset = 32, size = 8
} ; size: 40

TYPEDEF PFN_vkReleaseSwapchainImagesEXT = VkResult (*)(VkDevice, const VkReleaseSwapchainImagesInfoEXT *) __attribute__((stdcall))

FUNC VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT * pReleaseInfo)

TYPEDEF VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures

TYPEDEF VkIndirectCommandsLayoutNV = struct VkIndirectCommandsLayoutNV_T *

ENUM VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkIndirectCommandsTokenTypeNV = enum VkIndirectCommandsTokenTypeNV

ENUM VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
}

ENUM VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkIndirectStateFlagBitsNV = enum VkIndirectStateFlagBitsNV

ENUM VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkIndirectStateFlagsNV = VkFlags

ENUM VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkIndirectCommandsLayoutUsageFlagBitsNV = enum VkIndirectCommandsLayoutUsageFlagBitsNV

ENUM VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkIndirectCommandsLayoutUsageFlagsNV = VkFlags

struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxGraphicsShaderGroupCount, type = (uint32_t), offset = 16, size = 4
    name = maxIndirectSequenceCount, type = (uint32_t), offset = 20, size = 4
    name = maxIndirectCommandsTokenCount, type = (uint32_t), offset = 24, size = 4
    name = maxIndirectCommandsStreamCount, type = (uint32_t), offset = 28, size = 4
    name = maxIndirectCommandsTokenOffset, type = (uint32_t), offset = 32, size = 4
    name = maxIndirectCommandsStreamStride, type = (uint32_t), offset = 36, size = 4
    name = minSequencesCountBufferOffsetAlignment, type = (uint32_t), offset = 40, size = 4
    name = minSequencesIndexBufferOffsetAlignment, type = (uint32_t), offset = 44, size = 4
    name = minIndirectCommandsBufferOffsetAlignment, type = (uint32_t), offset = 48, size = 4
} ; size: 56

TYPEDEF VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV

struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxGraphicsShaderGroupCount, type = (uint32_t), offset = 16, size = 4
    name = maxIndirectSequenceCount, type = (uint32_t), offset = 20, size = 4
    name = maxIndirectCommandsTokenCount, type = (uint32_t), offset = 24, size = 4
    name = maxIndirectCommandsStreamCount, type = (uint32_t), offset = 28, size = 4
    name = maxIndirectCommandsTokenOffset, type = (uint32_t), offset = 32, size = 4
    name = maxIndirectCommandsStreamStride, type = (uint32_t), offset = 36, size = 4
    name = minSequencesCountBufferOffsetAlignment, type = (uint32_t), offset = 40, size = 4
    name = minSequencesIndexBufferOffsetAlignment, type = (uint32_t), offset = 44, size = 4
    name = minIndirectCommandsBufferOffsetAlignment, type = (uint32_t), offset = 48, size = 4
} ; size: 56

struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceGeneratedCommands, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV

struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceGeneratedCommands, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkGraphicsShaderGroupCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = pVertexInputState, type = (const VkPipelineVertexInputStateCreateInfo *), offset = 32, size = 8
    name = pTessellationState, type = (const VkPipelineTessellationStateCreateInfo *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkGraphicsShaderGroupCreateInfoNV = struct VkGraphicsShaderGroupCreateInfoNV

struct VkGraphicsShaderGroupCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stageCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = pVertexInputState, type = (const VkPipelineVertexInputStateCreateInfo *), offset = 32, size = 8
    name = pTessellationState, type = (const VkPipelineTessellationStateCreateInfo *), offset = 40, size = 8
} ; size: 48

struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = groupCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkGraphicsShaderGroupCreateInfoNV *), offset = 24, size = 8
    name = pipelineCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPipelines, type = (const VkPipeline *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkGraphicsPipelineShaderGroupsCreateInfoNV = struct VkGraphicsPipelineShaderGroupsCreateInfoNV

struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = groupCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkGraphicsShaderGroupCreateInfoNV *), offset = 24, size = 8
    name = pipelineCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pPipelines, type = (const VkPipeline *), offset = 40, size = 8
} ; size: 48

struct VkBindShaderGroupIndirectCommandNV {
    name = groupIndex, type = (uint32_t), offset = 0, size = 4
} ; size: 4

TYPEDEF VkBindShaderGroupIndirectCommandNV = struct VkBindShaderGroupIndirectCommandNV

struct VkBindShaderGroupIndirectCommandNV {
    name = groupIndex, type = (uint32_t), offset = 0, size = 4
} ; size: 4

struct VkBindIndexBufferIndirectCommandNV {
    name = bufferAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = size, type = (uint32_t), offset = 8, size = 4
    name = indexType, type = (VkIndexType), offset = 12, size = 4
} ; size: 16

TYPEDEF VkBindIndexBufferIndirectCommandNV = struct VkBindIndexBufferIndirectCommandNV

struct VkBindIndexBufferIndirectCommandNV {
    name = bufferAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = size, type = (uint32_t), offset = 8, size = 4
    name = indexType, type = (VkIndexType), offset = 12, size = 4
} ; size: 16

struct VkBindVertexBufferIndirectCommandNV {
    name = bufferAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = size, type = (uint32_t), offset = 8, size = 4
    name = stride, type = (uint32_t), offset = 12, size = 4
} ; size: 16

TYPEDEF VkBindVertexBufferIndirectCommandNV = struct VkBindVertexBufferIndirectCommandNV

struct VkBindVertexBufferIndirectCommandNV {
    name = bufferAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = size, type = (uint32_t), offset = 8, size = 4
    name = stride, type = (uint32_t), offset = 12, size = 4
} ; size: 16

struct VkSetStateFlagsIndirectCommandNV {
    name = data, type = (uint32_t), offset = 0, size = 4
} ; size: 4

TYPEDEF VkSetStateFlagsIndirectCommandNV = struct VkSetStateFlagsIndirectCommandNV

struct VkSetStateFlagsIndirectCommandNV {
    name = data, type = (uint32_t), offset = 0, size = 4
} ; size: 4

struct VkIndirectCommandsStreamNV {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = offset, type = (VkDeviceSize), offset = 8, size = 8
} ; size: 16

TYPEDEF VkIndirectCommandsStreamNV = struct VkIndirectCommandsStreamNV

struct VkIndirectCommandsStreamNV {
    name = buffer, type = (VkBuffer), offset = 0, size = 8
    name = offset, type = (VkDeviceSize), offset = 8, size = 8
} ; size: 16

struct VkIndirectCommandsLayoutTokenNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = tokenType, type = (VkIndirectCommandsTokenTypeNV), offset = 16, size = 4
    name = stream, type = (uint32_t), offset = 20, size = 4
    name = offset, type = (uint32_t), offset = 24, size = 4
    name = vertexBindingUnit, type = (uint32_t), offset = 28, size = 4
    name = vertexDynamicStride, type = (VkBool32), offset = 32, size = 4
    padding (4 bytes)
    name = pushconstantPipelineLayout, type = (VkPipelineLayout), offset = 40, size = 8
    name = pushconstantShaderStageFlags, type = (VkShaderStageFlags), offset = 48, size = 4
    name = pushconstantOffset, type = (uint32_t), offset = 52, size = 4
    name = pushconstantSize, type = (uint32_t), offset = 56, size = 4
    name = indirectStateFlags, type = (VkIndirectStateFlagsNV), offset = 60, size = 4
    name = indexTypeCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pIndexTypes, type = (const VkIndexType *), offset = 72, size = 8
    name = pIndexTypeValues, type = (const uint32_t *), offset = 80, size = 8
} ; size: 88

TYPEDEF VkIndirectCommandsLayoutTokenNV = struct VkIndirectCommandsLayoutTokenNV

struct VkIndirectCommandsLayoutTokenNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = tokenType, type = (VkIndirectCommandsTokenTypeNV), offset = 16, size = 4
    name = stream, type = (uint32_t), offset = 20, size = 4
    name = offset, type = (uint32_t), offset = 24, size = 4
    name = vertexBindingUnit, type = (uint32_t), offset = 28, size = 4
    name = vertexDynamicStride, type = (VkBool32), offset = 32, size = 4
    padding (4 bytes)
    name = pushconstantPipelineLayout, type = (VkPipelineLayout), offset = 40, size = 8
    name = pushconstantShaderStageFlags, type = (VkShaderStageFlags), offset = 48, size = 4
    name = pushconstantOffset, type = (uint32_t), offset = 52, size = 4
    name = pushconstantSize, type = (uint32_t), offset = 56, size = 4
    name = indirectStateFlags, type = (VkIndirectStateFlagsNV), offset = 60, size = 4
    name = indexTypeCount, type = (uint32_t), offset = 64, size = 4
    padding (4 bytes)
    name = pIndexTypes, type = (const VkIndexType *), offset = 72, size = 8
    name = pIndexTypeValues, type = (const uint32_t *), offset = 80, size = 8
} ; size: 88

struct VkIndirectCommandsLayoutCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkIndirectCommandsLayoutUsageFlagsNV), offset = 16, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 20, size = 4
    name = tokenCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pTokens, type = (const VkIndirectCommandsLayoutTokenNV *), offset = 32, size = 8
    name = streamCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pStreamStrides, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

TYPEDEF VkIndirectCommandsLayoutCreateInfoNV = struct VkIndirectCommandsLayoutCreateInfoNV

struct VkIndirectCommandsLayoutCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkIndirectCommandsLayoutUsageFlagsNV), offset = 16, size = 4
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 20, size = 4
    name = tokenCount, type = (uint32_t), offset = 24, size = 4
    padding (4 bytes)
    name = pTokens, type = (const VkIndirectCommandsLayoutTokenNV *), offset = 32, size = 8
    name = streamCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pStreamStrides, type = (const uint32_t *), offset = 48, size = 8
} ; size: 56

struct VkGeneratedCommandsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
    name = indirectCommandsLayout, type = (VkIndirectCommandsLayoutNV), offset = 32, size = 8
    name = streamCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pStreams, type = (const VkIndirectCommandsStreamNV *), offset = 48, size = 8
    name = sequencesCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = preprocessBuffer, type = (VkBuffer), offset = 64, size = 8
    name = preprocessOffset, type = (VkDeviceSize), offset = 72, size = 8
    name = preprocessSize, type = (VkDeviceSize), offset = 80, size = 8
    name = sequencesCountBuffer, type = (VkBuffer), offset = 88, size = 8
    name = sequencesCountOffset, type = (VkDeviceSize), offset = 96, size = 8
    name = sequencesIndexBuffer, type = (VkBuffer), offset = 104, size = 8
    name = sequencesIndexOffset, type = (VkDeviceSize), offset = 112, size = 8
} ; size: 120

TYPEDEF VkGeneratedCommandsInfoNV = struct VkGeneratedCommandsInfoNV

struct VkGeneratedCommandsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
    name = indirectCommandsLayout, type = (VkIndirectCommandsLayoutNV), offset = 32, size = 8
    name = streamCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pStreams, type = (const VkIndirectCommandsStreamNV *), offset = 48, size = 8
    name = sequencesCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = preprocessBuffer, type = (VkBuffer), offset = 64, size = 8
    name = preprocessOffset, type = (VkDeviceSize), offset = 72, size = 8
    name = preprocessSize, type = (VkDeviceSize), offset = 80, size = 8
    name = sequencesCountBuffer, type = (VkBuffer), offset = 88, size = 8
    name = sequencesCountOffset, type = (VkDeviceSize), offset = 96, size = 8
    name = sequencesIndexBuffer, type = (VkBuffer), offset = 104, size = 8
    name = sequencesIndexOffset, type = (VkDeviceSize), offset = 112, size = 8
} ; size: 120

struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
    name = indirectCommandsLayout, type = (VkIndirectCommandsLayoutNV), offset = 32, size = 8
    name = maxSequencesCount, type = (uint32_t), offset = 40, size = 4
} ; size: 48

TYPEDEF VkGeneratedCommandsMemoryRequirementsInfoNV = struct VkGeneratedCommandsMemoryRequirementsInfoNV

struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
    name = indirectCommandsLayout, type = (VkIndirectCommandsLayoutNV), offset = 32, size = 8
    name = maxSequencesCount, type = (uint32_t), offset = 40, size = 4
} ; size: 48

TYPEDEF PFN_vkGetGeneratedCommandsMemoryRequirementsNV = void (*)(VkDevice, const VkGeneratedCommandsMemoryRequirementsInfoNV *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdPreprocessGeneratedCommandsNV = void (*)(VkCommandBuffer, const VkGeneratedCommandsInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdExecuteGeneratedCommandsNV = void (*)(VkCommandBuffer, VkBool32, const VkGeneratedCommandsInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindPipelineShaderGroupNV = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCreateIndirectCommandsLayoutNV = VkResult (*)(VkDevice, const VkIndirectCommandsLayoutCreateInfoNV *, const VkAllocationCallbacks *, VkIndirectCommandsLayoutNV *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyIndirectCommandsLayoutNV = void (*)(VkDevice, VkIndirectCommandsLayoutNV, const VkAllocationCallbacks *) __attribute__((stdcall))

FUNC void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo)

FUNC void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo)

FUNC void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)

FUNC VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectCommandsLayoutNV * pIndirectCommandsLayout)

FUNC void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks * pAllocator)

struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = inheritedViewportScissor2D, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV

struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = inheritedViewportScissor2D, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkCommandBufferInheritanceViewportScissorInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewportScissor2D, type = (VkBool32), offset = 16, size = 4
    name = viewportDepthCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportDepths, type = (const VkViewport *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCommandBufferInheritanceViewportScissorInfoNV = struct VkCommandBufferInheritanceViewportScissorInfoNV

struct VkCommandBufferInheritanceViewportScissorInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = viewportScissor2D, type = (VkBool32), offset = 16, size = 4
    name = viewportDepthCount, type = (uint32_t), offset = 20, size = 4
    name = pViewportDepths, type = (const VkViewport *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = texelBufferAlignment, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT

struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = texelBufferAlignment, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties

struct VkRenderPassTransformBeginInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkRenderPassTransformBeginInfoQCOM = struct VkRenderPassTransformBeginInfoQCOM

struct VkRenderPassTransformBeginInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
} ; size: 24

struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
    name = renderArea, type = (VkRect2D), offset = 20, size = 16
} ; size: 40

TYPEDEF VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM

struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
    name = renderArea, type = (VkRect2D), offset = 20, size = 16
} ; size: 40

ENUM VkDepthBiasRepresentationEXT {
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1
    VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2
    VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDepthBiasRepresentationEXT = enum VkDepthBiasRepresentationEXT

ENUM VkDepthBiasRepresentationEXT {
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1
    VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2
    VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthBiasControl, type = (VkBool32), offset = 16, size = 4
    name = leastRepresentableValueForceUnormRepresentation, type = (VkBool32), offset = 20, size = 4
    name = floatRepresentation, type = (VkBool32), offset = 24, size = 4
    name = depthBiasExact, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceDepthBiasControlFeaturesEXT = struct VkPhysicalDeviceDepthBiasControlFeaturesEXT

struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthBiasControl, type = (VkBool32), offset = 16, size = 4
    name = leastRepresentableValueForceUnormRepresentation, type = (VkBool32), offset = 20, size = 4
    name = floatRepresentation, type = (VkBool32), offset = 24, size = 4
    name = depthBiasExact, type = (VkBool32), offset = 28, size = 4
} ; size: 32

struct VkDepthBiasInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthBiasConstantFactor, type = (float), offset = 16, size = 4
    name = depthBiasClamp, type = (float), offset = 20, size = 4
    name = depthBiasSlopeFactor, type = (float), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDepthBiasInfoEXT = struct VkDepthBiasInfoEXT

struct VkDepthBiasInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthBiasConstantFactor, type = (float), offset = 16, size = 4
    name = depthBiasClamp, type = (float), offset = 20, size = 4
    name = depthBiasSlopeFactor, type = (float), offset = 24, size = 4
} ; size: 32

struct VkDepthBiasRepresentationInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthBiasRepresentation, type = (VkDepthBiasRepresentationEXT), offset = 16, size = 4
    name = depthBiasExact, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkDepthBiasRepresentationInfoEXT = struct VkDepthBiasRepresentationInfoEXT

struct VkDepthBiasRepresentationInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = depthBiasRepresentation, type = (VkDepthBiasRepresentationEXT), offset = 16, size = 4
    name = depthBiasExact, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdSetDepthBias2EXT = void (*)(VkCommandBuffer, const VkDepthBiasInfoEXT *) __attribute__((stdcall))

FUNC void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT * pDepthBiasInfo)

ENUM VkDeviceMemoryReportEventTypeEXT {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceMemoryReportEventTypeEXT = enum VkDeviceMemoryReportEventTypeEXT

ENUM VkDeviceMemoryReportEventTypeEXT {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceMemoryReportFlagsEXT = VkFlags

struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceMemoryReport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT

struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceMemoryReport, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDeviceMemoryReportCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDeviceMemoryReportFlagsEXT), offset = 16, size = 4
    name = type, type = (VkDeviceMemoryReportEventTypeEXT), offset = 20, size = 4
    name = memoryObjectId, type = (uint64_t), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
    name = objectType, type = (VkObjectType), offset = 40, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 48, size = 8
    name = heapIndex, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF VkDeviceMemoryReportCallbackDataEXT = struct VkDeviceMemoryReportCallbackDataEXT

struct VkDeviceMemoryReportCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDeviceMemoryReportFlagsEXT), offset = 16, size = 4
    name = type, type = (VkDeviceMemoryReportEventTypeEXT), offset = 20, size = 4
    name = memoryObjectId, type = (uint64_t), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
    name = objectType, type = (VkObjectType), offset = 40, size = 4
    padding (4 bytes)
    name = objectHandle, type = (uint64_t), offset = 48, size = 8
    name = heapIndex, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF PFN_vkDeviceMemoryReportCallbackEXT = void (*)(const VkDeviceMemoryReportCallbackDataEXT *, void *) __attribute__((stdcall))

struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceMemoryReportFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pfnUserCallback, type = (PFN_vkDeviceMemoryReportCallbackEXT), offset = 24, size = 8
    name = pUserData, type = (void *), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDeviceDeviceMemoryReportCreateInfoEXT = struct VkDeviceDeviceMemoryReportCreateInfoEXT

struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceMemoryReportFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = pfnUserCallback, type = (PFN_vkDeviceMemoryReportCallbackEXT), offset = 24, size = 8
    name = pUserData, type = (void *), offset = 32, size = 8
} ; size: 40

TYPEDEF PFN_vkAcquireDrmDisplayEXT = VkResult (*)(VkPhysicalDevice, int32_t, VkDisplayKHR) __attribute__((stdcall))

TYPEDEF PFN_vkGetDrmDisplayEXT = VkResult (*)(VkPhysicalDevice, int32_t, uint32_t, VkDisplayKHR *) __attribute__((stdcall))

FUNC VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)

FUNC VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR * display)

struct VkPhysicalDeviceRobustness2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustBufferAccess2, type = (VkBool32), offset = 16, size = 4
    name = robustImageAccess2, type = (VkBool32), offset = 20, size = 4
    name = nullDescriptor, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceRobustness2FeaturesEXT = struct VkPhysicalDeviceRobustness2FeaturesEXT

struct VkPhysicalDeviceRobustness2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustBufferAccess2, type = (VkBool32), offset = 16, size = 4
    name = robustImageAccess2, type = (VkBool32), offset = 20, size = 4
    name = nullDescriptor, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceRobustness2PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustStorageBufferAccessSizeAlignment, type = (VkDeviceSize), offset = 16, size = 8
    name = robustUniformBufferAccessSizeAlignment, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPhysicalDeviceRobustness2PropertiesEXT = struct VkPhysicalDeviceRobustness2PropertiesEXT

struct VkPhysicalDeviceRobustness2PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = robustStorageBufferAccessSizeAlignment, type = (VkDeviceSize), offset = 16, size = 8
    name = robustUniformBufferAccessSizeAlignment, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

struct VkSamplerCustomBorderColorCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = customBorderColor, type = (VkClearColorValue), offset = 16, size = 16
    name = format, type = (VkFormat), offset = 32, size = 4
} ; size: 40

TYPEDEF VkSamplerCustomBorderColorCreateInfoEXT = struct VkSamplerCustomBorderColorCreateInfoEXT

struct VkSamplerCustomBorderColorCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = customBorderColor, type = (VkClearColorValue), offset = 16, size = 16
    name = format, type = (VkFormat), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxCustomBorderColorSamplers, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct VkPhysicalDeviceCustomBorderColorPropertiesEXT

struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxCustomBorderColorSamplers, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = customBorderColors, type = (VkBool32), offset = 16, size = 4
    name = customBorderColorWithoutFormat, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct VkPhysicalDeviceCustomBorderColorFeaturesEXT

struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = customBorderColors, type = (VkBool32), offset = 16, size = 4
    name = customBorderColorWithoutFormat, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDevicePresentBarrierFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePresentBarrierFeaturesNV = struct VkPhysicalDevicePresentBarrierFeaturesNV

struct VkPhysicalDevicePresentBarrierFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSurfaceCapabilitiesPresentBarrierNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrierSupported, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSurfaceCapabilitiesPresentBarrierNV = struct VkSurfaceCapabilitiesPresentBarrierNV

struct VkSurfaceCapabilitiesPresentBarrierNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrierSupported, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSwapchainPresentBarrierCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrierEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSwapchainPresentBarrierCreateInfoNV = struct VkSwapchainPresentBarrierCreateInfoNV

struct VkSwapchainPresentBarrierCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = presentBarrierEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPrivateDataSlotEXT = VkPrivateDataSlot

TYPEDEF VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags

TYPEDEF VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures

TYPEDEF VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo

TYPEDEF VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo

TYPEDEF PFN_vkCreatePrivateDataSlotEXT = VkResult (*)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyPrivateDataSlotEXT = void (*)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkSetPrivateDataEXT = VkResult (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetPrivateDataEXT = void (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *) __attribute__((stdcall))

FUNC VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot)

FUNC void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)

FUNC void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData)

TYPEDEF VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures

ENUM VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkDeviceDiagnosticsConfigFlagBitsNV = enum VkDeviceDiagnosticsConfigFlagBitsNV

ENUM VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkDeviceDiagnosticsConfigFlagsNV = VkFlags

struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = diagnosticsConfig, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV

struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = diagnosticsConfig, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDeviceDiagnosticsConfigCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceDiagnosticsConfigFlagsNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceDiagnosticsConfigCreateInfoNV = struct VkDeviceDiagnosticsConfigCreateInfoNV

struct VkDeviceDiagnosticsConfigCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkDeviceDiagnosticsConfigFlagsNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkCudaModuleNV = struct VkCudaModuleNV_T *

TYPEDEF VkCudaFunctionNV = struct VkCudaFunctionNV_T *

struct VkCudaModuleCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCudaModuleCreateInfoNV = struct VkCudaModuleCreateInfoNV

struct VkCudaModuleCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = dataSize, type = (size_t), offset = 16, size = 8
    name = pData, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkCudaFunctionCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = module, type = (VkCudaModuleNV), offset = 16, size = 8
    name = pName, type = (const char *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkCudaFunctionCreateInfoNV = struct VkCudaFunctionCreateInfoNV

struct VkCudaFunctionCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = module, type = (VkCudaModuleNV), offset = 16, size = 8
    name = pName, type = (const char *), offset = 24, size = 8
} ; size: 32

struct VkCudaLaunchInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = function, type = (VkCudaFunctionNV), offset = 16, size = 8
    name = gridDimX, type = (uint32_t), offset = 24, size = 4
    name = gridDimY, type = (uint32_t), offset = 28, size = 4
    name = gridDimZ, type = (uint32_t), offset = 32, size = 4
    name = blockDimX, type = (uint32_t), offset = 36, size = 4
    name = blockDimY, type = (uint32_t), offset = 40, size = 4
    name = blockDimZ, type = (uint32_t), offset = 44, size = 4
    name = sharedMemBytes, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = paramCount, type = (size_t), offset = 56, size = 8
    name = pParams, type = (const void *const *), offset = 64, size = 8
    name = extraCount, type = (size_t), offset = 72, size = 8
    name = pExtras, type = (const void *const *), offset = 80, size = 8
} ; size: 88

TYPEDEF VkCudaLaunchInfoNV = struct VkCudaLaunchInfoNV

struct VkCudaLaunchInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = function, type = (VkCudaFunctionNV), offset = 16, size = 8
    name = gridDimX, type = (uint32_t), offset = 24, size = 4
    name = gridDimY, type = (uint32_t), offset = 28, size = 4
    name = gridDimZ, type = (uint32_t), offset = 32, size = 4
    name = blockDimX, type = (uint32_t), offset = 36, size = 4
    name = blockDimY, type = (uint32_t), offset = 40, size = 4
    name = blockDimZ, type = (uint32_t), offset = 44, size = 4
    name = sharedMemBytes, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = paramCount, type = (size_t), offset = 56, size = 8
    name = pParams, type = (const void *const *), offset = 64, size = 8
    name = extraCount, type = (size_t), offset = 72, size = 8
    name = pExtras, type = (const void *const *), offset = 80, size = 8
} ; size: 88

struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cudaKernelLaunchFeatures, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCudaKernelLaunchFeaturesNV = struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV

struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cudaKernelLaunchFeatures, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = computeCapabilityMinor, type = (uint32_t), offset = 16, size = 4
    name = computeCapabilityMajor, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCudaKernelLaunchPropertiesNV = struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV

struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = computeCapabilityMinor, type = (uint32_t), offset = 16, size = 4
    name = computeCapabilityMajor, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF PFN_vkCreateCudaModuleNV = VkResult (*)(VkDevice, const VkCudaModuleCreateInfoNV *, const VkAllocationCallbacks *, VkCudaModuleNV *) __attribute__((stdcall))

TYPEDEF PFN_vkGetCudaModuleCacheNV = VkResult (*)(VkDevice, VkCudaModuleNV, size_t *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateCudaFunctionNV = VkResult (*)(VkDevice, const VkCudaFunctionCreateInfoNV *, const VkAllocationCallbacks *, VkCudaFunctionNV *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyCudaModuleNV = void (*)(VkDevice, VkCudaModuleNV, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyCudaFunctionNV = void (*)(VkDevice, VkCudaFunctionNV, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCudaLaunchKernelNV = void (*)(VkCommandBuffer, const VkCudaLaunchInfoNV *) __attribute__((stdcall))

FUNC VkResult vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaModuleNV * pModule)

FUNC VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t * pCacheSize, void * pCacheData)

FUNC VkResult vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaFunctionNV * pFunction)

FUNC void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks * pAllocator)

FUNC void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks * pAllocator)

FUNC void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV * pLaunchInfo)

struct VkQueryLowLatencySupportNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pQueriedLowLatencyData, type = (void *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkQueryLowLatencySupportNV = struct VkQueryLowLatencySupportNV

struct VkQueryLowLatencySupportNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pQueriedLowLatencyData, type = (void *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkAccelerationStructureKHR = struct VkAccelerationStructureKHR_T *

struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDescriptorSingleArray, type = (VkBool32), offset = 16, size = 4
    name = bufferlessPushDescriptors, type = (VkBool32), offset = 20, size = 4
    name = allowSamplerImageViewPostSubmitCreation, type = (VkBool32), offset = 24, size = 4
    padding (4 bytes)
    name = descriptorBufferOffsetAlignment, type = (VkDeviceSize), offset = 32, size = 8
    name = maxDescriptorBufferBindings, type = (uint32_t), offset = 40, size = 4
    name = maxResourceDescriptorBufferBindings, type = (uint32_t), offset = 44, size = 4
    name = maxSamplerDescriptorBufferBindings, type = (uint32_t), offset = 48, size = 4
    name = maxEmbeddedImmutableSamplerBindings, type = (uint32_t), offset = 52, size = 4
    name = maxEmbeddedImmutableSamplers, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = bufferCaptureReplayDescriptorDataSize, type = (size_t), offset = 64, size = 8
    name = imageCaptureReplayDescriptorDataSize, type = (size_t), offset = 72, size = 8
    name = imageViewCaptureReplayDescriptorDataSize, type = (size_t), offset = 80, size = 8
    name = samplerCaptureReplayDescriptorDataSize, type = (size_t), offset = 88, size = 8
    name = accelerationStructureCaptureReplayDescriptorDataSize, type = (size_t), offset = 96, size = 8
    name = samplerDescriptorSize, type = (size_t), offset = 104, size = 8
    name = combinedImageSamplerDescriptorSize, type = (size_t), offset = 112, size = 8
    name = sampledImageDescriptorSize, type = (size_t), offset = 120, size = 8
    name = storageImageDescriptorSize, type = (size_t), offset = 128, size = 8
    name = uniformTexelBufferDescriptorSize, type = (size_t), offset = 136, size = 8
    name = robustUniformTexelBufferDescriptorSize, type = (size_t), offset = 144, size = 8
    name = storageTexelBufferDescriptorSize, type = (size_t), offset = 152, size = 8
    name = robustStorageTexelBufferDescriptorSize, type = (size_t), offset = 160, size = 8
    name = uniformBufferDescriptorSize, type = (size_t), offset = 168, size = 8
    name = robustUniformBufferDescriptorSize, type = (size_t), offset = 176, size = 8
    name = storageBufferDescriptorSize, type = (size_t), offset = 184, size = 8
    name = robustStorageBufferDescriptorSize, type = (size_t), offset = 192, size = 8
    name = inputAttachmentDescriptorSize, type = (size_t), offset = 200, size = 8
    name = accelerationStructureDescriptorSize, type = (size_t), offset = 208, size = 8
    name = maxSamplerDescriptorBufferRange, type = (VkDeviceSize), offset = 216, size = 8
    name = maxResourceDescriptorBufferRange, type = (VkDeviceSize), offset = 224, size = 8
    name = samplerDescriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 232, size = 8
    name = resourceDescriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 240, size = 8
    name = descriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 248, size = 8
} ; size: 256

TYPEDEF VkPhysicalDeviceDescriptorBufferPropertiesEXT = struct VkPhysicalDeviceDescriptorBufferPropertiesEXT

struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDescriptorSingleArray, type = (VkBool32), offset = 16, size = 4
    name = bufferlessPushDescriptors, type = (VkBool32), offset = 20, size = 4
    name = allowSamplerImageViewPostSubmitCreation, type = (VkBool32), offset = 24, size = 4
    padding (4 bytes)
    name = descriptorBufferOffsetAlignment, type = (VkDeviceSize), offset = 32, size = 8
    name = maxDescriptorBufferBindings, type = (uint32_t), offset = 40, size = 4
    name = maxResourceDescriptorBufferBindings, type = (uint32_t), offset = 44, size = 4
    name = maxSamplerDescriptorBufferBindings, type = (uint32_t), offset = 48, size = 4
    name = maxEmbeddedImmutableSamplerBindings, type = (uint32_t), offset = 52, size = 4
    name = maxEmbeddedImmutableSamplers, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = bufferCaptureReplayDescriptorDataSize, type = (size_t), offset = 64, size = 8
    name = imageCaptureReplayDescriptorDataSize, type = (size_t), offset = 72, size = 8
    name = imageViewCaptureReplayDescriptorDataSize, type = (size_t), offset = 80, size = 8
    name = samplerCaptureReplayDescriptorDataSize, type = (size_t), offset = 88, size = 8
    name = accelerationStructureCaptureReplayDescriptorDataSize, type = (size_t), offset = 96, size = 8
    name = samplerDescriptorSize, type = (size_t), offset = 104, size = 8
    name = combinedImageSamplerDescriptorSize, type = (size_t), offset = 112, size = 8
    name = sampledImageDescriptorSize, type = (size_t), offset = 120, size = 8
    name = storageImageDescriptorSize, type = (size_t), offset = 128, size = 8
    name = uniformTexelBufferDescriptorSize, type = (size_t), offset = 136, size = 8
    name = robustUniformTexelBufferDescriptorSize, type = (size_t), offset = 144, size = 8
    name = storageTexelBufferDescriptorSize, type = (size_t), offset = 152, size = 8
    name = robustStorageTexelBufferDescriptorSize, type = (size_t), offset = 160, size = 8
    name = uniformBufferDescriptorSize, type = (size_t), offset = 168, size = 8
    name = robustUniformBufferDescriptorSize, type = (size_t), offset = 176, size = 8
    name = storageBufferDescriptorSize, type = (size_t), offset = 184, size = 8
    name = robustStorageBufferDescriptorSize, type = (size_t), offset = 192, size = 8
    name = inputAttachmentDescriptorSize, type = (size_t), offset = 200, size = 8
    name = accelerationStructureDescriptorSize, type = (size_t), offset = 208, size = 8
    name = maxSamplerDescriptorBufferRange, type = (VkDeviceSize), offset = 216, size = 8
    name = maxResourceDescriptorBufferRange, type = (VkDeviceSize), offset = 224, size = 8
    name = samplerDescriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 232, size = 8
    name = resourceDescriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 240, size = 8
    name = descriptorBufferAddressSpaceSize, type = (VkDeviceSize), offset = 248, size = 8
} ; size: 256

struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDensityMapDescriptorSize, type = (size_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT

struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = combinedImageSamplerDensityMapDescriptorSize, type = (size_t), offset = 16, size = 8
} ; size: 24

struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorBuffer, type = (VkBool32), offset = 16, size = 4
    name = descriptorBufferCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = descriptorBufferImageLayoutIgnored, type = (VkBool32), offset = 24, size = 4
    name = descriptorBufferPushDescriptors, type = (VkBool32), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceDescriptorBufferFeaturesEXT = struct VkPhysicalDeviceDescriptorBufferFeaturesEXT

struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorBuffer, type = (VkBool32), offset = 16, size = 4
    name = descriptorBufferCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = descriptorBufferImageLayoutIgnored, type = (VkBool32), offset = 24, size = 4
    name = descriptorBufferPushDescriptors, type = (VkBool32), offset = 28, size = 4
} ; size: 32

struct VkDescriptorAddressInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = address, type = (VkDeviceAddress), offset = 16, size = 8
    name = range, type = (VkDeviceSize), offset = 24, size = 8
    name = format, type = (VkFormat), offset = 32, size = 4
} ; size: 40

TYPEDEF VkDescriptorAddressInfoEXT = struct VkDescriptorAddressInfoEXT

struct VkDescriptorAddressInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = address, type = (VkDeviceAddress), offset = 16, size = 8
    name = range, type = (VkDeviceSize), offset = 24, size = 8
    name = format, type = (VkFormat), offset = 32, size = 4
} ; size: 40

struct VkDescriptorBufferBindingInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = address, type = (VkDeviceAddress), offset = 16, size = 8
    name = usage, type = (VkBufferUsageFlags), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDescriptorBufferBindingInfoEXT = struct VkDescriptorBufferBindingInfoEXT

struct VkDescriptorBufferBindingInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = address, type = (VkDeviceAddress), offset = 16, size = 8
    name = usage, type = (VkBufferUsageFlags), offset = 24, size = 4
} ; size: 32

struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT

struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDescriptorDataEXT = union VkDescriptorDataEXT

struct VkDescriptorGetInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkDescriptorType), offset = 16, size = 4
    padding (4 bytes)
    name = data, type = (VkDescriptorDataEXT), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDescriptorGetInfoEXT = struct VkDescriptorGetInfoEXT

struct VkDescriptorGetInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkDescriptorType), offset = 16, size = 4
    padding (4 bytes)
    name = data, type = (VkDescriptorDataEXT), offset = 24, size = 8
} ; size: 32

struct VkBufferCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

TYPEDEF VkBufferCaptureDescriptorDataInfoEXT = struct VkBufferCaptureDescriptorDataInfoEXT

struct VkBufferCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = buffer, type = (VkBuffer), offset = 16, size = 8
} ; size: 24

struct VkImageCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageCaptureDescriptorDataInfoEXT = struct VkImageCaptureDescriptorDataInfoEXT

struct VkImageCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = image, type = (VkImage), offset = 16, size = 8
} ; size: 24

struct VkImageViewCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
} ; size: 24

TYPEDEF VkImageViewCaptureDescriptorDataInfoEXT = struct VkImageViewCaptureDescriptorDataInfoEXT

struct VkImageViewCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = imageView, type = (VkImageView), offset = 16, size = 8
} ; size: 24

struct VkSamplerCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampler, type = (VkSampler), offset = 16, size = 8
} ; size: 24

TYPEDEF VkSamplerCaptureDescriptorDataInfoEXT = struct VkSamplerCaptureDescriptorDataInfoEXT

struct VkSamplerCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sampler, type = (VkSampler), offset = 16, size = 8
} ; size: 24

struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureDescriptorData, type = (const void *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkOpaqueCaptureDescriptorDataCreateInfoEXT = struct VkOpaqueCaptureDescriptorDataCreateInfoEXT

struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = opaqueCaptureDescriptorData, type = (const void *), offset = 16, size = 8
} ; size: 24

struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = accelerationStructureNV, type = (VkAccelerationStructureNV), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAccelerationStructureCaptureDescriptorDataInfoEXT = struct VkAccelerationStructureCaptureDescriptorDataInfoEXT

struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = accelerationStructureNV, type = (VkAccelerationStructureNV), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkGetDescriptorSetLayoutSizeEXT = void (*)(VkDevice, VkDescriptorSetLayout, VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = void (*)(VkDevice, VkDescriptorSetLayout, uint32_t, VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDescriptorEXT = void (*)(VkDevice, const VkDescriptorGetInfoEXT *, size_t, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindDescriptorBuffersEXT = void (*)(VkCommandBuffer, uint32_t, const VkDescriptorBufferBindingInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDescriptorBufferOffsetsEXT = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const uint32_t *, const VkDeviceSize *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = VkResult (*)(VkDevice, const VkBufferCaptureDescriptorDataInfoEXT *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = VkResult (*)(VkDevice, const VkImageCaptureDescriptorDataInfoEXT *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = VkResult (*)(VkDevice, const VkImageViewCaptureDescriptorDataInfoEXT *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = VkResult (*)(VkDevice, const VkSamplerCaptureDescriptorDataInfoEXT *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = VkResult (*)(VkDevice, const VkAccelerationStructureCaptureDescriptorDataInfoEXT *, void *) __attribute__((stdcall))

FUNC void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize * pLayoutSizeInBytes)

FUNC void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize * pOffset)

FUNC void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT * pDescriptorInfo, size_t dataSize, void * pDescriptor)

FUNC void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT * pBindingInfos)

FUNC void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t * pBufferIndices, const VkDeviceSize * pOffsets)

FUNC void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)

FUNC VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT * pInfo, void * pData)

FUNC VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT * pInfo, void * pData)

FUNC VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT * pInfo, void * pData)

FUNC VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT * pInfo, void * pData)

FUNC VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT * pInfo, void * pData)

ENUM VkGraphicsPipelineLibraryFlagBitsEXT {
    VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1
    VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8
    VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkGraphicsPipelineLibraryFlagBitsEXT = enum VkGraphicsPipelineLibraryFlagBitsEXT

ENUM VkGraphicsPipelineLibraryFlagBitsEXT {
    VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1
    VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8
    VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkGraphicsPipelineLibraryFlagsEXT = VkFlags

struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = graphicsPipelineLibrary, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT

struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = graphicsPipelineLibrary, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = graphicsPipelineLibraryFastLinking, type = (VkBool32), offset = 16, size = 4
    name = graphicsPipelineLibraryIndependentInterpolationDecoration, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT

struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = graphicsPipelineLibraryFastLinking, type = (VkBool32), offset = 16, size = 4
    name = graphicsPipelineLibraryIndependentInterpolationDecoration, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkGraphicsPipelineLibraryCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkGraphicsPipelineLibraryFlagsEXT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkGraphicsPipelineLibraryCreateInfoEXT = struct VkGraphicsPipelineLibraryCreateInfoEXT

struct VkGraphicsPipelineLibraryCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkGraphicsPipelineLibraryFlagsEXT), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderEarlyAndLateFragmentTests, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD

struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderEarlyAndLateFragmentTests, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkFragmentShadingRateTypeNV {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkFragmentShadingRateTypeNV = enum VkFragmentShadingRateTypeNV

ENUM VkFragmentShadingRateTypeNV {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647
}

ENUM VkFragmentShadingRateNV {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkFragmentShadingRateNV = enum VkFragmentShadingRateNV

ENUM VkFragmentShadingRateNV {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647
}

struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShadingRateEnums, type = (VkBool32), offset = 16, size = 4
    name = supersampleFragmentShadingRates, type = (VkBool32), offset = 20, size = 4
    name = noInvocationFragmentShadingRates, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV

struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentShadingRateEnums, type = (VkBool32), offset = 16, size = 4
    name = supersampleFragmentShadingRates, type = (VkBool32), offset = 20, size = 4
    name = noInvocationFragmentShadingRates, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxFragmentShadingRateInvocationCount, type = (VkSampleCountFlagBits), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV

struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxFragmentShadingRateInvocationCount, type = (VkSampleCountFlagBits), offset = 16, size = 4
} ; size: 24

struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = shadingRateType, type = (VkFragmentShadingRateTypeNV), offset = 16, size = 4
    name = shadingRate, type = (VkFragmentShadingRateNV), offset = 20, size = 4
    name = combinerOps, type = (VkFragmentShadingRateCombinerOpKHR[2]), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV

struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = shadingRateType, type = (VkFragmentShadingRateTypeNV), offset = 16, size = 4
    name = shadingRate, type = (VkFragmentShadingRateNV), offset = 20, size = 4
    name = combinerOps, type = (VkFragmentShadingRateCombinerOpKHR[2]), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdSetFragmentShadingRateEnumNV = void (*)(VkCommandBuffer, VkFragmentShadingRateNV, const VkFragmentShadingRateCombinerOpKHR *) __attribute__((stdcall))

FUNC void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR[2] combinerOps)

ENUM VkAccelerationStructureMotionInstanceTypeNV {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkAccelerationStructureMotionInstanceTypeNV = enum VkAccelerationStructureMotionInstanceTypeNV

ENUM VkAccelerationStructureMotionInstanceTypeNV {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkAccelerationStructureMotionInfoFlagsNV = VkFlags

TYPEDEF VkAccelerationStructureMotionInstanceFlagsNV = VkFlags

TYPEDEF VkDeviceOrHostAddressConstKHR = union VkDeviceOrHostAddressConstKHR

struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexData, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkAccelerationStructureGeometryMotionTrianglesDataNV = struct VkAccelerationStructureGeometryMotionTrianglesDataNV

struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexData, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
} ; size: 24

struct VkAccelerationStructureMotionInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxInstances, type = (uint32_t), offset = 16, size = 4
    name = flags, type = (VkAccelerationStructureMotionInfoFlagsNV), offset = 20, size = 4
} ; size: 24

TYPEDEF VkAccelerationStructureMotionInfoNV = struct VkAccelerationStructureMotionInfoNV

struct VkAccelerationStructureMotionInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxInstances, type = (uint32_t), offset = 16, size = 4
    name = flags, type = (VkAccelerationStructureMotionInfoFlagsNV), offset = 20, size = 4
} ; size: 24

struct VkAccelerationStructureMatrixMotionInstanceNV {
    name = transformT0, type = (VkTransformMatrixKHR), offset = 0, size = 48
    name = transformT1, type = (VkTransformMatrixKHR), offset = 48, size = 48
    name = instanceCustomIndex, type = (uint32_t), offset = 96, size = 4
    name = mask, type = (uint32_t), offset = 99, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 100, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 103, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 104, size = 8
} ; size: 112

TYPEDEF VkAccelerationStructureMatrixMotionInstanceNV = struct VkAccelerationStructureMatrixMotionInstanceNV

struct VkAccelerationStructureMatrixMotionInstanceNV {
    name = transformT0, type = (VkTransformMatrixKHR), offset = 0, size = 48
    name = transformT1, type = (VkTransformMatrixKHR), offset = 48, size = 48
    name = instanceCustomIndex, type = (uint32_t), offset = 96, size = 4
    name = mask, type = (uint32_t), offset = 99, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 100, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 103, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 104, size = 8
} ; size: 112

struct VkSRTDataNV {
    name = sx, type = (float), offset = 0, size = 4
    name = a, type = (float), offset = 4, size = 4
    name = b, type = (float), offset = 8, size = 4
    name = pvx, type = (float), offset = 12, size = 4
    name = sy, type = (float), offset = 16, size = 4
    name = c, type = (float), offset = 20, size = 4
    name = pvy, type = (float), offset = 24, size = 4
    name = sz, type = (float), offset = 28, size = 4
    name = pvz, type = (float), offset = 32, size = 4
    name = qx, type = (float), offset = 36, size = 4
    name = qy, type = (float), offset = 40, size = 4
    name = qz, type = (float), offset = 44, size = 4
    name = qw, type = (float), offset = 48, size = 4
    name = tx, type = (float), offset = 52, size = 4
    name = ty, type = (float), offset = 56, size = 4
    name = tz, type = (float), offset = 60, size = 4
} ; size: 64

TYPEDEF VkSRTDataNV = struct VkSRTDataNV

struct VkSRTDataNV {
    name = sx, type = (float), offset = 0, size = 4
    name = a, type = (float), offset = 4, size = 4
    name = b, type = (float), offset = 8, size = 4
    name = pvx, type = (float), offset = 12, size = 4
    name = sy, type = (float), offset = 16, size = 4
    name = c, type = (float), offset = 20, size = 4
    name = pvy, type = (float), offset = 24, size = 4
    name = sz, type = (float), offset = 28, size = 4
    name = pvz, type = (float), offset = 32, size = 4
    name = qx, type = (float), offset = 36, size = 4
    name = qy, type = (float), offset = 40, size = 4
    name = qz, type = (float), offset = 44, size = 4
    name = qw, type = (float), offset = 48, size = 4
    name = tx, type = (float), offset = 52, size = 4
    name = ty, type = (float), offset = 56, size = 4
    name = tz, type = (float), offset = 60, size = 4
} ; size: 64

struct VkAccelerationStructureSRTMotionInstanceNV {
    name = transformT0, type = (VkSRTDataNV), offset = 0, size = 64
    name = transformT1, type = (VkSRTDataNV), offset = 64, size = 64
    name = instanceCustomIndex, type = (uint32_t), offset = 128, size = 4
    name = mask, type = (uint32_t), offset = 131, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 132, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 135, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 136, size = 8
} ; size: 144

TYPEDEF VkAccelerationStructureSRTMotionInstanceNV = struct VkAccelerationStructureSRTMotionInstanceNV

struct VkAccelerationStructureSRTMotionInstanceNV {
    name = transformT0, type = (VkSRTDataNV), offset = 0, size = 64
    name = transformT1, type = (VkSRTDataNV), offset = 64, size = 64
    name = instanceCustomIndex, type = (uint32_t), offset = 128, size = 4
    name = mask, type = (uint32_t), offset = 131, size = 4
    name = instanceShaderBindingTableRecordOffset, type = (uint32_t), offset = 132, size = 4
    name = flags, type = (VkGeometryInstanceFlagsKHR), offset = 135, size = 4
    name = accelerationStructureReference, type = (uint64_t), offset = 136, size = 8
} ; size: 144

TYPEDEF VkAccelerationStructureMotionInstanceDataNV = union VkAccelerationStructureMotionInstanceDataNV

struct VkAccelerationStructureMotionInstanceNV {
    name = type, type = (VkAccelerationStructureMotionInstanceTypeNV), offset = 0, size = 4
    name = flags, type = (VkAccelerationStructureMotionInstanceFlagsNV), offset = 4, size = 4
    name = data, type = (VkAccelerationStructureMotionInstanceDataNV), offset = 8, size = 144
} ; size: 152

TYPEDEF VkAccelerationStructureMotionInstanceNV = struct VkAccelerationStructureMotionInstanceNV

struct VkAccelerationStructureMotionInstanceNV {
    name = type, type = (VkAccelerationStructureMotionInstanceTypeNV), offset = 0, size = 4
    name = flags, type = (VkAccelerationStructureMotionInstanceFlagsNV), offset = 4, size = 4
    name = data, type = (VkAccelerationStructureMotionInstanceDataNV), offset = 8, size = 144
} ; size: 152

struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingMotionBlur, type = (VkBool32), offset = 16, size = 4
    name = rayTracingMotionBlurPipelineTraceRaysIndirect, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV

struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingMotionBlur, type = (VkBool32), offset = 16, size = 4
    name = rayTracingMotionBlurPipelineTraceRaysIndirect, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcr2plane444Formats, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT

struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcr2plane444Formats, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMapDeferred, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT

struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMapDeferred, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subsampledLoads, type = (VkBool32), offset = 16, size = 4
    name = subsampledCoarseReconstructionEarlyAccess, type = (VkBool32), offset = 20, size = 4
    name = maxSubsampledArrayLayers, type = (uint32_t), offset = 24, size = 4
    name = maxDescriptorSetSubsampledSamplers, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT

struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subsampledLoads, type = (VkBool32), offset = 16, size = 4
    name = subsampledCoarseReconstructionEarlyAccess, type = (VkBool32), offset = 20, size = 4
    name = maxSubsampledArrayLayers, type = (uint32_t), offset = 24, size = 4
    name = maxDescriptorSetSubsampledSamplers, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkCopyCommandTransformInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkCopyCommandTransformInfoQCOM = struct VkCopyCommandTransformInfoQCOM

struct VkCopyCommandTransformInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = transform, type = (VkSurfaceTransformFlagBitsKHR), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures

ENUM VkImageCompressionFlagBitsEXT {
    VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0
    VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1
    VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2
    VK_IMAGE_COMPRESSION_DISABLED_EXT = 4
    VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkImageCompressionFlagBitsEXT = enum VkImageCompressionFlagBitsEXT

ENUM VkImageCompressionFlagBitsEXT {
    VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0
    VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1
    VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2
    VK_IMAGE_COMPRESSION_DISABLED_EXT = 4
    VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkImageCompressionFlagsEXT = VkFlags

ENUM VkImageCompressionFixedRateFlagBitsEXT {
    VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0
    VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1
    VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2
    VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4
    VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8
    VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16
    VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32
    VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64
    VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128
    VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256
    VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512
    VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024
    VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048
    VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096
    VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192
    VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384
    VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768
    VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536
    VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072
    VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144
    VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288
    VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576
    VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152
    VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304
    VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608
    VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkImageCompressionFixedRateFlagBitsEXT = enum VkImageCompressionFixedRateFlagBitsEXT

ENUM VkImageCompressionFixedRateFlagBitsEXT {
    VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0
    VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1
    VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2
    VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4
    VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8
    VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16
    VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32
    VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64
    VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128
    VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256
    VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512
    VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024
    VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048
    VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096
    VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192
    VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384
    VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768
    VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536
    VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072
    VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144
    VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288
    VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576
    VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152
    VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304
    VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608
    VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkImageCompressionFixedRateFlagsEXT = VkFlags

struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct VkPhysicalDeviceImageCompressionControlFeaturesEXT

struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkImageCompressionControlEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCompressionFlagsEXT), offset = 16, size = 4
    name = compressionControlPlaneCount, type = (uint32_t), offset = 20, size = 4
    name = pFixedRateFlags, type = (VkImageCompressionFixedRateFlagsEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkImageCompressionControlEXT = struct VkImageCompressionControlEXT

struct VkImageCompressionControlEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkImageCompressionFlagsEXT), offset = 16, size = 4
    name = compressionControlPlaneCount, type = (uint32_t), offset = 20, size = 4
    name = pFixedRateFlags, type = (VkImageCompressionFixedRateFlagsEXT *), offset = 24, size = 8
} ; size: 32

struct VkImageCompressionPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionFlags, type = (VkImageCompressionFlagsEXT), offset = 16, size = 4
    name = imageCompressionFixedRateFlags, type = (VkImageCompressionFixedRateFlagsEXT), offset = 20, size = 4
} ; size: 24

TYPEDEF VkImageCompressionPropertiesEXT = struct VkImageCompressionPropertiesEXT

struct VkImageCompressionPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionFlags, type = (VkImageCompressionFlagsEXT), offset = 16, size = 4
    name = imageCompressionFixedRateFlags, type = (VkImageCompressionFixedRateFlagsEXT), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = attachmentFeedbackLoopLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT

struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = attachmentFeedbackLoopLayout, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevice4444FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatA4R4G4B4, type = (VkBool32), offset = 16, size = 4
    name = formatA4B4G4R4, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevice4444FormatsFeaturesEXT = struct VkPhysicalDevice4444FormatsFeaturesEXT

struct VkPhysicalDevice4444FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatA4R4G4B4, type = (VkBool32), offset = 16, size = 4
    name = formatA4B4G4R4, type = (VkBool32), offset = 20, size = 4
} ; size: 24

ENUM VkDeviceFaultAddressTypeEXT {
    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6
    VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceFaultAddressTypeEXT = enum VkDeviceFaultAddressTypeEXT

ENUM VkDeviceFaultAddressTypeEXT {
    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6
    VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkDeviceFaultVendorBinaryHeaderVersionEXT {
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceFaultVendorBinaryHeaderVersionEXT = enum VkDeviceFaultVendorBinaryHeaderVersionEXT

ENUM VkDeviceFaultVendorBinaryHeaderVersionEXT {
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDeviceFaultFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceFault, type = (VkBool32), offset = 16, size = 4
    name = deviceFaultVendorBinary, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFaultFeaturesEXT = struct VkPhysicalDeviceFaultFeaturesEXT

struct VkPhysicalDeviceFaultFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceFault, type = (VkBool32), offset = 16, size = 4
    name = deviceFaultVendorBinary, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkDeviceFaultCountsEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = addressInfoCount, type = (uint32_t), offset = 16, size = 4
    name = vendorInfoCount, type = (uint32_t), offset = 20, size = 4
    name = vendorBinarySize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDeviceFaultCountsEXT = struct VkDeviceFaultCountsEXT

struct VkDeviceFaultCountsEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = addressInfoCount, type = (uint32_t), offset = 16, size = 4
    name = vendorInfoCount, type = (uint32_t), offset = 20, size = 4
    name = vendorBinarySize, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

struct VkDeviceFaultAddressInfoEXT {
    name = addressType, type = (VkDeviceFaultAddressTypeEXT), offset = 0, size = 4
    padding (4 bytes)
    name = reportedAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = addressPrecision, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkDeviceFaultAddressInfoEXT = struct VkDeviceFaultAddressInfoEXT

struct VkDeviceFaultAddressInfoEXT {
    name = addressType, type = (VkDeviceFaultAddressTypeEXT), offset = 0, size = 4
    padding (4 bytes)
    name = reportedAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = addressPrecision, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkDeviceFaultVendorInfoEXT {
    name = description, type = (char[256]), offset = 0, size = 256
    name = vendorFaultCode, type = (uint64_t), offset = 256, size = 8
    name = vendorFaultData, type = (uint64_t), offset = 264, size = 8
} ; size: 272

TYPEDEF VkDeviceFaultVendorInfoEXT = struct VkDeviceFaultVendorInfoEXT

struct VkDeviceFaultVendorInfoEXT {
    name = description, type = (char[256]), offset = 0, size = 256
    name = vendorFaultCode, type = (uint64_t), offset = 256, size = 8
    name = vendorFaultData, type = (uint64_t), offset = 264, size = 8
} ; size: 272

struct VkDeviceFaultInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = description, type = (char[256]), offset = 16, size = 256
    name = pAddressInfos, type = (VkDeviceFaultAddressInfoEXT *), offset = 272, size = 8
    name = pVendorInfos, type = (VkDeviceFaultVendorInfoEXT *), offset = 280, size = 8
    name = pVendorBinaryData, type = (void *), offset = 288, size = 8
} ; size: 296

TYPEDEF VkDeviceFaultInfoEXT = struct VkDeviceFaultInfoEXT

struct VkDeviceFaultInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = description, type = (char[256]), offset = 16, size = 256
    name = pAddressInfos, type = (VkDeviceFaultAddressInfoEXT *), offset = 272, size = 8
    name = pVendorInfos, type = (VkDeviceFaultVendorInfoEXT *), offset = 280, size = 8
    name = pVendorBinaryData, type = (void *), offset = 288, size = 8
} ; size: 296

struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    name = headerSize, type = (uint32_t), offset = 0, size = 4
    name = headerVersion, type = (VkDeviceFaultVendorBinaryHeaderVersionEXT), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = driverVersion, type = (uint32_t), offset = 16, size = 4
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 20, size = 16
    name = applicationNameOffset, type = (uint32_t), offset = 36, size = 4
    name = applicationVersion, type = (uint32_t), offset = 40, size = 4
    name = engineNameOffset, type = (uint32_t), offset = 44, size = 4
    name = engineVersion, type = (uint32_t), offset = 48, size = 4
    name = apiVersion, type = (uint32_t), offset = 52, size = 4
} ; size: 56

TYPEDEF VkDeviceFaultVendorBinaryHeaderVersionOneEXT = struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT

struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    name = headerSize, type = (uint32_t), offset = 0, size = 4
    name = headerVersion, type = (VkDeviceFaultVendorBinaryHeaderVersionEXT), offset = 4, size = 4
    name = vendorID, type = (uint32_t), offset = 8, size = 4
    name = deviceID, type = (uint32_t), offset = 12, size = 4
    name = driverVersion, type = (uint32_t), offset = 16, size = 4
    name = pipelineCacheUUID, type = (uint8_t[16]), offset = 20, size = 16
    name = applicationNameOffset, type = (uint32_t), offset = 36, size = 4
    name = applicationVersion, type = (uint32_t), offset = 40, size = 4
    name = engineNameOffset, type = (uint32_t), offset = 44, size = 4
    name = engineVersion, type = (uint32_t), offset = 48, size = 4
    name = apiVersion, type = (uint32_t), offset = 52, size = 4
} ; size: 56

TYPEDEF PFN_vkGetDeviceFaultInfoEXT = VkResult (*)(VkDevice, VkDeviceFaultCountsEXT *, VkDeviceFaultInfoEXT *) __attribute__((stdcall))

FUNC VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT * pFaultCounts, VkDeviceFaultInfoEXT * pFaultInfo)

struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rasterizationOrderColorAttachmentAccess, type = (VkBool32), offset = 16, size = 4
    name = rasterizationOrderDepthAttachmentAccess, type = (VkBool32), offset = 20, size = 4
    name = rasterizationOrderStencilAttachmentAccess, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT

struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rasterizationOrderColorAttachmentAccess, type = (VkBool32), offset = 16, size = 4
    name = rasterizationOrderDepthAttachmentAccess, type = (VkBool32), offset = 20, size = 4
    name = rasterizationOrderStencilAttachmentAccess, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT

struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatRgba10x6WithoutYCbCrSampler, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT

struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = formatRgba10x6WithoutYCbCrSampler, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = mutableDescriptorType, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT

struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = mutableDescriptorType, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT

struct VkMutableDescriptorTypeListEXT {
    name = descriptorTypeCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pDescriptorTypes, type = (const VkDescriptorType *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkMutableDescriptorTypeListEXT = struct VkMutableDescriptorTypeListEXT

struct VkMutableDescriptorTypeListEXT {
    name = descriptorTypeCount, type = (uint32_t), offset = 0, size = 4
    padding (4 bytes)
    name = pDescriptorTypes, type = (const VkDescriptorType *), offset = 8, size = 8
} ; size: 16

TYPEDEF VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT

struct VkMutableDescriptorTypeCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mutableDescriptorTypeListCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pMutableDescriptorTypeLists, type = (const VkMutableDescriptorTypeListEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkMutableDescriptorTypeCreateInfoEXT = struct VkMutableDescriptorTypeCreateInfoEXT

struct VkMutableDescriptorTypeCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mutableDescriptorTypeListCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pMutableDescriptorTypeLists, type = (const VkMutableDescriptorTypeListEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT

struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vertexInputDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT

struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = vertexInputDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkVertexInputBindingDescription2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = binding, type = (uint32_t), offset = 16, size = 4
    name = stride, type = (uint32_t), offset = 20, size = 4
    name = inputRate, type = (VkVertexInputRate), offset = 24, size = 4
    name = divisor, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVertexInputBindingDescription2EXT = struct VkVertexInputBindingDescription2EXT

struct VkVertexInputBindingDescription2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = binding, type = (uint32_t), offset = 16, size = 4
    name = stride, type = (uint32_t), offset = 20, size = 4
    name = inputRate, type = (VkVertexInputRate), offset = 24, size = 4
    name = divisor, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkVertexInputAttributeDescription2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = location, type = (uint32_t), offset = 16, size = 4
    name = binding, type = (uint32_t), offset = 20, size = 4
    name = format, type = (VkFormat), offset = 24, size = 4
    name = offset, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkVertexInputAttributeDescription2EXT = struct VkVertexInputAttributeDescription2EXT

struct VkVertexInputAttributeDescription2EXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = location, type = (uint32_t), offset = 16, size = 4
    name = binding, type = (uint32_t), offset = 20, size = 4
    name = format, type = (VkFormat), offset = 24, size = 4
    name = offset, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF PFN_vkCmdSetVertexInputEXT = void (*)(VkCommandBuffer, uint32_t, const VkVertexInputBindingDescription2EXT *, uint32_t, const VkVertexInputAttributeDescription2EXT *) __attribute__((stdcall))

FUNC void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT * pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT * pVertexAttributeDescriptions)

struct VkPhysicalDeviceDrmPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasPrimary, type = (VkBool32), offset = 16, size = 4
    name = hasRender, type = (VkBool32), offset = 20, size = 4
    name = primaryMajor, type = (int64_t), offset = 24, size = 8
    name = primaryMinor, type = (int64_t), offset = 32, size = 8
    name = renderMajor, type = (int64_t), offset = 40, size = 8
    name = renderMinor, type = (int64_t), offset = 48, size = 8
} ; size: 56

TYPEDEF VkPhysicalDeviceDrmPropertiesEXT = struct VkPhysicalDeviceDrmPropertiesEXT

struct VkPhysicalDeviceDrmPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = hasPrimary, type = (VkBool32), offset = 16, size = 4
    name = hasRender, type = (VkBool32), offset = 20, size = 4
    name = primaryMajor, type = (int64_t), offset = 24, size = 8
    name = primaryMinor, type = (int64_t), offset = 32, size = 8
    name = renderMajor, type = (int64_t), offset = 40, size = 8
    name = renderMinor, type = (int64_t), offset = 48, size = 8
} ; size: 56

ENUM VkDeviceAddressBindingTypeEXT {
    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1
    VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceAddressBindingTypeEXT = enum VkDeviceAddressBindingTypeEXT

ENUM VkDeviceAddressBindingTypeEXT {
    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1
    VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkDeviceAddressBindingFlagBitsEXT {
    VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1
    VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceAddressBindingFlagBitsEXT = enum VkDeviceAddressBindingFlagBitsEXT

ENUM VkDeviceAddressBindingFlagBitsEXT {
    VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1
    VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkDeviceAddressBindingFlagsEXT = VkFlags

struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = reportAddressBinding, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceAddressBindingReportFeaturesEXT = struct VkPhysicalDeviceAddressBindingReportFeaturesEXT

struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = reportAddressBinding, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDeviceAddressBindingCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDeviceAddressBindingFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = baseAddress, type = (VkDeviceAddress), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
    name = bindingType, type = (VkDeviceAddressBindingTypeEXT), offset = 40, size = 4
} ; size: 48

TYPEDEF VkDeviceAddressBindingCallbackDataEXT = struct VkDeviceAddressBindingCallbackDataEXT

struct VkDeviceAddressBindingCallbackDataEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDeviceAddressBindingFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = baseAddress, type = (VkDeviceAddress), offset = 24, size = 8
    name = size, type = (VkDeviceSize), offset = 32, size = 8
    name = bindingType, type = (VkDeviceAddressBindingTypeEXT), offset = 40, size = 4
} ; size: 48

struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClipControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDepthClipControlFeaturesEXT = struct VkPhysicalDeviceDepthClipControlFeaturesEXT

struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClipControl, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = negativeOneToOne, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPipelineViewportDepthClipControlCreateInfoEXT = struct VkPipelineViewportDepthClipControlCreateInfoEXT

struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = negativeOneToOne, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitiveTopologyListRestart, type = (VkBool32), offset = 16, size = 4
    name = primitiveTopologyPatchListRestart, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT

struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitiveTopologyListRestart, type = (VkBool32), offset = 16, size = 4
    name = primitiveTopologyPatchListRestart, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = subpass, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkSubpassShadingPipelineCreateInfoHUAWEI = struct VkSubpassShadingPipelineCreateInfoHUAWEI

struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPass, type = (VkRenderPass), offset = 16, size = 8
    name = subpass, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subpassShading, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI

struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subpassShading, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxSubpassShadingWorkgroupSizeAspectRatio, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI

struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxSubpassShadingWorkgroupSizeAspectRatio, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = VkResult (*)(VkDevice, VkRenderPass, VkExtent2D *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSubpassShadingHUAWEI = void (*)(VkCommandBuffer) __attribute__((stdcall))

FUNC VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D * pMaxWorkgroupSize)

FUNC void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)

struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = invocationMask, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI

struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = invocationMask, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdBindInvocationMaskHUAWEI = void (*)(VkCommandBuffer, VkImageView, VkImageLayout) __attribute__((stdcall))

FUNC void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)

TYPEDEF VkRemoteAddressNV = void *

struct VkMemoryGetRemoteAddressInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

TYPEDEF VkMemoryGetRemoteAddressInfoNV = struct VkMemoryGetRemoteAddressInfoNV

struct VkMemoryGetRemoteAddressInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = memory, type = (VkDeviceMemory), offset = 16, size = 8
    name = handleType, type = (VkExternalMemoryHandleTypeFlagBits), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryRDMA, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV

struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = externalMemoryRDMA, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetMemoryRemoteAddressNV = VkResult (*)(VkDevice, const VkMemoryGetRemoteAddressInfoNV *, VkRemoteAddressNV *) __attribute__((stdcall))

FUNC VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV * pMemoryGetRemoteAddressInfo, VkRemoteAddressNV * pAddress)

TYPEDEF VkPipelineInfoEXT = VkPipelineInfoKHR

struct VkPipelinePropertiesIdentifierEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineIdentifier, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

TYPEDEF VkPipelinePropertiesIdentifierEXT = struct VkPipelinePropertiesIdentifierEXT

struct VkPipelinePropertiesIdentifierEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineIdentifier, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelinePropertiesIdentifier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct VkPhysicalDevicePipelinePropertiesFeaturesEXT

struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelinePropertiesIdentifier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkGetPipelinePropertiesEXT = VkResult (*)(VkDevice, const VkPipelineInfoEXT *, VkBaseOutStructure *) __attribute__((stdcall))

FUNC VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT * pPipelineInfo, VkBaseOutStructure * pPipelineProperties)

ENUM VkFrameBoundaryFlagBitsEXT {
    VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1
    VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkFrameBoundaryFlagBitsEXT = enum VkFrameBoundaryFlagBitsEXT

ENUM VkFrameBoundaryFlagBitsEXT {
    VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1
    VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkFrameBoundaryFlagsEXT = VkFlags

struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = frameBoundary, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFrameBoundaryFeaturesEXT = struct VkPhysicalDeviceFrameBoundaryFeaturesEXT

struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = frameBoundary, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkFrameBoundaryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFrameBoundaryFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = frameID, type = (uint64_t), offset = 24, size = 8
    name = imageCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pImages, type = (const VkImage *), offset = 40, size = 8
    name = bufferCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pBuffers, type = (const VkBuffer *), offset = 56, size = 8
    name = tagName, type = (uint64_t), offset = 64, size = 8
    name = tagSize, type = (size_t), offset = 72, size = 8
    name = pTag, type = (const void *), offset = 80, size = 8
} ; size: 88

TYPEDEF VkFrameBoundaryEXT = struct VkFrameBoundaryEXT

struct VkFrameBoundaryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkFrameBoundaryFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = frameID, type = (uint64_t), offset = 24, size = 8
    name = imageCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pImages, type = (const VkImage *), offset = 40, size = 8
    name = bufferCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pBuffers, type = (const VkBuffer *), offset = 56, size = 8
    name = tagName, type = (uint64_t), offset = 64, size = 8
    name = tagSize, type = (size_t), offset = 72, size = 8
    name = pTag, type = (const void *), offset = 80, size = 8
} ; size: 88

struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multisampledRenderToSingleSampled, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT

struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multisampledRenderToSingleSampled, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSubpassResolvePerformanceQueryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = optimal, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSubpassResolvePerformanceQueryEXT = struct VkSubpassResolvePerformanceQueryEXT

struct VkSubpassResolvePerformanceQueryEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = optimal, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkMultisampledRenderToSingleSampledInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = multisampledRenderToSingleSampledEnable, type = (VkBool32), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
} ; size: 24

TYPEDEF VkMultisampledRenderToSingleSampledInfoEXT = struct VkMultisampledRenderToSingleSampledInfoEXT

struct VkMultisampledRenderToSingleSampledInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = multisampledRenderToSingleSampledEnable, type = (VkBool32), offset = 16, size = 4
    name = rasterizationSamples, type = (VkSampleCountFlagBits), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState2, type = (VkBool32), offset = 16, size = 4
    name = extendedDynamicState2LogicOp, type = (VkBool32), offset = 20, size = 4
    name = extendedDynamicState2PatchControlPoints, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT

struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState2, type = (VkBool32), offset = 16, size = 4
    name = extendedDynamicState2LogicOp, type = (VkBool32), offset = 20, size = 4
    name = extendedDynamicState2PatchControlPoints, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkCmdSetPatchControlPointsEXT = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRasterizerDiscardEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthBiasEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetLogicOpEXT = void (*)(VkCommandBuffer, VkLogicOp) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPrimitiveRestartEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

FUNC void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)

FUNC void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)

FUNC void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)

FUNC void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)

FUNC void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)

struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = colorWriteEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct VkPhysicalDeviceColorWriteEnableFeaturesEXT

struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = colorWriteEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPipelineColorWriteCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorWriteEnables, type = (const VkBool32 *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineColorWriteCreateInfoEXT = struct VkPipelineColorWriteCreateInfoEXT

struct VkPipelineColorWriteCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = attachmentCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pColorWriteEnables, type = (const VkBool32 *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdSetColorWriteEnableEXT = void (*)(VkCommandBuffer, uint32_t, const VkBool32 *) __attribute__((stdcall))

FUNC void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 * pColorWriteEnables)

struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitivesGeneratedQuery, type = (VkBool32), offset = 16, size = 4
    name = primitivesGeneratedQueryWithRasterizerDiscard, type = (VkBool32), offset = 20, size = 4
    name = primitivesGeneratedQueryWithNonZeroStreams, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT

struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = primitivesGeneratedQuery, type = (VkBool32), offset = 16, size = 4
    name = primitivesGeneratedQueryWithRasterizerDiscard, type = (VkBool32), offset = 20, size = 4
    name = primitivesGeneratedQueryWithNonZeroStreams, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR

TYPEDEF VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR

struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minLod, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct VkPhysicalDeviceImageViewMinLodFeaturesEXT

struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = minLod, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkImageViewMinLodCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = minLod, type = (float), offset = 16, size = 4
} ; size: 24

TYPEDEF VkImageViewMinLodCreateInfoEXT = struct VkImageViewMinLodCreateInfoEXT

struct VkImageViewMinLodCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = minLod, type = (float), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiDraw, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiDrawFeaturesEXT = struct VkPhysicalDeviceMultiDrawFeaturesEXT

struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiDraw, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxMultiDrawCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiDrawPropertiesEXT = struct VkPhysicalDeviceMultiDrawPropertiesEXT

struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxMultiDrawCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkMultiDrawInfoEXT {
    name = firstVertex, type = (uint32_t), offset = 0, size = 4
    name = vertexCount, type = (uint32_t), offset = 4, size = 4
} ; size: 8

TYPEDEF VkMultiDrawInfoEXT = struct VkMultiDrawInfoEXT

struct VkMultiDrawInfoEXT {
    name = firstVertex, type = (uint32_t), offset = 0, size = 4
    name = vertexCount, type = (uint32_t), offset = 4, size = 4
} ; size: 8

struct VkMultiDrawIndexedInfoEXT {
    name = firstIndex, type = (uint32_t), offset = 0, size = 4
    name = indexCount, type = (uint32_t), offset = 4, size = 4
    name = vertexOffset, type = (int32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkMultiDrawIndexedInfoEXT = struct VkMultiDrawIndexedInfoEXT

struct VkMultiDrawIndexedInfoEXT {
    name = firstIndex, type = (uint32_t), offset = 0, size = 4
    name = indexCount, type = (uint32_t), offset = 4, size = 4
    name = vertexOffset, type = (int32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF PFN_vkCmdDrawMultiEXT = void (*)(VkCommandBuffer, uint32_t, const VkMultiDrawInfoEXT *, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawMultiIndexedEXT = void (*)(VkCommandBuffer, uint32_t, const VkMultiDrawIndexedInfoEXT *, uint32_t, uint32_t, uint32_t, const int32_t *) __attribute__((stdcall))

FUNC void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT * pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)

FUNC void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT * pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t * pVertexOffset)

struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = image2DViewOf3D, type = (VkBool32), offset = 16, size = 4
    name = sampler2DViewOf3D, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT

struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = image2DViewOf3D, type = (VkBool32), offset = 16, size = 4
    name = sampler2DViewOf3D, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTileImageColorReadAccess, type = (VkBool32), offset = 16, size = 4
    name = shaderTileImageDepthReadAccess, type = (VkBool32), offset = 20, size = 4
    name = shaderTileImageStencilReadAccess, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceShaderTileImageFeaturesEXT = struct VkPhysicalDeviceShaderTileImageFeaturesEXT

struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTileImageColorReadAccess, type = (VkBool32), offset = 16, size = 4
    name = shaderTileImageDepthReadAccess, type = (VkBool32), offset = 20, size = 4
    name = shaderTileImageStencilReadAccess, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTileImageCoherentReadAccelerated, type = (VkBool32), offset = 16, size = 4
    name = shaderTileImageReadSampleFromPixelRateInvocation, type = (VkBool32), offset = 20, size = 4
    name = shaderTileImageReadFromHelperInvocation, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceShaderTileImagePropertiesEXT = struct VkPhysicalDeviceShaderTileImagePropertiesEXT

struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderTileImageCoherentReadAccelerated, type = (VkBool32), offset = 16, size = 4
    name = shaderTileImageReadSampleFromPixelRateInvocation, type = (VkBool32), offset = 20, size = 4
    name = shaderTileImageReadFromHelperInvocation, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkMicromapEXT = struct VkMicromapEXT_T *

ENUM VkMicromapTypeEXT {
    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0
    VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkMicromapTypeEXT = enum VkMicromapTypeEXT

ENUM VkMicromapTypeEXT {
    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0
    VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkBuildMicromapModeEXT {
    VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0
    VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkBuildMicromapModeEXT = enum VkBuildMicromapModeEXT

ENUM VkBuildMicromapModeEXT {
    VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0
    VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
}

ENUM VkCopyMicromapModeEXT {
    VK_COPY_MICROMAP_MODE_CLONE_EXT = 0
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2
    VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3
    VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkCopyMicromapModeEXT = enum VkCopyMicromapModeEXT

ENUM VkCopyMicromapModeEXT {
    VK_COPY_MICROMAP_MODE_CLONE_EXT = 0
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2
    VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3
    VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
}

ENUM VkOpacityMicromapFormatEXT {
    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2
    VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkOpacityMicromapFormatEXT = enum VkOpacityMicromapFormatEXT

ENUM VkOpacityMicromapFormatEXT {
    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2
    VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647
}

ENUM VkOpacityMicromapSpecialIndexEXT {
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkOpacityMicromapSpecialIndexEXT = enum VkOpacityMicromapSpecialIndexEXT

ENUM VkOpacityMicromapSpecialIndexEXT {
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647
}

ENUM VkAccelerationStructureCompatibilityKHR {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureCompatibilityKHR = enum VkAccelerationStructureCompatibilityKHR

ENUM VkAccelerationStructureCompatibilityKHR {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647
}

ENUM VkAccelerationStructureBuildTypeKHR {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureBuildTypeKHR = enum VkAccelerationStructureBuildTypeKHR

ENUM VkAccelerationStructureBuildTypeKHR {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647
}

ENUM VkBuildMicromapFlagBitsEXT {
    VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1
    VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2
    VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4
    VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkBuildMicromapFlagBitsEXT = enum VkBuildMicromapFlagBitsEXT

ENUM VkBuildMicromapFlagBitsEXT {
    VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1
    VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2
    VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4
    VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkBuildMicromapFlagsEXT = VkFlags

ENUM VkMicromapCreateFlagBitsEXT {
    VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1
    VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkMicromapCreateFlagBitsEXT = enum VkMicromapCreateFlagBitsEXT

ENUM VkMicromapCreateFlagBitsEXT {
    VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1
    VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkMicromapCreateFlagsEXT = VkFlags

struct VkMicromapUsageEXT {
    name = count, type = (uint32_t), offset = 0, size = 4
    name = subdivisionLevel, type = (uint32_t), offset = 4, size = 4
    name = format, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkMicromapUsageEXT = struct VkMicromapUsageEXT

struct VkMicromapUsageEXT {
    name = count, type = (uint32_t), offset = 0, size = 4
    name = subdivisionLevel, type = (uint32_t), offset = 4, size = 4
    name = format, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkDeviceOrHostAddressKHR = union VkDeviceOrHostAddressKHR

struct VkMicromapBuildInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkMicromapTypeEXT), offset = 16, size = 4
    name = flags, type = (VkBuildMicromapFlagsEXT), offset = 20, size = 4
    name = mode, type = (VkBuildMicromapModeEXT), offset = 24, size = 4
    padding (4 bytes)
    name = dstMicromap, type = (VkMicromapEXT), offset = 32, size = 8
    name = usageCountsCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pUsageCounts, type = (const VkMicromapUsageEXT *), offset = 48, size = 8
    name = ppUsageCounts, type = (const VkMicromapUsageEXT *const *), offset = 56, size = 8
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 64, size = 8
    name = scratchData, type = (VkDeviceOrHostAddressKHR), offset = 72, size = 8
    name = triangleArray, type = (VkDeviceOrHostAddressConstKHR), offset = 80, size = 8
    name = triangleArrayStride, type = (VkDeviceSize), offset = 88, size = 8
} ; size: 96

TYPEDEF VkMicromapBuildInfoEXT = struct VkMicromapBuildInfoEXT

struct VkMicromapBuildInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkMicromapTypeEXT), offset = 16, size = 4
    name = flags, type = (VkBuildMicromapFlagsEXT), offset = 20, size = 4
    name = mode, type = (VkBuildMicromapModeEXT), offset = 24, size = 4
    padding (4 bytes)
    name = dstMicromap, type = (VkMicromapEXT), offset = 32, size = 8
    name = usageCountsCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = pUsageCounts, type = (const VkMicromapUsageEXT *), offset = 48, size = 8
    name = ppUsageCounts, type = (const VkMicromapUsageEXT *const *), offset = 56, size = 8
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 64, size = 8
    name = scratchData, type = (VkDeviceOrHostAddressKHR), offset = 72, size = 8
    name = triangleArray, type = (VkDeviceOrHostAddressConstKHR), offset = 80, size = 8
    name = triangleArrayStride, type = (VkDeviceSize), offset = 88, size = 8
} ; size: 96

struct VkMicromapCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = createFlags, type = (VkMicromapCreateFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
    name = type, type = (VkMicromapTypeEXT), offset = 48, size = 4
    padding (4 bytes)
    name = deviceAddress, type = (VkDeviceAddress), offset = 56, size = 8
} ; size: 64

TYPEDEF VkMicromapCreateInfoEXT = struct VkMicromapCreateInfoEXT

struct VkMicromapCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = createFlags, type = (VkMicromapCreateFlagsEXT), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
    name = type, type = (VkMicromapTypeEXT), offset = 48, size = 4
    padding (4 bytes)
    name = deviceAddress, type = (VkDeviceAddress), offset = 56, size = 8
} ; size: 64

struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = micromap, type = (VkBool32), offset = 16, size = 4
    name = micromapCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = micromapHostCommands, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceOpacityMicromapFeaturesEXT = struct VkPhysicalDeviceOpacityMicromapFeaturesEXT

struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = micromap, type = (VkBool32), offset = 16, size = 4
    name = micromapCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = micromapHostCommands, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxOpacity2StateSubdivisionLevel, type = (uint32_t), offset = 16, size = 4
    name = maxOpacity4StateSubdivisionLevel, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceOpacityMicromapPropertiesEXT = struct VkPhysicalDeviceOpacityMicromapPropertiesEXT

struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxOpacity2StateSubdivisionLevel, type = (uint32_t), offset = 16, size = 4
    name = maxOpacity4StateSubdivisionLevel, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkMicromapVersionInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVersionData, type = (const uint8_t *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkMicromapVersionInfoEXT = struct VkMicromapVersionInfoEXT

struct VkMicromapVersionInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVersionData, type = (const uint8_t *), offset = 16, size = 8
} ; size: 24

struct VkCopyMicromapToMemoryInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkMicromapEXT), offset = 16, size = 8
    name = dst, type = (VkDeviceOrHostAddressKHR), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyMicromapToMemoryInfoEXT = struct VkCopyMicromapToMemoryInfoEXT

struct VkCopyMicromapToMemoryInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkMicromapEXT), offset = 16, size = 8
    name = dst, type = (VkDeviceOrHostAddressKHR), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

struct VkCopyMemoryToMicromapInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = dst, type = (VkMicromapEXT), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyMemoryToMicromapInfoEXT = struct VkCopyMemoryToMicromapInfoEXT

struct VkCopyMemoryToMicromapInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = dst, type = (VkMicromapEXT), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

struct VkCopyMicromapInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkMicromapEXT), offset = 16, size = 8
    name = dst, type = (VkMicromapEXT), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyMicromapInfoEXT = struct VkCopyMicromapInfoEXT

struct VkCopyMicromapInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkMicromapEXT), offset = 16, size = 8
    name = dst, type = (VkMicromapEXT), offset = 24, size = 8
    name = mode, type = (VkCopyMicromapModeEXT), offset = 32, size = 4
} ; size: 40

struct VkMicromapBuildSizesInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = micromapSize, type = (VkDeviceSize), offset = 16, size = 8
    name = buildScratchSize, type = (VkDeviceSize), offset = 24, size = 8
    name = discardable, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkMicromapBuildSizesInfoEXT = struct VkMicromapBuildSizesInfoEXT

struct VkMicromapBuildSizesInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = micromapSize, type = (VkDeviceSize), offset = 16, size = 8
    name = buildScratchSize, type = (VkDeviceSize), offset = 24, size = 8
    name = discardable, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indexType, type = (VkIndexType), offset = 16, size = 4
    padding (4 bytes)
    name = indexBuffer, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
    name = indexStride, type = (VkDeviceSize), offset = 32, size = 8
    name = baseTriangle, type = (uint32_t), offset = 40, size = 4
    name = usageCountsCount, type = (uint32_t), offset = 44, size = 4
    name = pUsageCounts, type = (const VkMicromapUsageEXT *), offset = 48, size = 8
    name = ppUsageCounts, type = (const VkMicromapUsageEXT *const *), offset = 56, size = 8
    name = micromap, type = (VkMicromapEXT), offset = 64, size = 8
} ; size: 72

TYPEDEF VkAccelerationStructureTrianglesOpacityMicromapEXT = struct VkAccelerationStructureTrianglesOpacityMicromapEXT

struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indexType, type = (VkIndexType), offset = 16, size = 4
    padding (4 bytes)
    name = indexBuffer, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
    name = indexStride, type = (VkDeviceSize), offset = 32, size = 8
    name = baseTriangle, type = (uint32_t), offset = 40, size = 4
    name = usageCountsCount, type = (uint32_t), offset = 44, size = 4
    name = pUsageCounts, type = (const VkMicromapUsageEXT *), offset = 48, size = 8
    name = ppUsageCounts, type = (const VkMicromapUsageEXT *const *), offset = 56, size = 8
    name = micromap, type = (VkMicromapEXT), offset = 64, size = 8
} ; size: 72

struct VkMicromapTriangleEXT {
    name = dataOffset, type = (uint32_t), offset = 0, size = 4
    name = subdivisionLevel, type = (uint16_t), offset = 4, size = 2
    name = format, type = (uint16_t), offset = 6, size = 2
} ; size: 8

TYPEDEF VkMicromapTriangleEXT = struct VkMicromapTriangleEXT

struct VkMicromapTriangleEXT {
    name = dataOffset, type = (uint32_t), offset = 0, size = 4
    name = subdivisionLevel, type = (uint16_t), offset = 4, size = 2
    name = format, type = (uint16_t), offset = 6, size = 2
} ; size: 8

TYPEDEF PFN_vkCreateMicromapEXT = VkResult (*)(VkDevice, const VkMicromapCreateInfoEXT *, const VkAllocationCallbacks *, VkMicromapEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyMicromapEXT = void (*)(VkDevice, VkMicromapEXT, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBuildMicromapsEXT = void (*)(VkCommandBuffer, uint32_t, const VkMicromapBuildInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkBuildMicromapsEXT = VkResult (*)(VkDevice, VkDeferredOperationKHR, uint32_t, const VkMicromapBuildInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyMicromapEXT = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyMicromapInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyMicromapToMemoryEXT = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyMicromapToMemoryInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyMemoryToMicromapEXT = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyMemoryToMicromapInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkWriteMicromapsPropertiesEXT = VkResult (*)(VkDevice, uint32_t, const VkMicromapEXT *, VkQueryType, size_t, void *, size_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyMicromapEXT = void (*)(VkCommandBuffer, const VkCopyMicromapInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyMicromapToMemoryEXT = void (*)(VkCommandBuffer, const VkCopyMicromapToMemoryInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyMemoryToMicromapEXT = void (*)(VkCommandBuffer, const VkCopyMemoryToMicromapInfoEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteMicromapsPropertiesEXT = void (*)(VkCommandBuffer, uint32_t, const VkMicromapEXT *, VkQueryType, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceMicromapCompatibilityEXT = void (*)(VkDevice, const VkMicromapVersionInfoEXT *, VkAccelerationStructureCompatibilityKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetMicromapBuildSizesEXT = void (*)(VkDevice, VkAccelerationStructureBuildTypeKHR, const VkMicromapBuildInfoEXT *, VkMicromapBuildSizesInfoEXT *) __attribute__((stdcall))

FUNC VkResult vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkMicromapEXT * pMicromap)

FUNC void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks * pAllocator)

FUNC void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos)

FUNC VkResult vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos)

FUNC VkResult vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT * pInfo)

FUNC VkResult vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT * pInfo)

FUNC VkResult vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT * pInfo)

FUNC VkResult vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, size_t dataSize, void * pData, size_t stride)

FUNC void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT * pInfo)

FUNC void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT * pInfo)

FUNC void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT * pInfo)

FUNC void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)

FUNC void vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility)

FUNC void vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT * pBuildInfo, VkMicromapBuildSizesInfoEXT * pSizeInfo)

struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = clustercullingShader, type = (VkBool32), offset = 16, size = 4
    name = multiviewClusterCullingShader, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI

struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = clustercullingShader, type = (VkBool32), offset = 16, size = 4
    name = multiviewClusterCullingShader, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxWorkGroupCount, type = (uint32_t[3]), offset = 16, size = 12
    name = maxWorkGroupSize, type = (uint32_t[3]), offset = 28, size = 12
    name = maxOutputClusterCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = indirectBufferOffsetAlignment, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

TYPEDEF VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI

struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxWorkGroupCount, type = (uint32_t[3]), offset = 16, size = 12
    name = maxWorkGroupSize, type = (uint32_t[3]), offset = 28, size = 12
    name = maxOutputClusterCount, type = (uint32_t), offset = 40, size = 4
    padding (4 bytes)
    name = indirectBufferOffsetAlignment, type = (VkDeviceSize), offset = 48, size = 8
} ; size: 56

struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = clusterShadingRate, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI

struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = clusterShadingRate, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdDrawClusterHUAWEI = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawClusterIndirectHUAWEI = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize) __attribute__((stdcall))

FUNC void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)

FUNC void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = borderColorSwizzle, type = (VkBool32), offset = 16, size = 4
    name = borderColorSwizzleFromImage, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT

struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = borderColorSwizzle, type = (VkBool32), offset = 16, size = 4
    name = borderColorSwizzleFromImage, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = components, type = (VkComponentMapping), offset = 16, size = 16
    name = srgb, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkSamplerBorderColorComponentMappingCreateInfoEXT = struct VkSamplerBorderColorComponentMappingCreateInfoEXT

struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = components, type = (VkComponentMapping), offset = 16, size = 16
    name = srgb, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pageableDeviceLocalMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT

struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pageableDeviceLocalMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkSetDeviceMemoryPriorityEXT = void (*)(VkDevice, VkDeviceMemory, float) __attribute__((stdcall))

FUNC void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority)

struct VkPhysicalDeviceShaderCorePropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pixelRate, type = (uint32_t), offset = 16, size = 4
    name = texelRate, type = (uint32_t), offset = 20, size = 4
    name = fmaRate, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceShaderCorePropertiesARM = struct VkPhysicalDeviceShaderCorePropertiesARM

struct VkPhysicalDeviceShaderCorePropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pixelRate, type = (uint32_t), offset = 16, size = 4
    name = texelRate, type = (uint32_t), offset = 20, size = 4
    name = fmaRate, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64

TYPEDEF VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64

struct VkDeviceQueueShaderCoreControlCreateInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkDeviceQueueShaderCoreControlCreateInfoARM = struct VkDeviceQueueShaderCoreControlCreateInfoARM

struct VkDeviceQueueShaderCoreControlCreateInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreCount, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = schedulingControls, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSchedulingControlsFeaturesARM = struct VkPhysicalDeviceSchedulingControlsFeaturesARM

struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = schedulingControls, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = schedulingControlsFlags, type = (VkPhysicalDeviceSchedulingControlsFlagsARM), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceSchedulingControlsPropertiesARM = struct VkPhysicalDeviceSchedulingControlsPropertiesARM

struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = schedulingControlsFlags, type = (VkPhysicalDeviceSchedulingControlsFlagsARM), offset = 16, size = 8
} ; size: 24

struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageSlicedViewOf3D, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT

struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageSlicedViewOf3D, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkImageViewSlicedCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sliceOffset, type = (uint32_t), offset = 16, size = 4
    name = sliceCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkImageViewSlicedCreateInfoEXT = struct VkImageViewSlicedCreateInfoEXT

struct VkImageViewSlicedCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = sliceOffset, type = (uint32_t), offset = 16, size = 4
    name = sliceCount, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorSetHostMapping, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE

struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorSetHostMapping, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkDescriptorSetBindingReferenceVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorSetLayout, type = (VkDescriptorSetLayout), offset = 16, size = 8
    name = binding, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDescriptorSetBindingReferenceVALVE = struct VkDescriptorSetBindingReferenceVALVE

struct VkDescriptorSetBindingReferenceVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = descriptorSetLayout, type = (VkDescriptorSetLayout), offset = 16, size = 8
    name = binding, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorOffset, type = (size_t), offset = 16, size = 8
    name = descriptorSize, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkDescriptorSetLayoutHostMappingInfoVALVE = struct VkDescriptorSetLayoutHostMappingInfoVALVE

struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorOffset, type = (size_t), offset = 16, size = 8
    name = descriptorSize, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = void (*)(VkDevice, const VkDescriptorSetBindingReferenceVALVE *, VkDescriptorSetLayoutHostMappingInfoVALVE *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDescriptorSetHostMappingVALVE = void (*)(VkDevice, VkDescriptorSet, void **) __attribute__((stdcall))

FUNC void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE * pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE * pHostMapping)

FUNC void vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void ** ppData)

struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClampZeroOne, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT

struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = depthClampZeroOne, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = nonSeamlessCubeMap, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT

struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = nonSeamlessCubeMap, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPassStriped, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRenderPassStripedFeaturesARM = struct VkPhysicalDeviceRenderPassStripedFeaturesARM

struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPassStriped, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPassStripeGranularity, type = (VkExtent2D), offset = 16, size = 8
    name = maxRenderPassStripes, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceRenderPassStripedPropertiesARM = struct VkPhysicalDeviceRenderPassStripedPropertiesARM

struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = renderPassStripeGranularity, type = (VkExtent2D), offset = 16, size = 8
    name = maxRenderPassStripes, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkRenderPassStripeInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeArea, type = (VkRect2D), offset = 16, size = 16
} ; size: 32

TYPEDEF VkRenderPassStripeInfoARM = struct VkRenderPassStripeInfoARM

struct VkRenderPassStripeInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeArea, type = (VkRect2D), offset = 16, size = 16
} ; size: 32

struct VkRenderPassStripeBeginInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStripeInfos, type = (const VkRenderPassStripeInfoARM *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkRenderPassStripeBeginInfoARM = struct VkRenderPassStripeBeginInfoARM

struct VkRenderPassStripeBeginInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStripeInfos, type = (const VkRenderPassStripeInfoARM *), offset = 24, size = 8
} ; size: 32

struct VkRenderPassStripeSubmitInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeSemaphoreInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStripeSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkRenderPassStripeSubmitInfoARM = struct VkRenderPassStripeSubmitInfoARM

struct VkRenderPassStripeSubmitInfoARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = stripeSemaphoreInfoCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pStripeSemaphoreInfos, type = (const VkSemaphoreSubmitInfo *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMapOffset, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM

struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityMapOffset, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityOffsetGranularity, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM

struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = fragmentDensityOffsetGranularity, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentDensityOffsetCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pFragmentDensityOffsets, type = (const VkOffset2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM

struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = fragmentDensityOffsetCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pFragmentDensityOffsets, type = (const VkOffset2D *), offset = 24, size = 8
} ; size: 32

struct VkCopyMemoryIndirectCommandNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = dstAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkCopyMemoryIndirectCommandNV = struct VkCopyMemoryIndirectCommandNV

struct VkCopyMemoryIndirectCommandNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = dstAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkCopyMemoryToImageIndirectCommandNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 8, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 12, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 32, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 44, size = 12
} ; size: 56

TYPEDEF VkCopyMemoryToImageIndirectCommandNV = struct VkCopyMemoryToImageIndirectCommandNV

struct VkCopyMemoryToImageIndirectCommandNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = bufferRowLength, type = (uint32_t), offset = 8, size = 4
    name = bufferImageHeight, type = (uint32_t), offset = 12, size = 4
    name = imageSubresource, type = (VkImageSubresourceLayers), offset = 16, size = 16
    name = imageOffset, type = (VkOffset3D), offset = 32, size = 12
    name = imageExtent, type = (VkExtent3D), offset = 44, size = 12
} ; size: 56

struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indirectCopy, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV

struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = indirectCopy, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedQueues, type = (VkQueueFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV

struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedQueues, type = (VkQueueFlags), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdCopyMemoryIndirectNV = void (*)(VkCommandBuffer, VkDeviceAddress, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyMemoryToImageIndirectNV = void (*)(VkCommandBuffer, VkDeviceAddress, uint32_t, uint32_t, VkImage, VkImageLayout, const VkImageSubresourceLayers *) __attribute__((stdcall))

FUNC void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride)

FUNC void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers * pImageSubresources)

TYPEDEF VkMemoryDecompressionMethodFlagBitsNV = VkFlags64

TYPEDEF VkMemoryDecompressionMethodFlagsNV = VkFlags64

struct VkDecompressMemoryRegionNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = dstAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = compressedSize, type = (VkDeviceSize), offset = 16, size = 8
    name = decompressedSize, type = (VkDeviceSize), offset = 24, size = 8
    name = decompressionMethod, type = (VkMemoryDecompressionMethodFlagsNV), offset = 32, size = 8
} ; size: 40

TYPEDEF VkDecompressMemoryRegionNV = struct VkDecompressMemoryRegionNV

struct VkDecompressMemoryRegionNV {
    name = srcAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = dstAddress, type = (VkDeviceAddress), offset = 8, size = 8
    name = compressedSize, type = (VkDeviceSize), offset = 16, size = 8
    name = decompressedSize, type = (VkDeviceSize), offset = 24, size = 8
    name = decompressionMethod, type = (VkMemoryDecompressionMethodFlagsNV), offset = 32, size = 8
} ; size: 40

struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryDecompression, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMemoryDecompressionFeaturesNV = struct VkPhysicalDeviceMemoryDecompressionFeaturesNV

struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = memoryDecompression, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = decompressionMethods, type = (VkMemoryDecompressionMethodFlagsNV), offset = 16, size = 8
    name = maxDecompressionIndirectCount, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPhysicalDeviceMemoryDecompressionPropertiesNV = struct VkPhysicalDeviceMemoryDecompressionPropertiesNV

struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = decompressionMethods, type = (VkMemoryDecompressionMethodFlagsNV), offset = 16, size = 8
    name = maxDecompressionIndirectCount, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkCmdDecompressMemoryNV = void (*)(VkCommandBuffer, uint32_t, const VkDecompressMemoryRegionNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDecompressMemoryIndirectCountNV = void (*)(VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, uint32_t) __attribute__((stdcall))

FUNC void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV * pDecompressMemoryRegions)

FUNC void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride)

struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceGeneratedCompute, type = (VkBool32), offset = 16, size = 4
    name = deviceGeneratedComputePipelines, type = (VkBool32), offset = 20, size = 4
    name = deviceGeneratedComputeCaptureReplay, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV

struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = deviceGeneratedCompute, type = (VkBool32), offset = 16, size = 4
    name = deviceGeneratedComputePipelines, type = (VkBool32), offset = 20, size = 4
    name = deviceGeneratedComputeCaptureReplay, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkComputePipelineIndirectBufferInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = size, type = (VkDeviceSize), offset = 24, size = 8
    name = pipelineDeviceAddressCaptureReplay, type = (VkDeviceAddress), offset = 32, size = 8
} ; size: 40

TYPEDEF VkComputePipelineIndirectBufferInfoNV = struct VkComputePipelineIndirectBufferInfoNV

struct VkComputePipelineIndirectBufferInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = deviceAddress, type = (VkDeviceAddress), offset = 16, size = 8
    name = size, type = (VkDeviceSize), offset = 24, size = 8
    name = pipelineDeviceAddressCaptureReplay, type = (VkDeviceAddress), offset = 32, size = 8
} ; size: 40

struct VkPipelineIndirectDeviceAddressInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineIndirectDeviceAddressInfoNV = struct VkPipelineIndirectDeviceAddressInfoNV

struct VkPipelineIndirectDeviceAddressInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pipelineBindPoint, type = (VkPipelineBindPoint), offset = 16, size = 4
    padding (4 bytes)
    name = pipeline, type = (VkPipeline), offset = 24, size = 8
} ; size: 32

struct VkBindPipelineIndirectCommandNV {
    name = pipelineAddress, type = (VkDeviceAddress), offset = 0, size = 8
} ; size: 8

TYPEDEF VkBindPipelineIndirectCommandNV = struct VkBindPipelineIndirectCommandNV

struct VkBindPipelineIndirectCommandNV {
    name = pipelineAddress, type = (VkDeviceAddress), offset = 0, size = 8
} ; size: 8

TYPEDEF PFN_vkGetPipelineIndirectMemoryRequirementsNV = void (*)(VkDevice, const VkComputePipelineCreateInfo *, VkMemoryRequirements2 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdUpdatePipelineIndirectBufferNV = void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipeline) __attribute__((stdcall))

TYPEDEF PFN_vkGetPipelineIndirectDeviceAddressNV = VkDeviceAddress (*)(VkDevice, const VkPipelineIndirectDeviceAddressInfoNV *) __attribute__((stdcall))

FUNC void vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo * pCreateInfo, VkMemoryRequirements2 * pMemoryRequirements)

FUNC void vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

FUNC VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV * pInfo)

struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = linearColorAttachment, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV

struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = linearColorAttachment, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionControlSwapchain, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT

struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = imageCompressionControlSwapchain, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkImageViewSampleWeightCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = filterCenter, type = (VkOffset2D), offset = 16, size = 8
    name = filterSize, type = (VkExtent2D), offset = 24, size = 8
    name = numPhases, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkImageViewSampleWeightCreateInfoQCOM = struct VkImageViewSampleWeightCreateInfoQCOM

struct VkImageViewSampleWeightCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = filterCenter, type = (VkOffset2D), offset = 16, size = 8
    name = filterSize, type = (VkExtent2D), offset = 24, size = 8
    name = numPhases, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureSampleWeighted, type = (VkBool32), offset = 16, size = 4
    name = textureBoxFilter, type = (VkBool32), offset = 20, size = 4
    name = textureBlockMatch, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceImageProcessingFeaturesQCOM = struct VkPhysicalDeviceImageProcessingFeaturesQCOM

struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureSampleWeighted, type = (VkBool32), offset = 16, size = 4
    name = textureBoxFilter, type = (VkBool32), offset = 20, size = 4
    name = textureBlockMatch, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxWeightFilterPhases, type = (uint32_t), offset = 16, size = 4
    name = maxWeightFilterDimension, type = (VkExtent2D), offset = 20, size = 8
    name = maxBlockMatchRegion, type = (VkExtent2D), offset = 28, size = 8
    name = maxBoxFilterBlockSize, type = (VkExtent2D), offset = 36, size = 8
} ; size: 48

TYPEDEF VkPhysicalDeviceImageProcessingPropertiesQCOM = struct VkPhysicalDeviceImageProcessingPropertiesQCOM

struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxWeightFilterPhases, type = (uint32_t), offset = 16, size = 4
    name = maxWeightFilterDimension, type = (VkExtent2D), offset = 20, size = 8
    name = maxBlockMatchRegion, type = (VkExtent2D), offset = 28, size = 8
    name = maxBoxFilterBlockSize, type = (VkExtent2D), offset = 36, size = 8
} ; size: 48

struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = nestedCommandBuffer, type = (VkBool32), offset = 16, size = 4
    name = nestedCommandBufferRendering, type = (VkBool32), offset = 20, size = 4
    name = nestedCommandBufferSimultaneousUse, type = (VkBool32), offset = 24, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceNestedCommandBufferFeaturesEXT = struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT

struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = nestedCommandBuffer, type = (VkBool32), offset = 16, size = 4
    name = nestedCommandBufferRendering, type = (VkBool32), offset = 20, size = 4
    name = nestedCommandBufferSimultaneousUse, type = (VkBool32), offset = 24, size = 4
} ; size: 32

struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxCommandBufferNestingLevel, type = (uint32_t), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceNestedCommandBufferPropertiesEXT = struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT

struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxCommandBufferNestingLevel, type = (uint32_t), offset = 16, size = 4
} ; size: 24

struct VkExternalMemoryAcquireUnmodifiedEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = acquireUnmodifiedMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkExternalMemoryAcquireUnmodifiedEXT = struct VkExternalMemoryAcquireUnmodifiedEXT

struct VkExternalMemoryAcquireUnmodifiedEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = acquireUnmodifiedMemory, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState3TessellationDomainOrigin, type = (VkBool32), offset = 16, size = 4
    name = extendedDynamicState3DepthClampEnable, type = (VkBool32), offset = 20, size = 4
    name = extendedDynamicState3PolygonMode, type = (VkBool32), offset = 24, size = 4
    name = extendedDynamicState3RasterizationSamples, type = (VkBool32), offset = 28, size = 4
    name = extendedDynamicState3SampleMask, type = (VkBool32), offset = 32, size = 4
    name = extendedDynamicState3AlphaToCoverageEnable, type = (VkBool32), offset = 36, size = 4
    name = extendedDynamicState3AlphaToOneEnable, type = (VkBool32), offset = 40, size = 4
    name = extendedDynamicState3LogicOpEnable, type = (VkBool32), offset = 44, size = 4
    name = extendedDynamicState3ColorBlendEnable, type = (VkBool32), offset = 48, size = 4
    name = extendedDynamicState3ColorBlendEquation, type = (VkBool32), offset = 52, size = 4
    name = extendedDynamicState3ColorWriteMask, type = (VkBool32), offset = 56, size = 4
    name = extendedDynamicState3RasterizationStream, type = (VkBool32), offset = 60, size = 4
    name = extendedDynamicState3ConservativeRasterizationMode, type = (VkBool32), offset = 64, size = 4
    name = extendedDynamicState3ExtraPrimitiveOverestimationSize, type = (VkBool32), offset = 68, size = 4
    name = extendedDynamicState3DepthClipEnable, type = (VkBool32), offset = 72, size = 4
    name = extendedDynamicState3SampleLocationsEnable, type = (VkBool32), offset = 76, size = 4
    name = extendedDynamicState3ColorBlendAdvanced, type = (VkBool32), offset = 80, size = 4
    name = extendedDynamicState3ProvokingVertexMode, type = (VkBool32), offset = 84, size = 4
    name = extendedDynamicState3LineRasterizationMode, type = (VkBool32), offset = 88, size = 4
    name = extendedDynamicState3LineStippleEnable, type = (VkBool32), offset = 92, size = 4
    name = extendedDynamicState3DepthClipNegativeOneToOne, type = (VkBool32), offset = 96, size = 4
    name = extendedDynamicState3ViewportWScalingEnable, type = (VkBool32), offset = 100, size = 4
    name = extendedDynamicState3ViewportSwizzle, type = (VkBool32), offset = 104, size = 4
    name = extendedDynamicState3CoverageToColorEnable, type = (VkBool32), offset = 108, size = 4
    name = extendedDynamicState3CoverageToColorLocation, type = (VkBool32), offset = 112, size = 4
    name = extendedDynamicState3CoverageModulationMode, type = (VkBool32), offset = 116, size = 4
    name = extendedDynamicState3CoverageModulationTableEnable, type = (VkBool32), offset = 120, size = 4
    name = extendedDynamicState3CoverageModulationTable, type = (VkBool32), offset = 124, size = 4
    name = extendedDynamicState3CoverageReductionMode, type = (VkBool32), offset = 128, size = 4
    name = extendedDynamicState3RepresentativeFragmentTestEnable, type = (VkBool32), offset = 132, size = 4
    name = extendedDynamicState3ShadingRateImageEnable, type = (VkBool32), offset = 136, size = 4
} ; size: 144

TYPEDEF VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT

struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedDynamicState3TessellationDomainOrigin, type = (VkBool32), offset = 16, size = 4
    name = extendedDynamicState3DepthClampEnable, type = (VkBool32), offset = 20, size = 4
    name = extendedDynamicState3PolygonMode, type = (VkBool32), offset = 24, size = 4
    name = extendedDynamicState3RasterizationSamples, type = (VkBool32), offset = 28, size = 4
    name = extendedDynamicState3SampleMask, type = (VkBool32), offset = 32, size = 4
    name = extendedDynamicState3AlphaToCoverageEnable, type = (VkBool32), offset = 36, size = 4
    name = extendedDynamicState3AlphaToOneEnable, type = (VkBool32), offset = 40, size = 4
    name = extendedDynamicState3LogicOpEnable, type = (VkBool32), offset = 44, size = 4
    name = extendedDynamicState3ColorBlendEnable, type = (VkBool32), offset = 48, size = 4
    name = extendedDynamicState3ColorBlendEquation, type = (VkBool32), offset = 52, size = 4
    name = extendedDynamicState3ColorWriteMask, type = (VkBool32), offset = 56, size = 4
    name = extendedDynamicState3RasterizationStream, type = (VkBool32), offset = 60, size = 4
    name = extendedDynamicState3ConservativeRasterizationMode, type = (VkBool32), offset = 64, size = 4
    name = extendedDynamicState3ExtraPrimitiveOverestimationSize, type = (VkBool32), offset = 68, size = 4
    name = extendedDynamicState3DepthClipEnable, type = (VkBool32), offset = 72, size = 4
    name = extendedDynamicState3SampleLocationsEnable, type = (VkBool32), offset = 76, size = 4
    name = extendedDynamicState3ColorBlendAdvanced, type = (VkBool32), offset = 80, size = 4
    name = extendedDynamicState3ProvokingVertexMode, type = (VkBool32), offset = 84, size = 4
    name = extendedDynamicState3LineRasterizationMode, type = (VkBool32), offset = 88, size = 4
    name = extendedDynamicState3LineStippleEnable, type = (VkBool32), offset = 92, size = 4
    name = extendedDynamicState3DepthClipNegativeOneToOne, type = (VkBool32), offset = 96, size = 4
    name = extendedDynamicState3ViewportWScalingEnable, type = (VkBool32), offset = 100, size = 4
    name = extendedDynamicState3ViewportSwizzle, type = (VkBool32), offset = 104, size = 4
    name = extendedDynamicState3CoverageToColorEnable, type = (VkBool32), offset = 108, size = 4
    name = extendedDynamicState3CoverageToColorLocation, type = (VkBool32), offset = 112, size = 4
    name = extendedDynamicState3CoverageModulationMode, type = (VkBool32), offset = 116, size = 4
    name = extendedDynamicState3CoverageModulationTableEnable, type = (VkBool32), offset = 120, size = 4
    name = extendedDynamicState3CoverageModulationTable, type = (VkBool32), offset = 124, size = 4
    name = extendedDynamicState3CoverageReductionMode, type = (VkBool32), offset = 128, size = 4
    name = extendedDynamicState3RepresentativeFragmentTestEnable, type = (VkBool32), offset = 132, size = 4
    name = extendedDynamicState3ShadingRateImageEnable, type = (VkBool32), offset = 136, size = 4
} ; size: 144

struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicPrimitiveTopologyUnrestricted, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT

struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicPrimitiveTopologyUnrestricted, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkColorBlendEquationEXT {
    name = srcColorBlendFactor, type = (VkBlendFactor), offset = 0, size = 4
    name = dstColorBlendFactor, type = (VkBlendFactor), offset = 4, size = 4
    name = colorBlendOp, type = (VkBlendOp), offset = 8, size = 4
    name = srcAlphaBlendFactor, type = (VkBlendFactor), offset = 12, size = 4
    name = dstAlphaBlendFactor, type = (VkBlendFactor), offset = 16, size = 4
    name = alphaBlendOp, type = (VkBlendOp), offset = 20, size = 4
} ; size: 24

TYPEDEF VkColorBlendEquationEXT = struct VkColorBlendEquationEXT

struct VkColorBlendEquationEXT {
    name = srcColorBlendFactor, type = (VkBlendFactor), offset = 0, size = 4
    name = dstColorBlendFactor, type = (VkBlendFactor), offset = 4, size = 4
    name = colorBlendOp, type = (VkBlendOp), offset = 8, size = 4
    name = srcAlphaBlendFactor, type = (VkBlendFactor), offset = 12, size = 4
    name = dstAlphaBlendFactor, type = (VkBlendFactor), offset = 16, size = 4
    name = alphaBlendOp, type = (VkBlendOp), offset = 20, size = 4
} ; size: 24

struct VkColorBlendAdvancedEXT {
    name = advancedBlendOp, type = (VkBlendOp), offset = 0, size = 4
    name = srcPremultiplied, type = (VkBool32), offset = 4, size = 4
    name = dstPremultiplied, type = (VkBool32), offset = 8, size = 4
    name = blendOverlap, type = (VkBlendOverlapEXT), offset = 12, size = 4
    name = clampResults, type = (VkBool32), offset = 16, size = 4
} ; size: 20

TYPEDEF VkColorBlendAdvancedEXT = struct VkColorBlendAdvancedEXT

struct VkColorBlendAdvancedEXT {
    name = advancedBlendOp, type = (VkBlendOp), offset = 0, size = 4
    name = srcPremultiplied, type = (VkBool32), offset = 4, size = 4
    name = dstPremultiplied, type = (VkBool32), offset = 8, size = 4
    name = blendOverlap, type = (VkBlendOverlapEXT), offset = 12, size = 4
    name = clampResults, type = (VkBool32), offset = 16, size = 4
} ; size: 20

TYPEDEF PFN_vkCmdSetDepthClampEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetPolygonModeEXT = void (*)(VkCommandBuffer, VkPolygonMode) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRasterizationSamplesEXT = void (*)(VkCommandBuffer, VkSampleCountFlagBits) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetSampleMaskEXT = void (*)(VkCommandBuffer, VkSampleCountFlagBits, const VkSampleMask *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetAlphaToCoverageEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetAlphaToOneEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetLogicOpEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetColorBlendEnableEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBool32 *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetColorBlendEquationEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkColorBlendEquationEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetColorWriteMaskEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkColorComponentFlags *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetTessellationDomainOriginEXT = void (*)(VkCommandBuffer, VkTessellationDomainOrigin) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRasterizationStreamEXT = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetConservativeRasterizationModeEXT = void (*)(VkCommandBuffer, VkConservativeRasterizationModeEXT) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = void (*)(VkCommandBuffer, float) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthClipEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetSampleLocationsEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetColorBlendAdvancedEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkColorBlendAdvancedEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetProvokingVertexModeEXT = void (*)(VkCommandBuffer, VkProvokingVertexModeEXT) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetLineRasterizationModeEXT = void (*)(VkCommandBuffer, VkLineRasterizationModeEXT) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetLineStippleEnableEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetDepthClipNegativeOneToOneEXT = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewportWScalingEnableNV = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetViewportSwizzleNV = void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkViewportSwizzleNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageToColorEnableNV = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageToColorLocationNV = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageModulationModeNV = void (*)(VkCommandBuffer, VkCoverageModulationModeNV) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageModulationTableEnableNV = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageModulationTableNV = void (*)(VkCommandBuffer, uint32_t, const float *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetShadingRateImageEnableNV = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRepresentativeFragmentTestEnableNV = void (*)(VkCommandBuffer, VkBool32) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetCoverageReductionModeNV = void (*)(VkCommandBuffer, VkCoverageReductionModeNV) __attribute__((stdcall))

FUNC void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)

FUNC void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)

FUNC void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples)

FUNC void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask * pSampleMask)

FUNC void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)

FUNC void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)

FUNC void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)

FUNC void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32 * pColorBlendEnables)

FUNC void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT * pColorBlendEquations)

FUNC void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags * pColorWriteMasks)

FUNC void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)

FUNC void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream)

FUNC void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)

FUNC void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)

FUNC void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)

FUNC void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)

FUNC void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT * pColorBlendAdvanced)

FUNC void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)

FUNC void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode)

FUNC void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)

FUNC void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)

FUNC void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)

FUNC void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV * pViewportSwizzles)

FUNC void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)

FUNC void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation)

FUNC void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)

FUNC void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)

FUNC void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float * pCoverageModulationTable)

FUNC void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)

FUNC void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)

FUNC void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)

ENUM VkSubpassMergeStatusEXT {
    VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13
    VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkSubpassMergeStatusEXT = enum VkSubpassMergeStatusEXT

ENUM VkSubpassMergeStatusEXT {
    VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13
    VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647
}

struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subpassMergeFeedback, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT

struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = subpassMergeFeedback, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkRenderPassCreationControlEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = disallowMerging, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkRenderPassCreationControlEXT = struct VkRenderPassCreationControlEXT

struct VkRenderPassCreationControlEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = disallowMerging, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkRenderPassCreationFeedbackInfoEXT {
    name = postMergeSubpassCount, type = (uint32_t), offset = 0, size = 4
} ; size: 4

TYPEDEF VkRenderPassCreationFeedbackInfoEXT = struct VkRenderPassCreationFeedbackInfoEXT

struct VkRenderPassCreationFeedbackInfoEXT {
    name = postMergeSubpassCount, type = (uint32_t), offset = 0, size = 4
} ; size: 4

struct VkRenderPassCreationFeedbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pRenderPassFeedback, type = (VkRenderPassCreationFeedbackInfoEXT *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkRenderPassCreationFeedbackCreateInfoEXT = struct VkRenderPassCreationFeedbackCreateInfoEXT

struct VkRenderPassCreationFeedbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pRenderPassFeedback, type = (VkRenderPassCreationFeedbackInfoEXT *), offset = 16, size = 8
} ; size: 24

struct VkRenderPassSubpassFeedbackInfoEXT {
    name = subpassMergeStatus, type = (VkSubpassMergeStatusEXT), offset = 0, size = 4
    name = description, type = (char[256]), offset = 4, size = 256
    name = postMergeIndex, type = (uint32_t), offset = 260, size = 4
} ; size: 264

TYPEDEF VkRenderPassSubpassFeedbackInfoEXT = struct VkRenderPassSubpassFeedbackInfoEXT

struct VkRenderPassSubpassFeedbackInfoEXT {
    name = subpassMergeStatus, type = (VkSubpassMergeStatusEXT), offset = 0, size = 4
    name = description, type = (char[256]), offset = 4, size = 256
    name = postMergeIndex, type = (uint32_t), offset = 260, size = 4
} ; size: 264

struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pSubpassFeedback, type = (VkRenderPassSubpassFeedbackInfoEXT *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkRenderPassSubpassFeedbackCreateInfoEXT = struct VkRenderPassSubpassFeedbackCreateInfoEXT

struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pSubpassFeedback, type = (VkRenderPassSubpassFeedbackInfoEXT *), offset = 16, size = 8
} ; size: 24

ENUM VkDirectDriverLoadingModeLUNARG {
    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1
    VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647
}

TYPEDEF VkDirectDriverLoadingModeLUNARG = enum VkDirectDriverLoadingModeLUNARG

ENUM VkDirectDriverLoadingModeLUNARG {
    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1
    VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647
}

TYPEDEF VkDirectDriverLoadingFlagsLUNARG = VkFlags

TYPEDEF PFN_vkGetInstanceProcAddrLUNARG = PFN_vkVoidFunction (*)(VkInstance, const char *) __attribute__((stdcall))

struct VkDirectDriverLoadingInfoLUNARG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDirectDriverLoadingFlagsLUNARG), offset = 16, size = 4
    padding (4 bytes)
    name = pfnGetInstanceProcAddr, type = (PFN_vkGetInstanceProcAddrLUNARG), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDirectDriverLoadingInfoLUNARG = struct VkDirectDriverLoadingInfoLUNARG

struct VkDirectDriverLoadingInfoLUNARG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkDirectDriverLoadingFlagsLUNARG), offset = 16, size = 4
    padding (4 bytes)
    name = pfnGetInstanceProcAddr, type = (PFN_vkGetInstanceProcAddrLUNARG), offset = 24, size = 8
} ; size: 32

struct VkDirectDriverLoadingListLUNARG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mode, type = (VkDirectDriverLoadingModeLUNARG), offset = 16, size = 4
    name = driverCount, type = (uint32_t), offset = 20, size = 4
    name = pDrivers, type = (const VkDirectDriverLoadingInfoLUNARG *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkDirectDriverLoadingListLUNARG = struct VkDirectDriverLoadingListLUNARG

struct VkDirectDriverLoadingListLUNARG {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = mode, type = (VkDirectDriverLoadingModeLUNARG), offset = 16, size = 4
    name = driverCount, type = (uint32_t), offset = 20, size = 4
    name = pDrivers, type = (const VkDirectDriverLoadingInfoLUNARG *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderModuleIdentifier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT

struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderModuleIdentifier, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderModuleIdentifierAlgorithmUUID, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

TYPEDEF VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT

struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderModuleIdentifierAlgorithmUUID, type = (uint8_t[16]), offset = 16, size = 16
} ; size: 32

struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = identifierSize, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pIdentifier, type = (const uint8_t *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT

struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = identifierSize, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pIdentifier, type = (const uint8_t *), offset = 24, size = 8
} ; size: 32

struct VkShaderModuleIdentifierEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = identifierSize, type = (uint32_t), offset = 16, size = 4
    name = identifier, type = (uint8_t[32]), offset = 20, size = 32
} ; size: 56

TYPEDEF VkShaderModuleIdentifierEXT = struct VkShaderModuleIdentifierEXT

struct VkShaderModuleIdentifierEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = identifierSize, type = (uint32_t), offset = 16, size = 4
    name = identifier, type = (uint8_t[32]), offset = 20, size = 32
} ; size: 56

TYPEDEF PFN_vkGetShaderModuleIdentifierEXT = void (*)(VkDevice, VkShaderModule, VkShaderModuleIdentifierEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkGetShaderModuleCreateInfoIdentifierEXT = void (*)(VkDevice, const VkShaderModuleCreateInfo *, VkShaderModuleIdentifierEXT *) __attribute__((stdcall))

FUNC void vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT * pIdentifier)

FUNC void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, VkShaderModuleIdentifierEXT * pIdentifier)

TYPEDEF VkOpticalFlowSessionNV = struct VkOpticalFlowSessionNV_T *

ENUM VkOpticalFlowPerformanceLevelNV {
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowPerformanceLevelNV = enum VkOpticalFlowPerformanceLevelNV

ENUM VkOpticalFlowPerformanceLevelNV {
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647
}

ENUM VkOpticalFlowSessionBindingPointNV {
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowSessionBindingPointNV = enum VkOpticalFlowSessionBindingPointNV

ENUM VkOpticalFlowSessionBindingPointNV {
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647
}

ENUM VkOpticalFlowGridSizeFlagBitsNV {
    VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1
    VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2
    VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4
    VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8
    VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowGridSizeFlagBitsNV = enum VkOpticalFlowGridSizeFlagBitsNV

ENUM VkOpticalFlowGridSizeFlagBitsNV {
    VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1
    VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2
    VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4
    VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8
    VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowGridSizeFlagsNV = VkFlags

ENUM VkOpticalFlowUsageFlagBitsNV {
    VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1
    VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2
    VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4
    VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8
    VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16
    VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowUsageFlagBitsNV = enum VkOpticalFlowUsageFlagBitsNV

ENUM VkOpticalFlowUsageFlagBitsNV {
    VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0
    VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1
    VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2
    VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4
    VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8
    VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16
    VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowUsageFlagsNV = VkFlags

ENUM VkOpticalFlowSessionCreateFlagBitsNV {
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4
    VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8
    VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16
    VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowSessionCreateFlagBitsNV = enum VkOpticalFlowSessionCreateFlagBitsNV

ENUM VkOpticalFlowSessionCreateFlagBitsNV {
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4
    VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8
    VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16
    VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowSessionCreateFlagsNV = VkFlags

ENUM VkOpticalFlowExecuteFlagBitsNV {
    VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1
    VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowExecuteFlagBitsNV = enum VkOpticalFlowExecuteFlagBitsNV

ENUM VkOpticalFlowExecuteFlagBitsNV {
    VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1
    VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOpticalFlowExecuteFlagsNV = VkFlags

struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = opticalFlow, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceOpticalFlowFeaturesNV = struct VkPhysicalDeviceOpticalFlowFeaturesNV

struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = opticalFlow, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedOutputGridSizes, type = (VkOpticalFlowGridSizeFlagsNV), offset = 16, size = 4
    name = supportedHintGridSizes, type = (VkOpticalFlowGridSizeFlagsNV), offset = 20, size = 4
    name = hintSupported, type = (VkBool32), offset = 24, size = 4
    name = costSupported, type = (VkBool32), offset = 28, size = 4
    name = bidirectionalFlowSupported, type = (VkBool32), offset = 32, size = 4
    name = globalFlowSupported, type = (VkBool32), offset = 36, size = 4
    name = minWidth, type = (uint32_t), offset = 40, size = 4
    name = minHeight, type = (uint32_t), offset = 44, size = 4
    name = maxWidth, type = (uint32_t), offset = 48, size = 4
    name = maxHeight, type = (uint32_t), offset = 52, size = 4
    name = maxNumRegionsOfInterest, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceOpticalFlowPropertiesNV = struct VkPhysicalDeviceOpticalFlowPropertiesNV

struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = supportedOutputGridSizes, type = (VkOpticalFlowGridSizeFlagsNV), offset = 16, size = 4
    name = supportedHintGridSizes, type = (VkOpticalFlowGridSizeFlagsNV), offset = 20, size = 4
    name = hintSupported, type = (VkBool32), offset = 24, size = 4
    name = costSupported, type = (VkBool32), offset = 28, size = 4
    name = bidirectionalFlowSupported, type = (VkBool32), offset = 32, size = 4
    name = globalFlowSupported, type = (VkBool32), offset = 36, size = 4
    name = minWidth, type = (uint32_t), offset = 40, size = 4
    name = minHeight, type = (uint32_t), offset = 44, size = 4
    name = maxWidth, type = (uint32_t), offset = 48, size = 4
    name = maxHeight, type = (uint32_t), offset = 52, size = 4
    name = maxNumRegionsOfInterest, type = (uint32_t), offset = 56, size = 4
} ; size: 64

struct VkOpticalFlowImageFormatInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkOpticalFlowUsageFlagsNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkOpticalFlowImageFormatInfoNV = struct VkOpticalFlowImageFormatInfoNV

struct VkOpticalFlowImageFormatInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = usage, type = (VkOpticalFlowUsageFlagsNV), offset = 16, size = 4
} ; size: 24

struct VkOpticalFlowImageFormatPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
} ; size: 24

TYPEDEF VkOpticalFlowImageFormatPropertiesNV = struct VkOpticalFlowImageFormatPropertiesNV

struct VkOpticalFlowImageFormatPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = format, type = (VkFormat), offset = 16, size = 4
} ; size: 24

struct VkOpticalFlowSessionCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = width, type = (uint32_t), offset = 16, size = 4
    name = height, type = (uint32_t), offset = 20, size = 4
    name = imageFormat, type = (VkFormat), offset = 24, size = 4
    name = flowVectorFormat, type = (VkFormat), offset = 28, size = 4
    name = costFormat, type = (VkFormat), offset = 32, size = 4
    name = outputGridSize, type = (VkOpticalFlowGridSizeFlagsNV), offset = 36, size = 4
    name = hintGridSize, type = (VkOpticalFlowGridSizeFlagsNV), offset = 40, size = 4
    name = performanceLevel, type = (VkOpticalFlowPerformanceLevelNV), offset = 44, size = 4
    name = flags, type = (VkOpticalFlowSessionCreateFlagsNV), offset = 48, size = 4
} ; size: 56

TYPEDEF VkOpticalFlowSessionCreateInfoNV = struct VkOpticalFlowSessionCreateInfoNV

struct VkOpticalFlowSessionCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = width, type = (uint32_t), offset = 16, size = 4
    name = height, type = (uint32_t), offset = 20, size = 4
    name = imageFormat, type = (VkFormat), offset = 24, size = 4
    name = flowVectorFormat, type = (VkFormat), offset = 28, size = 4
    name = costFormat, type = (VkFormat), offset = 32, size = 4
    name = outputGridSize, type = (VkOpticalFlowGridSizeFlagsNV), offset = 36, size = 4
    name = hintGridSize, type = (VkOpticalFlowGridSizeFlagsNV), offset = 40, size = 4
    name = performanceLevel, type = (VkOpticalFlowPerformanceLevelNV), offset = 44, size = 4
    name = flags, type = (VkOpticalFlowSessionCreateFlagsNV), offset = 48, size = 4
} ; size: 56

struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = id, type = (uint32_t), offset = 16, size = 4
    name = size, type = (uint32_t), offset = 20, size = 4
    name = pPrivateData, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkOpticalFlowSessionCreatePrivateDataInfoNV = struct VkOpticalFlowSessionCreatePrivateDataInfoNV

struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = id, type = (uint32_t), offset = 16, size = 4
    name = size, type = (uint32_t), offset = 20, size = 4
    name = pPrivateData, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkOpticalFlowExecuteInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkOpticalFlowExecuteFlagsNV), offset = 16, size = 4
    name = regionCount, type = (uint32_t), offset = 20, size = 4
    name = pRegions, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkOpticalFlowExecuteInfoNV = struct VkOpticalFlowExecuteInfoNV

struct VkOpticalFlowExecuteInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = flags, type = (VkOpticalFlowExecuteFlagsNV), offset = 16, size = 4
    name = regionCount, type = (uint32_t), offset = 20, size = 4
    name = pRegions, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = VkResult (*)(VkPhysicalDevice, const VkOpticalFlowImageFormatInfoNV *, uint32_t *, VkOpticalFlowImageFormatPropertiesNV *) __attribute__((stdcall))

TYPEDEF PFN_vkCreateOpticalFlowSessionNV = VkResult (*)(VkDevice, const VkOpticalFlowSessionCreateInfoNV *, const VkAllocationCallbacks *, VkOpticalFlowSessionNV *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyOpticalFlowSessionNV = void (*)(VkDevice, VkOpticalFlowSessionNV, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkBindOpticalFlowSessionImageNV = VkResult (*)(VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout) __attribute__((stdcall))

TYPEDEF PFN_vkCmdOpticalFlowExecuteNV = void (*)(VkCommandBuffer, VkOpticalFlowSessionNV, const VkOpticalFlowExecuteInfoNV *) __attribute__((stdcall))

FUNC VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV * pOpticalFlowImageFormatInfo, uint32_t * pFormatCount, VkOpticalFlowImageFormatPropertiesNV * pImageFormatProperties)

FUNC VkResult vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkOpticalFlowSessionNV * pSession)

FUNC void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout)

FUNC void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV * pExecuteInfo)

struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = legacyDithering, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceLegacyDitheringFeaturesEXT = struct VkPhysicalDeviceLegacyDitheringFeaturesEXT

struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = legacyDithering, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineProtectedAccess, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT

struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineProtectedAccess, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkShaderEXT = struct VkShaderEXT_T *

ENUM VkShaderCodeTypeEXT {
    VK_SHADER_CODE_TYPE_BINARY_EXT = 0
    VK_SHADER_CODE_TYPE_SPIRV_EXT = 1
    VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkShaderCodeTypeEXT = enum VkShaderCodeTypeEXT

ENUM VkShaderCodeTypeEXT {
    VK_SHADER_CODE_TYPE_BINARY_EXT = 0
    VK_SHADER_CODE_TYPE_SPIRV_EXT = 1
    VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647
}

ENUM VkShaderCreateFlagBitsEXT {
    VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1
    VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2
    VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4
    VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8
    VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16
    VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32
    VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64
    VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkShaderCreateFlagBitsEXT = enum VkShaderCreateFlagBitsEXT

ENUM VkShaderCreateFlagBitsEXT {
    VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1
    VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2
    VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4
    VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8
    VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16
    VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32
    VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64
    VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkShaderCreateFlagsEXT = VkFlags

struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderObject, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderObjectFeaturesEXT = struct VkPhysicalDeviceShaderObjectFeaturesEXT

struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderObject, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBinaryUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = shaderBinaryVersion, type = (uint32_t), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceShaderObjectPropertiesEXT = struct VkPhysicalDeviceShaderObjectPropertiesEXT

struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderBinaryUUID, type = (uint8_t[16]), offset = 16, size = 16
    name = shaderBinaryVersion, type = (uint32_t), offset = 32, size = 4
} ; size: 40

struct VkShaderCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkShaderCreateFlagsEXT), offset = 16, size = 4
    name = stage, type = (VkShaderStageFlagBits), offset = 20, size = 4
    name = nextStage, type = (VkShaderStageFlags), offset = 24, size = 4
    name = codeType, type = (VkShaderCodeTypeEXT), offset = 28, size = 4
    name = codeSize, type = (size_t), offset = 32, size = 8
    name = pCode, type = (const void *), offset = 40, size = 8
    name = pName, type = (const char *), offset = 48, size = 8
    name = setLayoutCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 64, size = 8
    name = pushConstantRangeCount, type = (uint32_t), offset = 72, size = 4
    padding (4 bytes)
    name = pPushConstantRanges, type = (const VkPushConstantRange *), offset = 80, size = 8
    name = pSpecializationInfo, type = (const VkSpecializationInfo *), offset = 88, size = 8
} ; size: 96

TYPEDEF VkShaderCreateInfoEXT = struct VkShaderCreateInfoEXT

struct VkShaderCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkShaderCreateFlagsEXT), offset = 16, size = 4
    name = stage, type = (VkShaderStageFlagBits), offset = 20, size = 4
    name = nextStage, type = (VkShaderStageFlags), offset = 24, size = 4
    name = codeType, type = (VkShaderCodeTypeEXT), offset = 28, size = 4
    name = codeSize, type = (size_t), offset = 32, size = 8
    name = pCode, type = (const void *), offset = 40, size = 8
    name = pName, type = (const char *), offset = 48, size = 8
    name = setLayoutCount, type = (uint32_t), offset = 56, size = 4
    padding (4 bytes)
    name = pSetLayouts, type = (const VkDescriptorSetLayout *), offset = 64, size = 8
    name = pushConstantRangeCount, type = (uint32_t), offset = 72, size = 4
    padding (4 bytes)
    name = pPushConstantRanges, type = (const VkPushConstantRange *), offset = 80, size = 8
    name = pSpecializationInfo, type = (const VkSpecializationInfo *), offset = 88, size = 8
} ; size: 96

TYPEDEF VkShaderRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

TYPEDEF PFN_vkCreateShadersEXT = VkResult (*)(VkDevice, uint32_t, const VkShaderCreateInfoEXT *, const VkAllocationCallbacks *, VkShaderEXT *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyShaderEXT = void (*)(VkDevice, VkShaderEXT, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkGetShaderBinaryDataEXT = VkResult (*)(VkDevice, VkShaderEXT, size_t *, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBindShadersEXT = void (*)(VkCommandBuffer, uint32_t, const VkShaderStageFlagBits *, const VkShaderEXT *) __attribute__((stdcall))

FUNC VkResult vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkShaderEXT * pShaders)

FUNC void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks * pAllocator)

FUNC VkResult vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t * pDataSize, void * pData)

FUNC void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits * pStages, const VkShaderEXT * pShaders)

struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = tileProperties, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct VkPhysicalDeviceTilePropertiesFeaturesQCOM

struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = tileProperties, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkTilePropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = tileSize, type = (VkExtent3D), offset = 16, size = 12
    name = apronSize, type = (VkExtent2D), offset = 28, size = 8
    name = origin, type = (VkOffset2D), offset = 36, size = 8
} ; size: 48

TYPEDEF VkTilePropertiesQCOM = struct VkTilePropertiesQCOM

struct VkTilePropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = tileSize, type = (VkExtent3D), offset = 16, size = 12
    name = apronSize, type = (VkExtent2D), offset = 28, size = 8
    name = origin, type = (VkOffset2D), offset = 36, size = 8
} ; size: 48

TYPEDEF PFN_vkGetFramebufferTilePropertiesQCOM = VkResult (*)(VkDevice, VkFramebuffer, uint32_t *, VkTilePropertiesQCOM *) __attribute__((stdcall))

TYPEDEF PFN_vkGetDynamicRenderingTilePropertiesQCOM = VkResult (*)(VkDevice, const VkRenderingInfo *, VkTilePropertiesQCOM *) __attribute__((stdcall))

FUNC VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t * pPropertiesCount, VkTilePropertiesQCOM * pProperties)

FUNC VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo * pRenderingInfo, VkTilePropertiesQCOM * pProperties)

struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = amigoProfiling, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct VkPhysicalDeviceAmigoProfilingFeaturesSEC

struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = amigoProfiling, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkAmigoProfilingSubmitInfoSEC {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = firstDrawTimestamp, type = (uint64_t), offset = 16, size = 8
    name = swapBufferTimestamp, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAmigoProfilingSubmitInfoSEC = struct VkAmigoProfilingSubmitInfoSEC

struct VkAmigoProfilingSubmitInfoSEC {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = firstDrawTimestamp, type = (uint64_t), offset = 16, size = 8
    name = swapBufferTimestamp, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiviewPerViewViewports, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM

struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiviewPerViewViewports, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkRayTracingInvocationReorderModeNV {
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkRayTracingInvocationReorderModeNV = enum VkRayTracingInvocationReorderModeNV

ENUM VkRayTracingInvocationReorderModeNV {
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647
}

struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingInvocationReorderReorderingHint, type = (VkRayTracingInvocationReorderModeNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV

struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingInvocationReorderReorderingHint, type = (VkRayTracingInvocationReorderModeNV), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingInvocationReorder, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV

struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingInvocationReorder, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedSparseAddressSpace, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV

struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedSparseAddressSpace, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedSparseAddressSpaceSize, type = (VkDeviceSize), offset = 16, size = 8
    name = extendedSparseImageUsageFlags, type = (VkImageUsageFlags), offset = 24, size = 4
    name = extendedSparseBufferUsageFlags, type = (VkBufferUsageFlags), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV

struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = extendedSparseAddressSpaceSize, type = (VkDeviceSize), offset = 16, size = 8
    name = extendedSparseImageUsageFlags, type = (VkImageUsageFlags), offset = 24, size = 4
    name = extendedSparseBufferUsageFlags, type = (VkBufferUsageFlags), offset = 28, size = 4
} ; size: 32

ENUM VkLayerSettingTypeEXT {
    VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0
    VK_LAYER_SETTING_TYPE_INT32_EXT = 1
    VK_LAYER_SETTING_TYPE_INT64_EXT = 2
    VK_LAYER_SETTING_TYPE_UINT32_EXT = 3
    VK_LAYER_SETTING_TYPE_UINT64_EXT = 4
    VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5
    VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6
    VK_LAYER_SETTING_TYPE_STRING_EXT = 7
    VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 2147483647
}

TYPEDEF VkLayerSettingTypeEXT = enum VkLayerSettingTypeEXT

ENUM VkLayerSettingTypeEXT {
    VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0
    VK_LAYER_SETTING_TYPE_INT32_EXT = 1
    VK_LAYER_SETTING_TYPE_INT64_EXT = 2
    VK_LAYER_SETTING_TYPE_UINT32_EXT = 3
    VK_LAYER_SETTING_TYPE_UINT64_EXT = 4
    VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5
    VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6
    VK_LAYER_SETTING_TYPE_STRING_EXT = 7
    VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 2147483647
}

struct VkLayerSettingEXT {
    name = pLayerName, type = (const char *), offset = 0, size = 8
    name = pSettingName, type = (const char *), offset = 8, size = 8
    name = type, type = (VkLayerSettingTypeEXT), offset = 16, size = 4
    name = valueCount, type = (uint32_t), offset = 20, size = 4
    name = pValues, type = (const void *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkLayerSettingEXT = struct VkLayerSettingEXT

struct VkLayerSettingEXT {
    name = pLayerName, type = (const char *), offset = 0, size = 8
    name = pSettingName, type = (const char *), offset = 8, size = 8
    name = type, type = (VkLayerSettingTypeEXT), offset = 16, size = 4
    name = valueCount, type = (uint32_t), offset = 20, size = 4
    name = pValues, type = (const void *), offset = 24, size = 8
} ; size: 32

struct VkLayerSettingsCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = settingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pSettings, type = (const VkLayerSettingEXT *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkLayerSettingsCreateInfoEXT = struct VkLayerSettingsCreateInfoEXT

struct VkLayerSettingsCreateInfoEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = settingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pSettings, type = (const VkLayerSettingEXT *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreBuiltins, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM

struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreBuiltins, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreMask, type = (uint64_t), offset = 16, size = 8
    name = shaderCoreCount, type = (uint32_t), offset = 24, size = 4
    name = shaderWarpsPerCore, type = (uint32_t), offset = 28, size = 4
} ; size: 32

TYPEDEF VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM

struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderCoreMask, type = (uint64_t), offset = 16, size = 8
    name = shaderCoreCount, type = (uint32_t), offset = 24, size = 4
    name = shaderWarpsPerCore, type = (uint32_t), offset = 28, size = 4
} ; size: 32

struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineLibraryGroupHandles, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT

struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = pipelineLibraryGroupHandles, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRenderingUnusedAttachments, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT

struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = dynamicRenderingUnusedAttachments, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkLatencyMarkerNV {
    VK_LATENCY_MARKER_SIMULATION_START_NV = 0
    VK_LATENCY_MARKER_SIMULATION_END_NV = 1
    VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2
    VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3
    VK_LATENCY_MARKER_PRESENT_START_NV = 4
    VK_LATENCY_MARKER_PRESENT_END_NV = 5
    VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6
    VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11
    VK_LATENCY_MARKER_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkLatencyMarkerNV = enum VkLatencyMarkerNV

ENUM VkLatencyMarkerNV {
    VK_LATENCY_MARKER_SIMULATION_START_NV = 0
    VK_LATENCY_MARKER_SIMULATION_END_NV = 1
    VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2
    VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3
    VK_LATENCY_MARKER_PRESENT_START_NV = 4
    VK_LATENCY_MARKER_PRESENT_END_NV = 5
    VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6
    VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11
    VK_LATENCY_MARKER_MAX_ENUM_NV = 2147483647
}

ENUM VkOutOfBandQueueTypeNV {
    VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0
    VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1
    VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 2147483647
}

TYPEDEF VkOutOfBandQueueTypeNV = enum VkOutOfBandQueueTypeNV

ENUM VkOutOfBandQueueTypeNV {
    VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0
    VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1
    VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 2147483647
}

struct VkLatencySleepModeInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = lowLatencyMode, type = (VkBool32), offset = 16, size = 4
    name = lowLatencyBoost, type = (VkBool32), offset = 20, size = 4
    name = minimumIntervalUs, type = (uint32_t), offset = 24, size = 4
} ; size: 32

TYPEDEF VkLatencySleepModeInfoNV = struct VkLatencySleepModeInfoNV

struct VkLatencySleepModeInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = lowLatencyMode, type = (VkBool32), offset = 16, size = 4
    name = lowLatencyBoost, type = (VkBool32), offset = 20, size = 4
    name = minimumIntervalUs, type = (uint32_t), offset = 24, size = 4
} ; size: 32

struct VkLatencySleepInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = signalSemaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
} ; size: 32

TYPEDEF VkLatencySleepInfoNV = struct VkLatencySleepInfoNV

struct VkLatencySleepInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = signalSemaphore, type = (VkSemaphore), offset = 16, size = 8
    name = value, type = (uint64_t), offset = 24, size = 8
} ; size: 32

struct VkSetLatencyMarkerInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
    name = marker, type = (VkLatencyMarkerNV), offset = 24, size = 4
} ; size: 32

TYPEDEF VkSetLatencyMarkerInfoNV = struct VkSetLatencyMarkerInfoNV

struct VkSetLatencyMarkerInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
    name = marker, type = (VkLatencyMarkerNV), offset = 24, size = 4
} ; size: 32

struct VkLatencyTimingsFrameReportNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
    name = inputSampleTimeUs, type = (uint64_t), offset = 24, size = 8
    name = simStartTimeUs, type = (uint64_t), offset = 32, size = 8
    name = simEndTimeUs, type = (uint64_t), offset = 40, size = 8
    name = renderSubmitStartTimeUs, type = (uint64_t), offset = 48, size = 8
    name = renderSubmitEndTimeUs, type = (uint64_t), offset = 56, size = 8
    name = presentStartTimeUs, type = (uint64_t), offset = 64, size = 8
    name = presentEndTimeUs, type = (uint64_t), offset = 72, size = 8
    name = driverStartTimeUs, type = (uint64_t), offset = 80, size = 8
    name = driverEndTimeUs, type = (uint64_t), offset = 88, size = 8
    name = osRenderQueueStartTimeUs, type = (uint64_t), offset = 96, size = 8
    name = osRenderQueueEndTimeUs, type = (uint64_t), offset = 104, size = 8
    name = gpuRenderStartTimeUs, type = (uint64_t), offset = 112, size = 8
    name = gpuRenderEndTimeUs, type = (uint64_t), offset = 120, size = 8
} ; size: 128

TYPEDEF VkLatencyTimingsFrameReportNV = struct VkLatencyTimingsFrameReportNV

struct VkLatencyTimingsFrameReportNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
    name = inputSampleTimeUs, type = (uint64_t), offset = 24, size = 8
    name = simStartTimeUs, type = (uint64_t), offset = 32, size = 8
    name = simEndTimeUs, type = (uint64_t), offset = 40, size = 8
    name = renderSubmitStartTimeUs, type = (uint64_t), offset = 48, size = 8
    name = renderSubmitEndTimeUs, type = (uint64_t), offset = 56, size = 8
    name = presentStartTimeUs, type = (uint64_t), offset = 64, size = 8
    name = presentEndTimeUs, type = (uint64_t), offset = 72, size = 8
    name = driverStartTimeUs, type = (uint64_t), offset = 80, size = 8
    name = driverEndTimeUs, type = (uint64_t), offset = 88, size = 8
    name = osRenderQueueStartTimeUs, type = (uint64_t), offset = 96, size = 8
    name = osRenderQueueEndTimeUs, type = (uint64_t), offset = 104, size = 8
    name = gpuRenderStartTimeUs, type = (uint64_t), offset = 112, size = 8
    name = gpuRenderEndTimeUs, type = (uint64_t), offset = 120, size = 8
} ; size: 128

struct VkGetLatencyMarkerInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = timingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pTimings, type = (VkLatencyTimingsFrameReportNV *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkGetLatencyMarkerInfoNV = struct VkGetLatencyMarkerInfoNV

struct VkGetLatencyMarkerInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = timingCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pTimings, type = (VkLatencyTimingsFrameReportNV *), offset = 24, size = 8
} ; size: 32

struct VkLatencySubmissionPresentIdNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
} ; size: 24

TYPEDEF VkLatencySubmissionPresentIdNV = struct VkLatencySubmissionPresentIdNV

struct VkLatencySubmissionPresentIdNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentID, type = (uint64_t), offset = 16, size = 8
} ; size: 24

struct VkSwapchainLatencyCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = latencyModeEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSwapchainLatencyCreateInfoNV = struct VkSwapchainLatencyCreateInfoNV

struct VkSwapchainLatencyCreateInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = latencyModeEnable, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkOutOfBandQueueTypeInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueType, type = (VkOutOfBandQueueTypeNV), offset = 16, size = 4
} ; size: 24

TYPEDEF VkOutOfBandQueueTypeInfoNV = struct VkOutOfBandQueueTypeInfoNV

struct VkOutOfBandQueueTypeInfoNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = queueType, type = (VkOutOfBandQueueTypeNV), offset = 16, size = 4
} ; size: 24

struct VkLatencySurfaceCapabilitiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkLatencySurfaceCapabilitiesNV = struct VkLatencySurfaceCapabilitiesNV

struct VkLatencySurfaceCapabilitiesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = presentModeCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPresentModes, type = (VkPresentModeKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF PFN_vkSetLatencySleepModeNV = VkResult (*)(VkDevice, VkSwapchainKHR, const VkLatencySleepModeInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkLatencySleepNV = VkResult (*)(VkDevice, VkSwapchainKHR, const VkLatencySleepInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkSetLatencyMarkerNV = void (*)(VkDevice, VkSwapchainKHR, const VkSetLatencyMarkerInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkGetLatencyTimingsNV = void (*)(VkDevice, VkSwapchainKHR, VkGetLatencyMarkerInfoNV *) __attribute__((stdcall))

TYPEDEF PFN_vkQueueNotifyOutOfBandNV = void (*)(VkQueue, const VkOutOfBandQueueTypeInfoNV *) __attribute__((stdcall))

FUNC VkResult vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV * pSleepModeInfo)

FUNC VkResult vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV * pSleepInfo)

FUNC void vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV * pLatencyMarkerInfo)

FUNC void vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV * pLatencyMarkerInfo)

FUNC void vkQueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV * pQueueTypeInfo)

struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiviewPerViewRenderAreas, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM

struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = multiviewPerViewRenderAreas, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = perViewRenderAreaCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPerViewRenderAreas, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM

struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = perViewRenderAreaCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pPerViewRenderAreas, type = (const VkRect2D *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = perStageDescriptorSet, type = (VkBool32), offset = 16, size = 4
    name = dynamicPipelineLayout, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkPhysicalDevicePerStageDescriptorSetFeaturesNV = struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV

struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = perStageDescriptorSet, type = (VkBool32), offset = 16, size = 4
    name = dynamicPipelineLayout, type = (VkBool32), offset = 20, size = 4
} ; size: 24

ENUM VkBlockMatchWindowCompareModeQCOM {
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 2147483647
}

TYPEDEF VkBlockMatchWindowCompareModeQCOM = enum VkBlockMatchWindowCompareModeQCOM

ENUM VkBlockMatchWindowCompareModeQCOM {
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 2147483647
}

struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureBlockMatch2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceImageProcessing2FeaturesQCOM = struct VkPhysicalDeviceImageProcessing2FeaturesQCOM

struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = textureBlockMatch2, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxBlockMatchWindow, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

TYPEDEF VkPhysicalDeviceImageProcessing2PropertiesQCOM = struct VkPhysicalDeviceImageProcessing2PropertiesQCOM

struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxBlockMatchWindow, type = (VkExtent2D), offset = 16, size = 8
} ; size: 24

struct VkSamplerBlockMatchWindowCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = windowExtent, type = (VkExtent2D), offset = 16, size = 8
    name = windowCompareMode, type = (VkBlockMatchWindowCompareModeQCOM), offset = 24, size = 4
} ; size: 32

TYPEDEF VkSamplerBlockMatchWindowCreateInfoQCOM = struct VkSamplerBlockMatchWindowCreateInfoQCOM

struct VkSamplerBlockMatchWindowCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = windowExtent, type = (VkExtent2D), offset = 16, size = 8
    name = windowCompareMode, type = (VkBlockMatchWindowCompareModeQCOM), offset = 24, size = 4
} ; size: 32

ENUM VkCubicFilterWeightsQCOM {
    VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0
    VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1
    VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2
    VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3
    VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 2147483647
}

TYPEDEF VkCubicFilterWeightsQCOM = enum VkCubicFilterWeightsQCOM

ENUM VkCubicFilterWeightsQCOM {
    VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0
    VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1
    VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2
    VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3
    VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 2147483647
}

struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = selectableCubicWeights, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCubicWeightsFeaturesQCOM = struct VkPhysicalDeviceCubicWeightsFeaturesQCOM

struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = selectableCubicWeights, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSamplerCubicWeightsCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = cubicWeights, type = (VkCubicFilterWeightsQCOM), offset = 16, size = 4
} ; size: 24

TYPEDEF VkSamplerCubicWeightsCreateInfoQCOM = struct VkSamplerCubicWeightsCreateInfoQCOM

struct VkSamplerCubicWeightsCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = cubicWeights, type = (VkCubicFilterWeightsQCOM), offset = 16, size = 4
} ; size: 24

struct VkBlitImageCubicWeightsInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = cubicWeights, type = (VkCubicFilterWeightsQCOM), offset = 16, size = 4
} ; size: 24

TYPEDEF VkBlitImageCubicWeightsInfoQCOM = struct VkBlitImageCubicWeightsInfoQCOM

struct VkBlitImageCubicWeightsInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = cubicWeights, type = (VkCubicFilterWeightsQCOM), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcrDegamma, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM

struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = ycbcrDegamma, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = enableYDegamma, type = (VkBool32), offset = 16, size = 4
    name = enableCbCrDegamma, type = (VkBool32), offset = 20, size = 4
} ; size: 24

TYPEDEF VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM

struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = enableYDegamma, type = (VkBool32), offset = 16, size = 4
    name = enableCbCrDegamma, type = (VkBool32), offset = 20, size = 4
} ; size: 24

struct VkPhysicalDeviceCubicClampFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cubicRangeClamp, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceCubicClampFeaturesQCOM = struct VkPhysicalDeviceCubicClampFeaturesQCOM

struct VkPhysicalDeviceCubicClampFeaturesQCOM {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = cubicRangeClamp, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = attachmentFeedbackLoopDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT

struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = attachmentFeedbackLoopDynamicState, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = void (*)(VkCommandBuffer, VkImageAspectFlags) __attribute__((stdcall))

FUNC void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask)

ENUM VkLayeredDriverUnderlyingApiMSFT {
    VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0
    VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1
    VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 2147483647
}

TYPEDEF VkLayeredDriverUnderlyingApiMSFT = enum VkLayeredDriverUnderlyingApiMSFT

ENUM VkLayeredDriverUnderlyingApiMSFT {
    VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0
    VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1
    VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 2147483647
}

struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = underlyingAPI, type = (VkLayeredDriverUnderlyingApiMSFT), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceLayeredDriverPropertiesMSFT = struct VkPhysicalDeviceLayeredDriverPropertiesMSFT

struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = underlyingAPI, type = (VkLayeredDriverUnderlyingApiMSFT), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorPoolOverallocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV

struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = descriptorPoolOverallocation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderRawAccessChains, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRawAccessChainsFeaturesNV = struct VkPhysicalDeviceRawAccessChainsFeaturesNV

struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderRawAccessChains, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloat16VectorAtomics, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV

struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderFloat16VectorAtomics, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingValidation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayTracingValidationFeaturesNV = struct VkPhysicalDeviceRayTracingValidationFeaturesNV

struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingValidation, type = (VkBool32), offset = 16, size = 4
} ; size: 24

ENUM VkBuildAccelerationStructureModeKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkBuildAccelerationStructureModeKHR = enum VkBuildAccelerationStructureModeKHR

ENUM VkBuildAccelerationStructureModeKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
}

ENUM VkAccelerationStructureCreateFlagBitsKHR {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
    VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureCreateFlagBitsKHR = enum VkAccelerationStructureCreateFlagBitsKHR

ENUM VkAccelerationStructureCreateFlagBitsKHR {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
    VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkAccelerationStructureCreateFlagsKHR = VkFlags

struct VkAccelerationStructureBuildRangeInfoKHR {
    name = primitiveCount, type = (uint32_t), offset = 0, size = 4
    name = primitiveOffset, type = (uint32_t), offset = 4, size = 4
    name = firstVertex, type = (uint32_t), offset = 8, size = 4
    name = transformOffset, type = (uint32_t), offset = 12, size = 4
} ; size: 16

TYPEDEF VkAccelerationStructureBuildRangeInfoKHR = struct VkAccelerationStructureBuildRangeInfoKHR

struct VkAccelerationStructureBuildRangeInfoKHR {
    name = primitiveCount, type = (uint32_t), offset = 0, size = 4
    name = primitiveOffset, type = (uint32_t), offset = 4, size = 4
    name = firstVertex, type = (uint32_t), offset = 8, size = 4
    name = transformOffset, type = (uint32_t), offset = 12, size = 4
} ; size: 16

struct VkAccelerationStructureGeometryTrianglesDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexFormat, type = (VkFormat), offset = 16, size = 4
    padding (4 bytes)
    name = vertexData, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
    name = vertexStride, type = (VkDeviceSize), offset = 32, size = 8
    name = maxVertex, type = (uint32_t), offset = 40, size = 4
    name = indexType, type = (VkIndexType), offset = 44, size = 4
    name = indexData, type = (VkDeviceOrHostAddressConstKHR), offset = 48, size = 8
    name = transformData, type = (VkDeviceOrHostAddressConstKHR), offset = 56, size = 8
} ; size: 64

TYPEDEF VkAccelerationStructureGeometryTrianglesDataKHR = struct VkAccelerationStructureGeometryTrianglesDataKHR

struct VkAccelerationStructureGeometryTrianglesDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = vertexFormat, type = (VkFormat), offset = 16, size = 4
    padding (4 bytes)
    name = vertexData, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
    name = vertexStride, type = (VkDeviceSize), offset = 32, size = 8
    name = maxVertex, type = (uint32_t), offset = 40, size = 4
    name = indexType, type = (VkIndexType), offset = 44, size = 4
    name = indexData, type = (VkDeviceOrHostAddressConstKHR), offset = 48, size = 8
    name = transformData, type = (VkDeviceOrHostAddressConstKHR), offset = 56, size = 8
} ; size: 64

struct VkAccelerationStructureGeometryAabbsDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = stride, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAccelerationStructureGeometryAabbsDataKHR = struct VkAccelerationStructureGeometryAabbsDataKHR

struct VkAccelerationStructureGeometryAabbsDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = stride, type = (VkDeviceSize), offset = 24, size = 8
} ; size: 32

struct VkAccelerationStructureGeometryInstancesDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = arrayOfPointers, type = (VkBool32), offset = 16, size = 4
    padding (4 bytes)
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAccelerationStructureGeometryInstancesDataKHR = struct VkAccelerationStructureGeometryInstancesDataKHR

struct VkAccelerationStructureGeometryInstancesDataKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = arrayOfPointers, type = (VkBool32), offset = 16, size = 4
    padding (4 bytes)
    name = data, type = (VkDeviceOrHostAddressConstKHR), offset = 24, size = 8
} ; size: 32

TYPEDEF VkAccelerationStructureGeometryDataKHR = union VkAccelerationStructureGeometryDataKHR

struct VkAccelerationStructureGeometryKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = geometryType, type = (VkGeometryTypeKHR), offset = 16, size = 4
    padding (4 bytes)
    name = geometry, type = (VkAccelerationStructureGeometryDataKHR), offset = 24, size = 64
    name = flags, type = (VkGeometryFlagsKHR), offset = 88, size = 4
} ; size: 96

TYPEDEF VkAccelerationStructureGeometryKHR = struct VkAccelerationStructureGeometryKHR

struct VkAccelerationStructureGeometryKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = geometryType, type = (VkGeometryTypeKHR), offset = 16, size = 4
    padding (4 bytes)
    name = geometry, type = (VkAccelerationStructureGeometryDataKHR), offset = 24, size = 64
    name = flags, type = (VkGeometryFlagsKHR), offset = 88, size = 4
} ; size: 96

struct VkAccelerationStructureBuildGeometryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureTypeKHR), offset = 16, size = 4
    name = flags, type = (VkBuildAccelerationStructureFlagsKHR), offset = 20, size = 4
    name = mode, type = (VkBuildAccelerationStructureModeKHR), offset = 24, size = 4
    padding (4 bytes)
    name = srcAccelerationStructure, type = (VkAccelerationStructureKHR), offset = 32, size = 8
    name = dstAccelerationStructure, type = (VkAccelerationStructureKHR), offset = 40, size = 8
    name = geometryCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pGeometries, type = (const VkAccelerationStructureGeometryKHR *), offset = 56, size = 8
    name = ppGeometries, type = (const VkAccelerationStructureGeometryKHR *const *), offset = 64, size = 8
    name = scratchData, type = (VkDeviceOrHostAddressKHR), offset = 72, size = 8
} ; size: 80

TYPEDEF VkAccelerationStructureBuildGeometryInfoKHR = struct VkAccelerationStructureBuildGeometryInfoKHR

struct VkAccelerationStructureBuildGeometryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkAccelerationStructureTypeKHR), offset = 16, size = 4
    name = flags, type = (VkBuildAccelerationStructureFlagsKHR), offset = 20, size = 4
    name = mode, type = (VkBuildAccelerationStructureModeKHR), offset = 24, size = 4
    padding (4 bytes)
    name = srcAccelerationStructure, type = (VkAccelerationStructureKHR), offset = 32, size = 8
    name = dstAccelerationStructure, type = (VkAccelerationStructureKHR), offset = 40, size = 8
    name = geometryCount, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pGeometries, type = (const VkAccelerationStructureGeometryKHR *), offset = 56, size = 8
    name = ppGeometries, type = (const VkAccelerationStructureGeometryKHR *const *), offset = 64, size = 8
    name = scratchData, type = (VkDeviceOrHostAddressKHR), offset = 72, size = 8
} ; size: 80

struct VkAccelerationStructureCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = createFlags, type = (VkAccelerationStructureCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
    name = type, type = (VkAccelerationStructureTypeKHR), offset = 48, size = 4
    padding (4 bytes)
    name = deviceAddress, type = (VkDeviceAddress), offset = 56, size = 8
} ; size: 64

TYPEDEF VkAccelerationStructureCreateInfoKHR = struct VkAccelerationStructureCreateInfoKHR

struct VkAccelerationStructureCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = createFlags, type = (VkAccelerationStructureCreateFlagsKHR), offset = 16, size = 4
    padding (4 bytes)
    name = buffer, type = (VkBuffer), offset = 24, size = 8
    name = offset, type = (VkDeviceSize), offset = 32, size = 8
    name = size, type = (VkDeviceSize), offset = 40, size = 8
    name = type, type = (VkAccelerationStructureTypeKHR), offset = 48, size = 4
    padding (4 bytes)
    name = deviceAddress, type = (VkDeviceAddress), offset = 56, size = 8
} ; size: 64

struct VkWriteDescriptorSetAccelerationStructureKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAccelerationStructures, type = (const VkAccelerationStructureKHR *), offset = 24, size = 8
} ; size: 32

TYPEDEF VkWriteDescriptorSetAccelerationStructureKHR = struct VkWriteDescriptorSetAccelerationStructureKHR

struct VkWriteDescriptorSetAccelerationStructureKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureCount, type = (uint32_t), offset = 16, size = 4
    padding (4 bytes)
    name = pAccelerationStructures, type = (const VkAccelerationStructureKHR *), offset = 24, size = 8
} ; size: 32

struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkBool32), offset = 16, size = 4
    name = accelerationStructureCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = accelerationStructureIndirectBuild, type = (VkBool32), offset = 24, size = 4
    name = accelerationStructureHostCommands, type = (VkBool32), offset = 28, size = 4
    name = descriptorBindingAccelerationStructureUpdateAfterBind, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct VkPhysicalDeviceAccelerationStructureFeaturesKHR

struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkBool32), offset = 16, size = 4
    name = accelerationStructureCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = accelerationStructureIndirectBuild, type = (VkBool32), offset = 24, size = 4
    name = accelerationStructureHostCommands, type = (VkBool32), offset = 28, size = 4
    name = descriptorBindingAccelerationStructureUpdateAfterBind, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxGeometryCount, type = (uint64_t), offset = 16, size = 8
    name = maxInstanceCount, type = (uint64_t), offset = 24, size = 8
    name = maxPrimitiveCount, type = (uint64_t), offset = 32, size = 8
    name = maxPerStageDescriptorAccelerationStructures, type = (uint32_t), offset = 40, size = 4
    name = maxPerStageDescriptorUpdateAfterBindAccelerationStructures, type = (uint32_t), offset = 44, size = 4
    name = maxDescriptorSetAccelerationStructures, type = (uint32_t), offset = 48, size = 4
    name = maxDescriptorSetUpdateAfterBindAccelerationStructures, type = (uint32_t), offset = 52, size = 4
    name = minAccelerationStructureScratchOffsetAlignment, type = (uint32_t), offset = 56, size = 4
} ; size: 64

TYPEDEF VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct VkPhysicalDeviceAccelerationStructurePropertiesKHR

struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxGeometryCount, type = (uint64_t), offset = 16, size = 8
    name = maxInstanceCount, type = (uint64_t), offset = 24, size = 8
    name = maxPrimitiveCount, type = (uint64_t), offset = 32, size = 8
    name = maxPerStageDescriptorAccelerationStructures, type = (uint32_t), offset = 40, size = 4
    name = maxPerStageDescriptorUpdateAfterBindAccelerationStructures, type = (uint32_t), offset = 44, size = 4
    name = maxDescriptorSetAccelerationStructures, type = (uint32_t), offset = 48, size = 4
    name = maxDescriptorSetUpdateAfterBindAccelerationStructures, type = (uint32_t), offset = 52, size = 4
    name = minAccelerationStructureScratchOffsetAlignment, type = (uint32_t), offset = 56, size = 4
} ; size: 64

struct VkAccelerationStructureDeviceAddressInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureKHR), offset = 16, size = 8
} ; size: 24

TYPEDEF VkAccelerationStructureDeviceAddressInfoKHR = struct VkAccelerationStructureDeviceAddressInfoKHR

struct VkAccelerationStructureDeviceAddressInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructure, type = (VkAccelerationStructureKHR), offset = 16, size = 8
} ; size: 24

struct VkAccelerationStructureVersionInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVersionData, type = (const uint8_t *), offset = 16, size = 8
} ; size: 24

TYPEDEF VkAccelerationStructureVersionInfoKHR = struct VkAccelerationStructureVersionInfoKHR

struct VkAccelerationStructureVersionInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = pVersionData, type = (const uint8_t *), offset = 16, size = 8
} ; size: 24

struct VkCopyAccelerationStructureToMemoryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = dst, type = (VkDeviceOrHostAddressKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyAccelerationStructureToMemoryInfoKHR = struct VkCopyAccelerationStructureToMemoryInfoKHR

struct VkCopyAccelerationStructureToMemoryInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = dst, type = (VkDeviceOrHostAddressKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

struct VkCopyMemoryToAccelerationStructureInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = dst, type = (VkAccelerationStructureKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyMemoryToAccelerationStructureInfoKHR = struct VkCopyMemoryToAccelerationStructureInfoKHR

struct VkCopyMemoryToAccelerationStructureInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkDeviceOrHostAddressConstKHR), offset = 16, size = 8
    name = dst, type = (VkAccelerationStructureKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

struct VkCopyAccelerationStructureInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = dst, type = (VkAccelerationStructureKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

TYPEDEF VkCopyAccelerationStructureInfoKHR = struct VkCopyAccelerationStructureInfoKHR

struct VkCopyAccelerationStructureInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = src, type = (VkAccelerationStructureKHR), offset = 16, size = 8
    name = dst, type = (VkAccelerationStructureKHR), offset = 24, size = 8
    name = mode, type = (VkCopyAccelerationStructureModeKHR), offset = 32, size = 4
} ; size: 40

struct VkAccelerationStructureBuildSizesInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureSize, type = (VkDeviceSize), offset = 16, size = 8
    name = updateScratchSize, type = (VkDeviceSize), offset = 24, size = 8
    name = buildScratchSize, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF VkAccelerationStructureBuildSizesInfoKHR = struct VkAccelerationStructureBuildSizesInfoKHR

struct VkAccelerationStructureBuildSizesInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = accelerationStructureSize, type = (VkDeviceSize), offset = 16, size = 8
    name = updateScratchSize, type = (VkDeviceSize), offset = 24, size = 8
    name = buildScratchSize, type = (VkDeviceSize), offset = 32, size = 8
} ; size: 40

TYPEDEF PFN_vkCreateAccelerationStructureKHR = VkResult (*)(VkDevice, const VkAccelerationStructureCreateInfoKHR *, const VkAllocationCallbacks *, VkAccelerationStructureKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkDestroyAccelerationStructureKHR = void (*)(VkDevice, VkAccelerationStructureKHR, const VkAllocationCallbacks *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBuildAccelerationStructuresKHR = void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkAccelerationStructureBuildRangeInfoKHR *const *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdBuildAccelerationStructuresIndirectKHR = void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkDeviceAddress *, const uint32_t *, const uint32_t *const *) __attribute__((stdcall))

TYPEDEF PFN_vkBuildAccelerationStructuresKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkAccelerationStructureBuildRangeInfoKHR *const *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyAccelerationStructureKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyAccelerationStructureToMemoryKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureToMemoryInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCopyMemoryToAccelerationStructureKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyMemoryToAccelerationStructureInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkWriteAccelerationStructuresPropertiesKHR = VkResult (*)(VkDevice, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, size_t, void *, size_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyAccelerationStructureKHR = void (*)(VkCommandBuffer, const VkCopyAccelerationStructureInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyAccelerationStructureToMemoryKHR = void (*)(VkCommandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdCopyMemoryToAccelerationStructureKHR = void (*)(VkCommandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetAccelerationStructureDeviceAddressKHR = VkDeviceAddress (*)(VkDevice, const VkAccelerationStructureDeviceAddressInfoKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, VkQueryPool, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = void (*)(VkDevice, const VkAccelerationStructureVersionInfoKHR *, VkAccelerationStructureCompatibilityKHR *) __attribute__((stdcall))

TYPEDEF PFN_vkGetAccelerationStructureBuildSizesKHR = void (*)(VkDevice, VkAccelerationStructureBuildTypeKHR, const VkAccelerationStructureBuildGeometryInfoKHR *, const uint32_t *, VkAccelerationStructureBuildSizesInfoKHR *) __attribute__((stdcall))

FUNC VkResult vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureKHR * pAccelerationStructure)

FUNC void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks * pAllocator)

FUNC void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR *const * ppBuildRangeInfos)

FUNC void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkDeviceAddress * pIndirectDeviceAddresses, const uint32_t * pIndirectStrides, const uint32_t *const * ppMaxPrimitiveCounts)

FUNC VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR *const * ppBuildRangeInfos)

FUNC VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR * pInfo)

FUNC VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo)

FUNC VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo)

FUNC VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, size_t dataSize, void * pData, size_t stride)

FUNC void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR * pInfo)

FUNC void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo)

FUNC void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo)

FUNC VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR * pInfo)

FUNC void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)

FUNC void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility)

FUNC void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR * pBuildInfo, const uint32_t * pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo)

ENUM VkShaderGroupShaderKHR {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647
}

TYPEDEF VkShaderGroupShaderKHR = enum VkShaderGroupShaderKHR

ENUM VkShaderGroupShaderKHR {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647
}

struct VkRayTracingShaderGroupCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkRayTracingShaderGroupTypeKHR), offset = 16, size = 4
    name = generalShader, type = (uint32_t), offset = 20, size = 4
    name = closestHitShader, type = (uint32_t), offset = 24, size = 4
    name = anyHitShader, type = (uint32_t), offset = 28, size = 4
    name = intersectionShader, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pShaderGroupCaptureReplayHandle, type = (const void *), offset = 40, size = 8
} ; size: 48

TYPEDEF VkRayTracingShaderGroupCreateInfoKHR = struct VkRayTracingShaderGroupCreateInfoKHR

struct VkRayTracingShaderGroupCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = type, type = (VkRayTracingShaderGroupTypeKHR), offset = 16, size = 4
    name = generalShader, type = (uint32_t), offset = 20, size = 4
    name = closestHitShader, type = (uint32_t), offset = 24, size = 4
    name = anyHitShader, type = (uint32_t), offset = 28, size = 4
    name = intersectionShader, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pShaderGroupCaptureReplayHandle, type = (const void *), offset = 40, size = 8
} ; size: 48

struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxPipelineRayPayloadSize, type = (uint32_t), offset = 16, size = 4
    name = maxPipelineRayHitAttributeSize, type = (uint32_t), offset = 20, size = 4
} ; size: 24

TYPEDEF VkRayTracingPipelineInterfaceCreateInfoKHR = struct VkRayTracingPipelineInterfaceCreateInfoKHR

struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = maxPipelineRayPayloadSize, type = (uint32_t), offset = 16, size = 4
    name = maxPipelineRayHitAttributeSize, type = (uint32_t), offset = 20, size = 4
} ; size: 24

struct VkRayTracingPipelineCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = groupCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkRayTracingShaderGroupCreateInfoKHR *), offset = 40, size = 8
    name = maxPipelineRayRecursionDepth, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pLibraryInfo, type = (const VkPipelineLibraryCreateInfoKHR *), offset = 56, size = 8
    name = pLibraryInterface, type = (const VkRayTracingPipelineInterfaceCreateInfoKHR *), offset = 64, size = 8
    name = pDynamicState, type = (const VkPipelineDynamicStateCreateInfo *), offset = 72, size = 8
    name = layout, type = (VkPipelineLayout), offset = 80, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 88, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 96, size = 4
} ; size: 104

TYPEDEF VkRayTracingPipelineCreateInfoKHR = struct VkRayTracingPipelineCreateInfoKHR

struct VkRayTracingPipelineCreateInfoKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (const void *), offset = 8, size = 8
    name = flags, type = (VkPipelineCreateFlags), offset = 16, size = 4
    name = stageCount, type = (uint32_t), offset = 20, size = 4
    name = pStages, type = (const VkPipelineShaderStageCreateInfo *), offset = 24, size = 8
    name = groupCount, type = (uint32_t), offset = 32, size = 4
    padding (4 bytes)
    name = pGroups, type = (const VkRayTracingShaderGroupCreateInfoKHR *), offset = 40, size = 8
    name = maxPipelineRayRecursionDepth, type = (uint32_t), offset = 48, size = 4
    padding (4 bytes)
    name = pLibraryInfo, type = (const VkPipelineLibraryCreateInfoKHR *), offset = 56, size = 8
    name = pLibraryInterface, type = (const VkRayTracingPipelineInterfaceCreateInfoKHR *), offset = 64, size = 8
    name = pDynamicState, type = (const VkPipelineDynamicStateCreateInfo *), offset = 72, size = 8
    name = layout, type = (VkPipelineLayout), offset = 80, size = 8
    name = basePipelineHandle, type = (VkPipeline), offset = 88, size = 8
    name = basePipelineIndex, type = (int32_t), offset = 96, size = 4
} ; size: 104

struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingPipeline, type = (VkBool32), offset = 16, size = 4
    name = rayTracingPipelineShaderGroupHandleCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = rayTracingPipelineShaderGroupHandleCaptureReplayMixed, type = (VkBool32), offset = 24, size = 4
    name = rayTracingPipelineTraceRaysIndirect, type = (VkBool32), offset = 28, size = 4
    name = rayTraversalPrimitiveCulling, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR

struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayTracingPipeline, type = (VkBool32), offset = 16, size = 4
    name = rayTracingPipelineShaderGroupHandleCaptureReplay, type = (VkBool32), offset = 20, size = 4
    name = rayTracingPipelineShaderGroupHandleCaptureReplayMixed, type = (VkBool32), offset = 24, size = 4
    name = rayTracingPipelineTraceRaysIndirect, type = (VkBool32), offset = 28, size = 4
    name = rayTraversalPrimitiveCulling, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderGroupHandleSize, type = (uint32_t), offset = 16, size = 4
    name = maxRayRecursionDepth, type = (uint32_t), offset = 20, size = 4
    name = maxShaderGroupStride, type = (uint32_t), offset = 24, size = 4
    name = shaderGroupBaseAlignment, type = (uint32_t), offset = 28, size = 4
    name = shaderGroupHandleCaptureReplaySize, type = (uint32_t), offset = 32, size = 4
    name = maxRayDispatchInvocationCount, type = (uint32_t), offset = 36, size = 4
    name = shaderGroupHandleAlignment, type = (uint32_t), offset = 40, size = 4
    name = maxRayHitAttributeSize, type = (uint32_t), offset = 44, size = 4
} ; size: 48

TYPEDEF VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR

struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = shaderGroupHandleSize, type = (uint32_t), offset = 16, size = 4
    name = maxRayRecursionDepth, type = (uint32_t), offset = 20, size = 4
    name = maxShaderGroupStride, type = (uint32_t), offset = 24, size = 4
    name = shaderGroupBaseAlignment, type = (uint32_t), offset = 28, size = 4
    name = shaderGroupHandleCaptureReplaySize, type = (uint32_t), offset = 32, size = 4
    name = maxRayDispatchInvocationCount, type = (uint32_t), offset = 36, size = 4
    name = shaderGroupHandleAlignment, type = (uint32_t), offset = 40, size = 4
    name = maxRayHitAttributeSize, type = (uint32_t), offset = 44, size = 4
} ; size: 48

struct VkStridedDeviceAddressRegionKHR {
    name = deviceAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = stride, type = (VkDeviceSize), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

TYPEDEF VkStridedDeviceAddressRegionKHR = struct VkStridedDeviceAddressRegionKHR

struct VkStridedDeviceAddressRegionKHR {
    name = deviceAddress, type = (VkDeviceAddress), offset = 0, size = 8
    name = stride, type = (VkDeviceSize), offset = 8, size = 8
    name = size, type = (VkDeviceSize), offset = 16, size = 8
} ; size: 24

struct VkTraceRaysIndirectCommandKHR {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
    name = depth, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkTraceRaysIndirectCommandKHR = struct VkTraceRaysIndirectCommandKHR

struct VkTraceRaysIndirectCommandKHR {
    name = width, type = (uint32_t), offset = 0, size = 4
    name = height, type = (uint32_t), offset = 4, size = 4
    name = depth, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF PFN_vkCmdTraceRaysKHR = void (*)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCreateRayTracingPipelinesKHR = VkResult (*)(VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoKHR *, const VkAllocationCallbacks *, VkPipeline *) __attribute__((stdcall))

TYPEDEF PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *) __attribute__((stdcall))

TYPEDEF PFN_vkCmdTraceRaysIndirectKHR = void (*)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, VkDeviceAddress) __attribute__((stdcall))

TYPEDEF PFN_vkGetRayTracingShaderGroupStackSizeKHR = VkDeviceSize (*)(VkDevice, VkPipeline, uint32_t, VkShaderGroupShaderKHR) __attribute__((stdcall))

TYPEDEF PFN_vkCmdSetRayTracingPipelineStackSizeKHR = void (*)(VkCommandBuffer, uint32_t) __attribute__((stdcall))

FUNC void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)

FUNC VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines)

FUNC VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData)

FUNC void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)

FUNC VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader)

FUNC void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)

struct VkPhysicalDeviceRayQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayQuery, type = (VkBool32), offset = 16, size = 4
} ; size: 24

TYPEDEF VkPhysicalDeviceRayQueryFeaturesKHR = struct VkPhysicalDeviceRayQueryFeaturesKHR

struct VkPhysicalDeviceRayQueryFeaturesKHR {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = rayQuery, type = (VkBool32), offset = 16, size = 4
} ; size: 24

struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = taskShader, type = (VkBool32), offset = 16, size = 4
    name = meshShader, type = (VkBool32), offset = 20, size = 4
    name = multiviewMeshShader, type = (VkBool32), offset = 24, size = 4
    name = primitiveFragmentShadingRateMeshShader, type = (VkBool32), offset = 28, size = 4
    name = meshShaderQueries, type = (VkBool32), offset = 32, size = 4
} ; size: 40

TYPEDEF VkPhysicalDeviceMeshShaderFeaturesEXT = struct VkPhysicalDeviceMeshShaderFeaturesEXT

struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = taskShader, type = (VkBool32), offset = 16, size = 4
    name = meshShader, type = (VkBool32), offset = 20, size = 4
    name = multiviewMeshShader, type = (VkBool32), offset = 24, size = 4
    name = primitiveFragmentShadingRateMeshShader, type = (VkBool32), offset = 28, size = 4
    name = meshShaderQueries, type = (VkBool32), offset = 32, size = 4
} ; size: 40

struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTaskWorkGroupTotalCount, type = (uint32_t), offset = 16, size = 4
    name = maxTaskWorkGroupCount, type = (uint32_t[3]), offset = 20, size = 12
    name = maxTaskWorkGroupInvocations, type = (uint32_t), offset = 32, size = 4
    name = maxTaskWorkGroupSize, type = (uint32_t[3]), offset = 36, size = 12
    name = maxTaskPayloadSize, type = (uint32_t), offset = 48, size = 4
    name = maxTaskSharedMemorySize, type = (uint32_t), offset = 52, size = 4
    name = maxTaskPayloadAndSharedMemorySize, type = (uint32_t), offset = 56, size = 4
    name = maxMeshWorkGroupTotalCount, type = (uint32_t), offset = 60, size = 4
    name = maxMeshWorkGroupCount, type = (uint32_t[3]), offset = 64, size = 12
    name = maxMeshWorkGroupInvocations, type = (uint32_t), offset = 76, size = 4
    name = maxMeshWorkGroupSize, type = (uint32_t[3]), offset = 80, size = 12
    name = maxMeshSharedMemorySize, type = (uint32_t), offset = 92, size = 4
    name = maxMeshPayloadAndSharedMemorySize, type = (uint32_t), offset = 96, size = 4
    name = maxMeshOutputMemorySize, type = (uint32_t), offset = 100, size = 4
    name = maxMeshPayloadAndOutputMemorySize, type = (uint32_t), offset = 104, size = 4
    name = maxMeshOutputComponents, type = (uint32_t), offset = 108, size = 4
    name = maxMeshOutputVertices, type = (uint32_t), offset = 112, size = 4
    name = maxMeshOutputPrimitives, type = (uint32_t), offset = 116, size = 4
    name = maxMeshOutputLayers, type = (uint32_t), offset = 120, size = 4
    name = maxMeshMultiviewViewCount, type = (uint32_t), offset = 124, size = 4
    name = meshOutputPerVertexGranularity, type = (uint32_t), offset = 128, size = 4
    name = meshOutputPerPrimitiveGranularity, type = (uint32_t), offset = 132, size = 4
    name = maxPreferredTaskWorkGroupInvocations, type = (uint32_t), offset = 136, size = 4
    name = maxPreferredMeshWorkGroupInvocations, type = (uint32_t), offset = 140, size = 4
    name = prefersLocalInvocationVertexOutput, type = (VkBool32), offset = 144, size = 4
    name = prefersLocalInvocationPrimitiveOutput, type = (VkBool32), offset = 148, size = 4
    name = prefersCompactVertexOutput, type = (VkBool32), offset = 152, size = 4
    name = prefersCompactPrimitiveOutput, type = (VkBool32), offset = 156, size = 4
} ; size: 160

TYPEDEF VkPhysicalDeviceMeshShaderPropertiesEXT = struct VkPhysicalDeviceMeshShaderPropertiesEXT

struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    name = sType, type = (VkStructureType), offset = 0, size = 4
    padding (4 bytes)
    name = pNext, type = (void *), offset = 8, size = 8
    name = maxTaskWorkGroupTotalCount, type = (uint32_t), offset = 16, size = 4
    name = maxTaskWorkGroupCount, type = (uint32_t[3]), offset = 20, size = 12
    name = maxTaskWorkGroupInvocations, type = (uint32_t), offset = 32, size = 4
    name = maxTaskWorkGroupSize, type = (uint32_t[3]), offset = 36, size = 12
    name = maxTaskPayloadSize, type = (uint32_t), offset = 48, size = 4
    name = maxTaskSharedMemorySize, type = (uint32_t), offset = 52, size = 4
    name = maxTaskPayloadAndSharedMemorySize, type = (uint32_t), offset = 56, size = 4
    name = maxMeshWorkGroupTotalCount, type = (uint32_t), offset = 60, size = 4
    name = maxMeshWorkGroupCount, type = (uint32_t[3]), offset = 64, size = 12
    name = maxMeshWorkGroupInvocations, type = (uint32_t), offset = 76, size = 4
    name = maxMeshWorkGroupSize, type = (uint32_t[3]), offset = 80, size = 12
    name = maxMeshSharedMemorySize, type = (uint32_t), offset = 92, size = 4
    name = maxMeshPayloadAndSharedMemorySize, type = (uint32_t), offset = 96, size = 4
    name = maxMeshOutputMemorySize, type = (uint32_t), offset = 100, size = 4
    name = maxMeshPayloadAndOutputMemorySize, type = (uint32_t), offset = 104, size = 4
    name = maxMeshOutputComponents, type = (uint32_t), offset = 108, size = 4
    name = maxMeshOutputVertices, type = (uint32_t), offset = 112, size = 4
    name = maxMeshOutputPrimitives, type = (uint32_t), offset = 116, size = 4
    name = maxMeshOutputLayers, type = (uint32_t), offset = 120, size = 4
    name = maxMeshMultiviewViewCount, type = (uint32_t), offset = 124, size = 4
    name = meshOutputPerVertexGranularity, type = (uint32_t), offset = 128, size = 4
    name = meshOutputPerPrimitiveGranularity, type = (uint32_t), offset = 132, size = 4
    name = maxPreferredTaskWorkGroupInvocations, type = (uint32_t), offset = 136, size = 4
    name = maxPreferredMeshWorkGroupInvocations, type = (uint32_t), offset = 140, size = 4
    name = prefersLocalInvocationVertexOutput, type = (VkBool32), offset = 144, size = 4
    name = prefersLocalInvocationPrimitiveOutput, type = (VkBool32), offset = 148, size = 4
    name = prefersCompactVertexOutput, type = (VkBool32), offset = 152, size = 4
    name = prefersCompactPrimitiveOutput, type = (VkBool32), offset = 156, size = 4
} ; size: 160

struct VkDrawMeshTasksIndirectCommandEXT {
    name = groupCountX, type = (uint32_t), offset = 0, size = 4
    name = groupCountY, type = (uint32_t), offset = 4, size = 4
    name = groupCountZ, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF VkDrawMeshTasksIndirectCommandEXT = struct VkDrawMeshTasksIndirectCommandEXT

struct VkDrawMeshTasksIndirectCommandEXT {
    name = groupCountX, type = (uint32_t), offset = 0, size = 4
    name = groupCountY, type = (uint32_t), offset = 4, size = 4
    name = groupCountZ, type = (uint32_t), offset = 8, size = 4
} ; size: 12

TYPEDEF PFN_vkCmdDrawMeshTasksEXT = void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawMeshTasksIndirectEXT = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

TYPEDEF PFN_vkCmdDrawMeshTasksIndirectCountEXT = void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t) __attribute__((stdcall))

FUNC void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)

FUNC void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)

FUNC void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
